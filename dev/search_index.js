var documenterSearchIndex = {"docs":
[{"location":"formulations/#Network-Formulations-1","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/#Type-Hierarchy-1","page":"Network Formulations","title":"Type Hierarchy","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"We begin with the top of the hierarchy, where we can distinguish between conic and non-conic power flow models.","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"PowerModels.AbstractConicModels = Union{PowerModels.AbstractConicModel, PowerModels.AbstractBFConicModel}\nPowerModels.AbstractConicModel <: PowerModels.AbstractPowerModel\nPowerModels.AbstractBFModel <: PowerModels.AbstractPowerModel\nPowerModels.AbstractBFQPModel <: PowerModels.AbstractBFModel\nPowerModels.AbstractBFConicModel <: PowerModels.AbstractBFModel","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"We begin with the top of the hierarchy, where we can distinguish between AC and DC power flow models.","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"PowerModels.AbstractACPModel <: PowerModels.AbstractPowerModel\nPowerModels.AbstractDCPModel <: PowerModels.AbstractPowerModel\nPowerModelsDistribution.AbstractNLPUBFModel <: PowerModels.AbstractBFQPModel\nPowerModelsDistribution.AbstractConicUBFModel <: PowerModels.AbstractBFConicModel\nPowerModelsDistribution.AbstractLPUBFModel <: PowerModelsDistribution.AbstractNLPUBFModel","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"From there, different Models are possible:","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"#Bus injection models:\nPowerModels.AbstractACPModel <: PowerModels.AbstractPowerModel\nPowerModels.AbstractDCPModel <: PowerModels.AbstractPowerModel\n\n#Branch flow models:\nPowerModelsDistribution.SDPUBFModel <: PowerModelsDistribution.AbstractConicUBFModel\nPowerModelsDistribution.SOCNLPUBFModel <: PowerModelsDistribution.AbstractNLPUBFModel\nPowerModelsDistribution.SOCConicUBFModel <: PowerModelsDistribution.AbstractConicUBFModel\n\nPowerModelsDistribution.LPLinUBFModel <: PowerModels.AbstractBFModel\nPowerModelsDistribution.LPUBFFullModel <: PowerModelsDistribution.AbstractLPUBFModel\nPowerModelsDistribution.LPUBFDiagModel <: PowerModelsDistribution.AbstractLPUBFModel","category":"page"},{"location":"formulations/#Power-Models-1","page":"Network Formulations","title":"Power Models","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Each of these Models can be used as the type parameter for a PowerModel:","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"mutable struct PowerModels.ACPPowerModel <: PowerModels.AbstractACPModel PowerModels.@pm_fields end\nmutable struct PowerModels.DCPPowerModel <: PowerModels.AbstractDCPModel PowerModels.@pm_fields end\n\nmutable struct PowerModels.SOCWRPowerModel <: PowerModels.SOCWRModel PowerModels.@pm_fields end\n\nmutable struct PowerModelsDistribution.SDPUBFPowerModel <: PowerModelsDistribution.SDPUBFModel PowerModels.@pm_fields end\nmutable struct PowerModelsDistribution.SOCNLPUBFPowerModel <: PowerModelsDistribution.SOCNLPUBFModel PowerModels.@pm_fields end\nmutable struct PowerModelsDistribution.SOCConicUBFPowerModel <: PowerModelsDistribution.SOCConicUBFModel PowerModels.@pm_fields end\n\nmutable struct PowerModelsDistribution.LPUBFFullPowerModel <: PowerModelsDistribution.LPUBFFullModel PowerModels.@pm_fields end\nmutable struct PowerModelsDistribution.LPUBFDiagPowerModel <: PowerModelsDistribution.LPUBFDiagModel PowerModels.@pm_fields end\nmutable struct PowerModelsDistribution.LPLinUBFPowerModel <: PowerModelsDistribution.LPLinUBFModel PowerModels.@pm_fields end","category":"page"},{"location":"formulations/#Union-Types-1","page":"Network Formulations","title":"Union Types","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"To support both conic and quadratically-constrained formulation variants for the unbalanced branch flow model, the union type AbstractUBFModels is defined. These formulations extend AbstractBFModel and are therefore also AbstractWModels (as defined in PowerModels proper).","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"AbstractUBFModels = Union{AbstractNLPUBFModel, AbstractConicUBFModel}","category":"page"},{"location":"formulations/#Optimization-problem-classes-1","page":"Network Formulations","title":"Optimization problem classes","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"NLP (nonconvex): ACPPowerModel\nSDP: SDPUBFPowerModel\nSOC(-representable): SOCWRPowerModel, SOCNLPUBFPowerModel, SOCConicUBFPowerModel\nLinear: LPUBFFullPowerModel, LPUBFDiagPowerModel, LPLinUBFPowerModel, DCPPowerModel","category":"page"},{"location":"formulations/#Matrix-equations-versus-scalar-equations-1","page":"Network Formulations","title":"Matrix equations versus scalar equations","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"JuMP supports vectorized syntax, but not for nonlinear constraints. Therefore, certain formulations must be implemented in a scalar fashion. Other formulations can be written as matrix (in)equalities. The current implementations are categorized as follows:","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Scalar: ACPPowerModel, DCPPowerModel, LPLinUBFPowerModel, SOCWRPowerModel\nMatrix: SDPUBFPowerModel, SOCNLPUBFPowerModel, SOCConicUBFPowerModel, LPUBFFullPowerModel, LPUBFDiagPowerModel","category":"page"},{"location":"quickguide/#Quick-Start-Guide-1","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Once PowerModelsDistribution is installed, Ipopt is installed, and a network data file (e.g. \"case5_c_r_a.m\" or \"case3_unbalanced.dss\" in the package folder under ./test/data) has been acquired, an unbalanced AC Optimal Power Flow can be executed with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"using PowerModelsDistribution\nusing Ipopt\n\nrun_ac_mc_opf(\"case3_unbalanced.dss\", with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/#Getting-Results-1","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The run commands in PowerModelsDistribution return detailed results data in the form of a dictionary. Results dictionaries from either Matpower-style .m or OpenDSS' .dss files will be identical in format. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"result = run_ac_mc_opf(\"case3_unbalanced.dss\", with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations-1","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The function \"runacmcopf\" is a shorthands for a more general formulation-independent OPF execution, \"runmcopf\". For example, `runacmcopf` is equivalent to,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"using PowerModels\nrun_mc_opf(\"case3_unbalanced.dss\", ACPPowerModel, with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Note that PowerModels needs to be loaded to access formulations which are extended by PowerModelsDistribution, here \"ACPPowerModel\". The PowerModel \"ACPPowerModel\" indicates an AC formulation in polar coordinates.  This more generic run_mc_opf() allows one to solve an OPF problem with any power network formulation implemented in PowerModels or PowerModelsDistribution.  For example, the SDP relaxation of unbalanced Optimal Power Flow (branch flow model) can be run with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"using SCS\nrun_mc_opf_bf(\"case3_unbalanced.dss\", SDPUBFPowerModel, with_optimizer(SCS.Optimizer))","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Note that you have to use a SDP-capable solver, e.g. the open-source solver SCS, to solve SDP models.","category":"page"},{"location":"quickguide/#Inspecting-the-Formulation-1","page":"Getting Started","title":"Inspecting the Formulation","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a run_mc_opf call into seperate model building and solving steps.  This allows inspection of the JuMP model created by PowerModelsDistribution for the AC-OPF problem,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"data = PowerModelsDistribution.parse_file(\"case3_unbalanced.dss\")\npm = PowerModels.instantiate_model(data, ACPPowerModel, PowerModelsDistribution.build_mc_opf; multiconductor=true, ref_extensions=[ref_add_arcs_trans!])\nprint(pm.model)\noptimize_model!(pm, optimizer=with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"data-formats/#Data-Formats-1","page":"Data Formats","title":"Data Formats","text":"","category":"section"},{"location":"data-formats/#OpenDSS-1","page":"Data Formats","title":"OpenDSS","text":"","category":"section"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"PowerModelsDistribution supports parsing OpenDSS format files. In particular, we support a raw parsing of all OpenDSS specified components into a dictionary (serializable) structure, and support converting the data values of a smaller subsection of components into their expected types. Those include","category":"page"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Line\nLoad\nGenerator\nCapactior\nReactor\nTransformer\nLinecode\nCircuit\nVSource\nPVSystem\nStorage","category":"page"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Of those, a subset of configurations are converted into a PowerModelsDistribution internal data model, namely","category":"page"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Branch (from Lines (incl. Linecodes), Reactors)\nTransformer (arbitrary winding, all connections except zig-zag)\nGenerator (from Generators, PVSystems)\nLoad (incl. support for Const. Power, Const. Impedance, Const. Current models)\nShunt (from Capacitors and Reactors)\nStorage","category":"page"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Except for a small subset, in general, commands are not support, e.g. solve or calcvoltagebases (this is done automatically on parse in PowerModelsDistribution). We support the following commands","category":"page"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"clear\nredirect\ncompile\nset\nbuscoords\nnew","category":"page"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Several notes about the specific design choices w.r.t. OpenDSS are explained below.","category":"page"},{"location":"data-formats/#Circuit-1","page":"Data Formats","title":"Circuit","text":"","category":"section"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"The default connection to the transmission system is modeled as an ideal voltage source in OpenDSS; we chosen to model the trunk connection as a loosely bounded generator at a reference bus which is connected to the distribution network via a branch in order to model the inherent impedance of the voltage source.","category":"page"},{"location":"data-formats/#Lines-1","page":"Data Formats","title":"Lines","text":"","category":"section"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Although Lines and Linecodes are supported, the more generic LineGeometry is not yet supported.","category":"page"},{"location":"data-formats/#Transformers-1","page":"Data Formats","title":"Transformers","text":"","category":"section"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Unfortunately, in the OpenDSS format, multi-phase transformers with different taps for each phase are not explicitly supported, so to work around this limitation multiple single phase transformers should be defined, which are then \"banked\" together using the bank property.","category":"page"},{"location":"data-formats/#Capacitors-and-Reactors-1","page":"Data Formats","title":"Capacitors and Reactors","text":"","category":"section"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"Capacitors and reactors are supported as shunts, although shunts to ground via delta connections are not yet supported. Furthermore, generic reactors are not supported, only those whose second terminal is wye connected to ground (default for unspecified second terminal). Reactors are also supported as a resistanceless line if their second terminal is connected, but only for topological continuity of the network.","category":"page"},{"location":"data-formats/#Matlab-1","page":"Data Formats","title":"Matlab","text":"","category":"section"},{"location":"data-formats/#","page":"Data Formats","title":"Data Formats","text":"We also include a matlab-base format similar in conception to Matpower. This format is in development and details will come later.","category":"page"},{"location":"library/#PowerModelsDistribution.jl-Library-1","page":"Modeling Components","title":"PowerModelsDistribution.jl Library","text":"","category":"section"},{"location":"library/#","page":"Modeling Components","title":"Modeling Components","text":"Modules = [PowerModelsDistribution]","category":"page"},{"location":"library/#PowerModelsDistribution.AbstractConicUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractConicUBFModel","text":"\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractLPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractLPUBFModel","text":"Abstract form for linear unbalanced power flow models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractNLPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractNLPUBFModel","text":"\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.DSSSourceId","page":"Modeling Components","title":"PowerModelsDistribution.DSSSourceId","text":"Structure representing OpenDSS dss_source_id giving the type of the component dss_type, its name dss_name, and the active phases active_phases\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.LPUBFDiagModel","page":"Modeling Components","title":"PowerModelsDistribution.LPUBFDiagModel","text":"LinDist3Flow per Sankur et al 2016, using vector variables for power, voltage and current\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.LPUBFDiagPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.LPUBFDiagPowerModel","text":"default LP unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFKCLMXModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFKCLMXModel","text":"SDP BFM with KCL as matrix equation, Geth 2020 (under review)\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFKCLMXPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFKCLMXPowerModel","text":"default SDP unbalanced DistFlow with matrix KCL constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFModel","text":"SDP BFM per Gan and Low 2014, PSCC\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFPowerModel","text":"default SDP unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCConicUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCConicUBFModel","text":"SOC relaxation of SDPUBFModel per Kim, Kojima, & Yamashita 2003, cast as a SOC\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCConicUBFPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCConicUBFPowerModel","text":"default SOC unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCNLPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCNLPUBFModel","text":"SOC relaxation of SDPUBFModel per Kim, Kojima, & Yamashita 2003, cast as an QCP\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCNLPUBFPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCNLPUBFPowerModel","text":"default SOC unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.build_mc_mld-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld","text":"Load shedding problem including storage (snap-shot)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld_bf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld_bf","text":"Load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld_uc-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld_uc","text":"Standard unit commitment (!relaxed) load shedding problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_bf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_bf_lm-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_bf_lm","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_iv-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_iv","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_oltc-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_oltc","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_pbs-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_pbs","text":"OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf_bf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf_iv-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf_iv","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf_pbs-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf_pbs","text":"PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calculate_tm_scale-Tuple{Dict{String,Any},Dict{String,Any},Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution.calculate_tm_scale","text":"Calculates the tap scale factor for the non-dimensionalized equations.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_M_psd-Tuple{JuMP.Model,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_M_psd","text":"For rectangular coordinates of a complex matrix M=Mre+im*Mim, this function applies constraints equivalent to requiring that M itself is PSD.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_SWL_psd-Tuple{JuMP.Model,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_SWL_psd","text":"Take a multi-conductor voltage variable V and a current variable I. The associated power is then defined as S = VI^H Define the lifted variables as W and L as W = VV^H, L = I*I^H Then, it is equally valid that [W S; S^H L] ∈ PSDCone, rank([W S; S^H L])=1 This function adds this PSD constraint for the rectangular coordinates of S, W and L.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_active_gen_setpoint-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_active_gen_setpoint","text":"pg[i] == pg\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_active_gen_setpoint-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_active_gen_setpoint","text":"generator active power setpoint constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{PowerModels.AbstractACPModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"bus voltage on/off constraint for load shed problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{PowerModels.AbstractDCPModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off bus voltage constraint for DCP formulation, nothing to do\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off constraint for bus voltages\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off bus voltage constraint for relaxed forms\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_balance_load-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_balance_load","text":"Kirchhoff's current law applied to buses sum(cr + im*ci) = 0\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_balance_load-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_balance_load","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_from-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_from","text":"Defines how current distributes over series and shunt impedances of a pi-model branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_from-Tuple{PowerModels.AbstractIVRModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_from","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_limit-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_limit-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_limit","text":"Bounds the current magnitude at both from and to side of a branch cr[f_idx]^2 + ci[f_idx]^2 <= c_rating^2 cr[t_idx]^2 + ci[t_idx]^2 <= c_rating^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_to-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_to","text":"Defines how current distributes over series and shunt impedances of a pi-model branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_to-Tuple{PowerModels.AbstractIVRModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_to","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_flow_losses-Tuple{LPUBFDiagModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_flow_losses","text":"Defines branch flow model power flow equations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_flow_losses-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_flow_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_flow_losses-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_flow_losses","text":"Defines branch flow model power flow equations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation-Tuple{PowerModels.AbstractActivePowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation","text":"Only support wye-connected generators.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation","text":"DELTA When connected in delta, the load power gives the reference in the delta reference frame. This means sd1 = vab.conj(iab) = (va-vb).conj(iab) We can relate this to the per-phase power by sna = va.conj(ia)     = va.conj(iab-ica)     = va.conj(conj(sab/vab) - conj(sca/vca))     = va.(sab/(va-vb) - sca/(vc-va)) So for delta, sn is constrained indirectly.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation-Tuple{SDPUBFKCLMXModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation","text":"Link the current and power withdrawn by a generator at the bus through a PSD constraint. The rank-1 constraint is dropped in this formulation.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation","text":"Only KCLModels need to further constrain the generator variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_active_power_limits-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_active_power_limits","text":"pmin <= Re(v*cg') <= pmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_active_power_limits-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_active_power_limits","text":"defines limits on active power output of a generator where bounds can't be used\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_delta-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Int64,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_delta-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Int64,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_delta-Tuple{PowerModels.IVRPowerModel,Int64,Int64,Int64,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_on_off-Tuple{PowerModels.AbstractActivePowerModel,Int64,Int64,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_on_off","text":"on/off constraint for generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_on_off-Tuple{PowerModels.AbstractPowerModel,Int64,Int64,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_on_off","text":"on/off constraint for generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_reactive_power_limits-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_reactive_power_limits","text":"qmin <= Im(v*cg') <= qmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_reactive_power_limits-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_reactive_power_limits","text":"defines limits on reactive power output of a generator where bounds can't be used\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_wye-Tuple{PowerModels.AbstractPowerModel,Int64,Int64,Int64,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generation_wye-Tuple{PowerModels.IVRPowerModel,Int64,Int64,Int64,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generation_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load-Tuple{PowerModels.AbstractActivePowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load","text":"Only support wye-connected, constant-power loads.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load","text":"CONSTANT POWER Fixes the load power sd. sd = [sd1, sd2, sd3] What is actually fixed, depends on whether the load is connected in delta or wye. When connected in wye, the load power equals the per-phase power sn drawn at the bus to which the load is connected. sd1 = va.conj(ia) = sn_a\n\nCONSTANT CURRENT Sets the active and reactive load power sd to be proportional to the the voltage magnitude. pd = cp.|vm| qd = cq.|vm| sd = cp.|vm| + j.cq.|vm|\n\nCONSTANT IMPEDANCE Sets the active and reactive power drawn by the load to be proportional to the square of the voltage magnitude. pd = cp.|vm|^2 qd = cq.|vm|^2 sd = cp.|vm|^2 + j.cq.|vm|^2\n\nDELTA When connected in delta, the load power gives the reference in the delta reference frame. This means sd1 = vab.conj(iab) = (va-vb).conj(iab) We can relate this to the per-phase power by sna = va.conj(ia)     = va.conj(iab-ica)     = va.conj(conj(sab/vab) - conj(sca/vca))     = va.(sab/(va-vb) - sca/(vc-va)) So for delta, sn is constrained indirectly.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load-Tuple{SDPUBFKCLMXModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load","text":"Creates the constraints modelling the (relaxed) voltage-dependent loads for the matrix KCL formulation.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load","text":"Creates the constraints modelling the (relaxed) voltage-dependent loads.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_current_delta-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Int64,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_current_delta","text":"We want to express sab = cp.|vab|+im.cq.|vab| iab = conj(sab/vab) = |vab|.(cq-im.cq)/conj(vab) = (1/|vab|).(cp-im.cq)*vab idem for ibc and ica And then sa = va.conj(ia) = va.conj(iab-ica) idem for sb and sc\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_delta-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Int64,Array{#s45,1} where #s45<:Real,Array{#s44,1} where #s44<:Real,Array{#s43,1} where #s43<:Real,Array{#s42,1} where #s42<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_delta-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Int64,Array{#s45,1} where #s45<:Real,Array{#s44,1} where #s44<:Real,Array{#s43,1} where #s43<:Real,Array{#s42,1} where #s42<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_delta-Tuple{PowerModels.IVRPowerModel,Int64,Int64,Int64,Array{#s45,1} where #s45<:Real,Array{#s44,1} where #s44<:Real,Array{#s43,1} where #s43<:Real,Array{#s42,1} where #s42<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_wye-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Int64,Array{#s184,1} where #s184<:Real,Array{#s48,1} where #s48<:Real,Array{#s47,1} where #s47<:Real,Array{#s46,1} where #s46<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_wye-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Int64,Array{#s184,1} where #s184<:Real,Array{#s48,1} where #s48<:Real,Array{#s47,1} where #s47<:Real,Array{#s46,1} where #s46<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_wye-Tuple{PowerModels.IVRPowerModel,Int64,Int64,Int64,Array{#s184,1} where #s184<:Real,Array{#s48,1} where #s48<:Real,Array{#s47,1} where #s47<:Real,Array{#s46,1} where #s46<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{AbstractLPUBFModel,Int64,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{SDPUBFModel,Int64,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{SOCConicUBFModel,Int64,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{Union{SOCConicUBFModel, SOCNLPUBFModel},Int64,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{PowerModels.AbstractDCPModel,Int64,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"nothing to do, these models do not have complex voltage constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"do nothing by default\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{LPUBFDiagModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"Defines voltage drop over a branch, linking from and to side voltage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"Defines voltage drop over a branch, linking from and to side voltage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{PowerModels.AbstractACPModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np_fr ==     g[c,c] * vm_fr[c]^2 +\n            sum( g[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) +\n                 b[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in _PMs.conductor_ids(pm) if d != c) +\n            sum(-g[c,d]*vm_fr[c]*vm_to[d]*cos(va_fr[c]-va_to[d]) +\n                -b[c,d]*vm_fr[c]*vm_to[d]*sin(va_fr[c]-va_to[d]) for d in _PMs.conductor_ids(pm))\n            + g_fr[c,c] * vm_fr[c]^2 +\n            sum( g_fr[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) +\n                 b_fr[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in _PMs.conductor_ids(pm) if d != c)\n            )\nq_fr == -b[c,c] *vm_fr[c]^2 -\n            sum( b[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) -\n                 g[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in _PMs.conductor_ids(pm) if d != c) -\n            sum(-b[c,d]*vm_fr[c]*vm_to[d]*cos(va_fr[c]-va_to[d]) +\n                 g[c,d]*vm_fr[c]*vm_to[d]*sin(va_fr[c]-va_to[d]) for d in _PMs.conductor_ids(pm))\n            -b_fr[c,c] *vm_fr[c]^2 -\n            sum( b_fr[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) -\n                 g_fr[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in _PMs.conductor_ids(pm) if d != c)\n            )\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{PowerModels.AbstractACRModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints\n\nsfr = vfr.conj(Y(vfr-vto)) sfr = (vrfr+imvi_fr).(G-imB)([vrfr-vrto]-im[vifr-vito]) sfr = (vrfr+imvifr).([Gvrfr-Gvr_to-Bvifr+B*vito]-im[Gvifr-G*vito+Bvr_fr-Bvr_to])\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{PowerModels.AbstractDCPModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[f_idx] == -b*(t[f_bus] - t[t_bus])\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{PowerModels.AbstractNFAModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"nothing to do, no voltage angle variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"ohms constraint for branches on the from-side\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"delegate back to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{PowerModels.AbstractACPModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{PowerModels.AbstractACRModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{PowerModels.AbstractNFAModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"nothing to do, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"ohms constraint for branches on the to-side\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"delegate back to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{Union{PowerModels.AbstractNFAModel, PowerModels.DCMPPowerModel, DCPPowerModel},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Do nothing, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_oltc_tap_fix-Tuple{PowerModels.AbstractPowerModel,Int64,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_oltc_tap_fix","text":"For a variable tap transformer, fix the tap variables which are fixed. For example, an OLTC where the third phase is fixed, will have tap variables for all phases, but the third tap variable should be fixed.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{LPUBFDiagModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"KCL including transformer arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{SDPUBFKCLMXModel,Int64,Int64,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"Shunt handling in matrix form: I = Y.U S = U.I' = U.(Y.U)' = U.U'.Y' = W.Y'   = (Wr+j.Wi)(G+jB)' = (Wr+j.Wi)(G'-j.B') = (Wr.G'+Wi.B')+j(-Wr.B'+Wi.G') P =  Wr.G'+Wi.B' Q = -Wr.B'+Wi.G'\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{SDPUBFKCLMXModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"For KCLMXModels, a new power balance constraint is required.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_load-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_load","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_load-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_load","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_load-Tuple{PowerModels.AbstractActivePowerModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_load","text":"power balanace constraint with line shunts and transformers, active power only\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_load-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_load","text":"KCL including transformer arcs and load variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_load-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_load","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{PowerModels.AbstractDCPModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"power balance constraint with line shunts and transformers for load shed problem, DCP formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"KCL for load shed problem with transformers\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"KCL for load shed problem with transformers (AbstractWForms)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_reactive_gen_setpoint-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_reactive_gen_setpoint","text":"qq[i] == qq\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{PowerModels.AbstractACPModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_loss-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_loss","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_loss-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_loss","text":"storage loss constraints, delegate to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{PowerModels.AbstractPowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"-rate_a <= p[f_idx] <= rate_a\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"p[f_idx]^2 + q[f_idx]^2 <= rate_a^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{PowerModels.AbstractPowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"branch thermal constraints from\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from_ne-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from_ne","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from_on_off-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"p[t_idx]^2 + q[t_idx]^2 <= rate_a^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{PowerModels.AbstractPowerModel,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"branch thermal constraints to\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to_ne-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to_ne","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to_on_off-Tuple{PowerModels.AbstractActivePowerModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{LPUBFDiagModel,Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"balanced three-phase phasor\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"Creates phase angle constraints at reference buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{PowerModels.AbstractNFAModel,Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"nothing to do, no voltage angle variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"reference angle constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{Union{PowerModels.AbstractACPModel, PowerModels.AbstractACTModel, PowerModels.AbstractDCPModel, PowerModels.AbstractLPACModel},Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"Creates phase angle constraints at reference buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"do nothing, no way to represent this in these variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_trans-Tuple{PowerModels.AbstractNFAModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_trans","text":"nothing to do, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_trans-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_trans","text":"Transformer constraints, considering winding type, conductor order, polarity and tap settings.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_trans_yy-Tuple{LPUBFDiagModel,Int64,Int64,Int64,Int64,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_trans_yy","text":"nothing to do, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_vm_ll-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Array{T,1} where T,Array{T,1} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_vm_ll","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_vm_neg_seq-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_vm_neg_seq","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_vm_pos_seq-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_vm_pos_seq","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_vm_vuf-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_vm_vuf","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_vm_zero_seq-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_vm_zero_seq","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{PowerModels.AbstractBFModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"This is duplicated at PMD level to correctly handle the indexing of the shunts.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"Bounds the voltage angle difference between bus pairs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{PowerModels.AbstractNFAModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"nothing to do, these models do not have angle difference constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"This is duplicated at PMD level to correctly handle the indexing of the shunts.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_balance-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_balance","text":"Impose all balance related constraints for which key present in data model of bus. For a discussion of sequence components and voltage unbalance factor (VUF), see @INPROCEEDINGS{girigoudarmolzahnroald-2019, \tauthor={K. Girigoudar and D. K. Molzahn and L. A. Roald}, \tbooktitle={submitted}, \ttitle={{Analytical and Empirical Comparisons of Voltage Unbalance Definitions}}, \tyear={2019}, \tmonth={},     url={https://molzahn.github.io/pubs/girigoudarmolzahnroald-2019.pdf} }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_drop-Tuple{PowerModels.AbstractIVRModel,Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_drop","text":"Defines voltage drop over a branch, linking from and to side complex voltage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_drop-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_drop","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{PowerModels.AbstractACRModel,Int64,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"vmin <= vm[i] <= vmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"This constraint captures problem agnostic constraints that define limits for voltage magnitudes (where variable bounds cannot be used) Notable examples include IVRPowerModel and ACRPowerModel\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_on_off-Tuple{PowerModels.AbstractPowerModel,Int64,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_on_off","text":"on/off bus voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_on_off-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_on_off","text":"on/off voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint-Tuple{PowerModels.AbstractACPModel,Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint-Tuple{PowerModels.AbstractACRModel,Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint","text":"voltage magnitude setpoint constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint-Tuple{Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel},Int64,Int64,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_setpoint","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_sqr_on_off-Tuple{PowerModels.AbstractPowerModel,Int64,Int64,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_sqr_on_off","text":"on/off bus voltage magnitude squared constraint for relaxed formulations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_sqr_on_off-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_sqr_on_off","text":"on/off voltage magnitude squared constraint for relaxed formulations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_pqw-Tuple{JuMP.Model,Any,Any,Real,Real,Real,Real,Real,Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_pqw","text":"Creates the constraints modelling the (relaxed) voltage-dependency of the power consumed in each phase, s=p+jq. This is completely symmetrical for p and q, with appropriate substitutions of the variables and parameters: p->q, a->b, alpha->beta, pmin->qmin, pmax->qmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_network_data!-Tuple{Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution.correct_network_data!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.count_nodes-Tuple{Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution.count_nodes","text":"Counts number of nodes in network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.count_nodes-Tuple{Dict{String,Array}}","page":"Modeling Components","title":"PowerModelsDistribution.count_nodes","text":"Counts number of nodes in network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.find_bus-Tuple{AbstractString,Dict}","page":"Modeling Components","title":"PowerModelsDistribution.find_bus","text":"find_bus(busname, pmd_data)\n\nFinds the index number of the bus in existing data from the given busname.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.find_component-Tuple{Dict,AbstractString,AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution.find_component","text":"find_component(pmd_data, name, compType)\n\nReturns the component of compType with name from data of type Dict{String,Array}.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.make_multiconductor!-Tuple{Dict{String,#s45} where #s45,Int64}","page":"Modeling Components","title":"PowerModelsDistribution.make_multiconductor!","text":"Transforms single-conductor network data into multi-conductor data\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_max_loadability-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_max_loadability","text":"maximum loadability objective (continuous load shed) with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_load_delta-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_load_delta","text":"minimum load delta objective (continuous load shed) with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_min_bus_power_slack-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_min_bus_power_slack","text":"a quadratic penalty for bus power slack variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_variable_pg_cost-Tuple{PowerModels.AbstractIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_variable_pg_cost","text":"adds pg_cost variables and constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_dss-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution.parse_dss","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_dss-Tuple{IOStream}","page":"Modeling Components","title":"PowerModelsDistribution.parse_dss","text":"parse_dss(filename)\n\nParses a OpenDSS file given by filename into a Dict{Array{Dict}}. Only supports components and options, but not commands, e.g. \"plot\" or \"solve\". Will also parse files defined inside of the originating DSS file via the \"compile\", \"redirect\" or \"buscoords\" commands.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_dss_with_dtypes!","page":"Modeling Components","title":"PowerModelsDistribution.parse_dss_with_dtypes!","text":"parse_dss_with_dtypes!(dss_data, toParse)\n\nParses the data in keys defined by toParse in dss_data using types given by the default properties from the get_prop_default function.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution.parse_file-Tuple{IO}","page":"Modeling Components","title":"PowerModelsDistribution.parse_file","text":"parse_file(io)\n\nParses the IOStream of a file into a Three-Phase PowerModels data structure.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_file-Tuple{String}","page":"Modeling Components","title":"PowerModelsDistribution.parse_file","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_json-Tuple{IO}","page":"Modeling Components","title":"PowerModelsDistribution.parse_json","text":"Parses json from iostream or string\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_json-Tuple{String}","page":"Modeling Components","title":"PowerModelsDistribution.parse_json","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_opendss-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution.parse_opendss","text":"Parses a Dict resulting from the parsing of a DSS file into a PowerModels usable format\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_opendss-Tuple{IOStream}","page":"Modeling Components","title":"PowerModelsDistribution.parse_opendss","text":"Parses a DSS file into a PowerModels usable format\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_options-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution.parse_options","text":"parse_options(options)\n\nParses options defined with the set command in OpenDSS.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.ref_add_arcs_trans!-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.ref_add_arcs_trans!","text":"Adds arcs for PMD transformers; for dclines and branches this is done in PMs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_psd_real-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_psd_real","text":"For debugging / exploration: real-valued SDP to SDP relaxation based on PSDness of principal minors, default is 3x3 SDP relaxation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc","text":"See section 4.3 for complex to real PSD constraint transformation: @article{Fazel2001, author = {Fazel, M. and Hindi, H. and Boyd, S.P.}, title = {{A rank minimization heuristic with application to minimum order system approximation}}, doi = {10.1109/ACC.2001.945730}, journal = {Proc. American Control Conf.}, number = {2}, pages = {4734–4739}, url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=945730}, volume = {6}, year = {2001} }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_complex-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_complex","text":"SDP to SOC relaxation of type 2, applied to complex-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_complex_conic-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_complex_conic","text":"SDP to SOC relaxation of type 2, applied to complex-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_conic-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_conic","text":"See section 4.3 for complex to real PSD constraint transformation: @article{Fazel2001, author = {Fazel, M. and Hindi, H. and Boyd, S.P.}, title = {{A rank minimization heuristic with application to minimum order system approximation}}, doi = {10.1109/ACC.2001.945730}, journal = {Proc. American Control Conf.}, number = {2}, pages = {4734–4739}, url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=945730}, volume = {6}, year = {2001} }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_real-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_real","text":"SDP to SOC relaxation of type 2, applied to real-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_real_conic-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_real_conic","text":"SDP to SOC relaxation of type 2, applied to real-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_ac_mc_opf-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_ac_mc_opf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_ac_mc_opf_oltc-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_ac_mc_opf_oltc","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_ac_mc_pf-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_ac_mc_pf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_dc_mc_pf-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_dc_mc_pf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld","text":"Run load shedding problem with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld_bf-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld_bf","text":"Run Branch Flow Model Load Shedding Problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld_bf-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld_uc-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld_uc","text":"Run unit commitment load shedding problem (!relaxed)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld_uc-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld_uc","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_bf-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_bf-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_bf_lm-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_bf_lm","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_bf_lm-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_bf_lm","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_iv-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_iv","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_iv-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_iv","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_oltc-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_oltc","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_oltc-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_oltc","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_pbs-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_pbs","text":"OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_pbs-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_pbs","text":"OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_bf-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_bf-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_bf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_iv-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_iv","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_iv-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_iv","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_pbs-Tuple{Dict{String,Any},Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_pbs","text":"PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_pbs-Tuple{String,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_pbs","text":"PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_active_bus_power_slack-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_active_bus_power_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractLPUBFModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current-Tuple{PowerModels.AbstractIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current_imaginary-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current_imaginary","text":"variable: ci[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current_real-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current_real","text":"variable: cr[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow-Tuple{LPUBFDiagModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow","text":"branch flow variables, delegated back to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow_active-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow_active","text":"variable: p[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow_active-Tuple{Union{PowerModels.AbstractNFAModel, PowerModels.DCMPPowerModel, DCPPowerModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow_active","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow_ne_reactive-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow_ne_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow_reactive-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow_reactive-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow_reactive","text":"variable: q[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_series_current_imaginary-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_series_current_imaginary","text":"variable: csi[l] for l in branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_series_current_prod_hermitian-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_series_current_prod_hermitian","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_series_current_real-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_series_current_real","text":"variable: csr[l] for l in branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_power_slack-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_power_slack","text":"generates variables for both active and reactive slack at each bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{LPUBFDiagModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"Create voltage variables for branch flow model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{PowerModels.AbstractACPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{PowerModels.AbstractDCPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation-Tuple{PowerModels.AbstractIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation","text":"create variables for generators, delegate to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation-Tuple{SDPUBFKCLMXModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation","text":"For the matrix KCL formulation, the generator needs an explicit current and power variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation_current","text":"For the matrix KCL formulation, the generator needs an explicit current variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation_current_imaginary-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation_current_imaginary","text":"variable: cig[j] for j in gen\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation_current_real-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation_current_real","text":"variable: crg[j] for j in gen\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation_power-Tuple{SDPUBFKCLMXModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation_power","text":"For the matrix KCL formulation, the generator needs an explicit power variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generation_reactive-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generation_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_indicator_bus_voltage-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_indicator_bus_voltage","text":"Create variables for bus status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_indicator_demand-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_indicator_demand","text":"Create variables for demand status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_indicator_generation-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_indicator_generation","text":"Create variables for generator status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_indicator_shunt-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_indicator_shunt","text":"Create variables for shunt status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_indicator_storage-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_indicator_storage","text":"Create variables for storage status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load-Tuple{PowerModels.AbstractIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load","text":"Create a dictionary with values of type Any for the load. Depending on the load model, this can be a parameter or a NLexpression. These will be inserted into KCL.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load-Tuple{SDPUBFKCLMXModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load","text":"The variable creation for the loads is rather complicated because Expressions are used wherever possible instead of explicit variables. All loads need a current variable; for wye loads, this variable will be in the wye reference frame whilst for delta currents it will be in the delta reference frame. All loads need variables for the off-diagonals of the nodal power variables. In some cases, the diagonals elements can be created as Expressions. Delta loads only need a current variable and auxilary power variable (X), and all other load model variables are then linear transformations of these (linear Expressions).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load","text":"The variable creation for the loads is rather complicated because Expressions are used wherever possible instead of explicit variables. Delta loads always need a current variable and auxilary power variable (X), and all other load model variables are then linear transformations of these (linear Expressions). Wye loads however, don't need any variables when the load is modelled as constant power or constant impedance. In all other cases (e.g. when a cone is used to constrain the power), variables need to be created.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Array{Int64,1}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_current","text":"All loads need a current variable; for wye loads, this variable will be in the wye reference frame whilst for delta currents it will be in the delta reference frame.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_delta_aux-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Array{Int64,1}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_delta_aux","text":"Creates power matrix variable X for delta windings; this defines both the wye-side power Sy and the delta-side power Sd through the lin. transformations Sy = X.Td, Sd = Td.X with Td=[1 -1 0; 0 1 -1; -1 0 1]\n\nSee the paper by Zhao et al. for the first convex relaxation of delta transformations. @INPROCEEDINGS{zhaooptimal2017, \tauthor={C. Zhao, E. Dall'Anese and S. Low}, \tbooktitle={IREP 2017 Bulk Power Systems Dynamics and Control Symposium}, \ttitle={{Optimal Power Flow in Multiphase Radial Networks with Delta Connections}}, \tyear={2017}, \tmonth={},     url={https://www.nrel.gov/docs/fy18osti/67852.pdf} }\n\nSee upcoming paper for discussion of bounds. [reference added when accepted]\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel},Array{Int64,1}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power","text":"These variables reflect the power consumed by the load, NOT the power injected into the bus nodes; these variables only coincide for wye-connected loads with a grounded neutral.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power_bus-Tuple{SDPUBFKCLMXModel,Array{Int64,1}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power_bus","text":"The bus qualifier denotes that this is the power withdrawn at the bus; Only for grounded wye-connected loads, this is the same as the power consumed by the multi-phase load. The off-diagonals only need to be created for the matrix KCL formulation.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_oltc_tap-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_oltc_tap","text":"Create tap variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_on_off_storage-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_on_off_storage","text":"Create variables for active and reactive storage injection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_on_off_storage_active-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_on_off_storage_active","text":"Create variables for active storage injection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_on_off_storage_reactive-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_on_off_storage_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_on_off_storage_reactive-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_on_off_storage_reactive","text":"Create variables for reactive storage injection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_reactive_bus_power_slack-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_reactive_bus_power_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_reactive_generation_on_off-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_reactive_generation_on_off","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage","text":"variables for modeling storage units, includes grid injection and internal variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_reactive-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_current-Tuple{PowerModels.AbstractIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_current_imaginary-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_current_imaginary","text":"variable: ci[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_current_real-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_current_real","text":"variable: cr[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_flow-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_flow","text":"Creates variables for both active and reactive power flow at each transformer.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_flow_active-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_flow_active","text":"Create variables for the active power flowing into all transformer windings.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_flow_active-Tuple{Union{PowerModels.AbstractNFAModel, PowerModels.DCMPPowerModel, DCPPowerModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_flow_active","text":"Create variables for the active power flowing into all transformer windings\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_flow_reactive-Tuple{PowerModels.AbstractActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_flow_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_flow_reactive-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_flow_reactive","text":"Create variables for the reactive power flowing into all transformer windings.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage-Tuple{PowerModels.AbstractACPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage-Tuple{PowerModels.AbstractACRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage-Tuple{PowerModels.AbstractDCPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage-Tuple{PowerModels.AbstractIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage-Tuple{PowerModels.AbstractNFAModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage","text":"nothing to do, these models do not have complex voltage variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_angle-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_angle","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_imaginary-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_magnitude-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_magnitude","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_magnitude_on_off-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_magnitude_on_off","text":"on/off voltage magnitude variable\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_magnitude_sqr-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_magnitude_sqr","text":"variable: w[i] >= 0 for i in `buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_magnitude_sqr_on_off-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_magnitude_sqr_on_off","text":"voltage variable magnitude squared (relaxed form)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_prod_hermitian-Tuple{LPUBFDiagModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_prod_hermitian","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_prod_hermitian-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_prod_hermitian","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_voltage_real-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_voltage_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_complex-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64,Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_complex","text":"Shorthand to create two real matrix variables, where the first is the real part and the second the imaginary part. If the name argument is a String, it will be suffixed with 're' and  'im'. It is possible to  specify the names of the real and imaginary part directly as a Tuple as well (to achieve P and Q instead of Sre and Sim for example).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_complex_with_diag-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_complex_with_diag","text":"Same as variablemxcomplex, but square and the diagonal of the matrix variables consists of the constants passed as the diagre and diagim argument. The diag argument is a dictionary of (index, 1d-array) pairs. Useful for power matrices with specified diagonals (constant power wye loads).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_hermitian-Union{Tuple{UB}, Tuple{LB}, Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64}} where UB<:Real where LB<:Real where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_hermitian","text":"Returns a pair of symmetric and skew-symmetric matrix variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64,Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real","text":"This function creates a set of real matrix variables of size NxM, indexed over the elements of the indices argument. The upper and lower bounds have to be specified, and are dictionaries with the indices as keys and the matrix bounds as values. The name and prefix arguments will be combined into the base_name argument for JuMP; the prefix will typically be the network number nw. Instead of sequentially creating the matrix variables, the elements of the matrices are created sequentially for all matrices at once. I.e., we loop over the elements, and not over the indices. This is needed so that the variable names printed by JuMP are in line with the current design.\n\nReturns a dictionary of (index, matrix  variable) pairs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real_skewsymmetric-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real_skewsymmetric","text":"Same as variablemxreal, but adds skew-symmetry structure.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real_symmetric-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real_symmetric","text":"Same as variablemxreal, but adds symmetry structure\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real_with_diag-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real_with_diag","text":"Same as variablemxreal, but has to be square and the diagonal of the matrix variables consists of the elements passed as the diag argument. The diag argument is a dictionary of (index, 1d-array) pairs. Useful for power matrices with specified diagonals (constant power wye loads). If not specified, the diagonal elements are set to zero.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._conductor_matrix","page":"Modeling Components","title":"PowerModelsDistribution._conductor_matrix","text":"field names that should become multi-conductor matrix not arrays\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._conductorless","page":"Modeling Components","title":"PowerModelsDistribution._conductorless","text":"field names that should not be multi-conductor values\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._constructors","page":"Modeling Components","title":"PowerModelsDistribution._constructors","text":"list of constructor functions for easy access\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._like_exclusions","page":"Modeling Components","title":"PowerModelsDistribution._like_exclusions","text":"properties that should be excluded from being overwritten during the application of like\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._add_component!-Tuple{Dict,AbstractString,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._add_component!","text":"_add_component!(dss_data, ctype_name, compDict)\n\nAdds a component of type ctype_name with properties given by compDict to the existing dss_data structure. If a component of the same type has already been added to dss_data, the new component is appeneded to the existing array of components of that type, otherwise a new array is created.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._add_property-Tuple{Dict,AbstractString,Any}","page":"Modeling Components","title":"PowerModelsDistribution._add_property","text":"_add_property(compDict, key, value)\n\nAdds a property to an existing component properties dictionary compDict given the key and value of the property. If a property of the same name already exists inside compDict, the original value is converted to an array, and the new value is appended to the end.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._add_shunt!-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._add_shunt!","text":"Helper function to add a new shunt. The shunt element is  always inserted at the internal bus of the second winding in OpenDSS. If one of the branches of the loss model connected to this bus, has zero impedance (for example, if XHL==0 or XLT==0 or R[3]==0), then this bus might be removed by rmredundantpdelements!, in which case a new shunt should be inserted at the remaining bus of the removed branch.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._adjust_base!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._adjust_base!","text":"function _adjust_base!(pmd_data)\n\nUpdates the voltage base at each bus, so that the ratios of the voltage bases across a transformer are consistent with the ratios of voltage ratings of the windings. Default behaviour is to start at the primary winding of the first transformer, and to propagate from there. Branches are updated; the impedances and addmittances are rescaled to be consistent with the new voltage bases.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._adjust_base_branch!-Tuple{Any,Int64,Float64,Float64}","page":"Modeling Components","title":"PowerModelsDistribution._adjust_base_branch!","text":"Rescales the parameters of a branch to reflect a change in voltage base\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._adjust_base_rec!-Tuple{Any,Int64,Float64,Any,Any,Any,Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._adjust_base_rec!","text":"This is the recursive code that goes with adjustbase!; adjustbase! initializes arrays and other data that is passed along in the calls to this recursive function. For very large networks, this might have to be rewritten to not rely on recursion.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._adjust_base_shunt!-Tuple{Any,Int64,Float64,Float64}","page":"Modeling Components","title":"PowerModelsDistribution._adjust_base_shunt!","text":"Rescales the parameters of a shunt to reflect a change in voltage base\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._adjust_sourcegen_bounds!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._adjust_sourcegen_bounds!","text":"_adjust_sourcegen_bounds!(pmd_data)\n\nChanges the bounds for the sourcebus generator by checking the emergamps of all of the branches attached to the sourcebus and taking the sum of non-infinite values. Defaults to Inf if all emergamps connected to sourcebus are also Inf. This method was updated to include connected transformers as well. It know has to occur after the call to InfrastructureModels.arraystodicts, so the code was adjusted to accomodate that.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_like!-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._apply_like!","text":"applies like to component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_ordered_properties-Tuple{Dict{String,Any},Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution._apply_ordered_properties","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._assign_property!-Tuple{Dict,AbstractString,AbstractString,AbstractString,Any}","page":"Modeling Components","title":"PowerModelsDistribution._assign_property!","text":"_assign_property!(dss_data, cType, cName, propName, propValue)\n\nAssigns a property with name propName and value propValue to the component of type cType named cName in dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._bank_transformers!-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._bank_transformers!","text":"Combines transformers with 'bank' keyword into a single transformer\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_ucopf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_ucopf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mn_mc_opf-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mn_mc_opf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mn_mc_opf_strg-Tuple{PowerModels.AbstractPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mn_mc_opf_strg","text":"warning: this model is not realistic or physically reasonable, it is only for test coverage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_current_max_frto-Tuple{Dict,Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_current_max_frto","text":"Returns a total (shunt+series) current magnitude bound for the from and to side of a branch. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_power_ub_frto-Tuple{Dict,Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_power_ub_frto","text":"Returns a total (shunt+series) power magnitude bound for the from and to side of a branch. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_series_current_ub-Tuple{Dict,Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_series_current_ub","text":"Returns a valid series current magnitude bound for a branch.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_bus_vm_ll_bounds-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_bus_vm_ll_bounds","text":"Returns bounds in line-to-line bounds on the voltage magnitude. If these are not part of the problem specification, then a valid upper bound is implied by the line-to-neutral bounds, but a lower bound (greater than zero) is not. Therefore, a default lower bound is then used, specified by the keyword argument vdmin_eps. The returned bounds are for the pairs 1->2, 2->3, 3->1\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_gen_current_max-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_gen_current_max","text":"Returns a current magnitude bound for the generators.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_current_magnitude_bounds-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_current_magnitude_bounds","text":"Returns magnitude bounds for the current going through the load.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_current_max-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_current_max","text":"Returns a magnitude bound for the current going through the load.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_pq_bounds-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_pq_bounds","text":"Calculates lower and upper bounds for the loads themselves (not the power withdrawn at the bus).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_vbounds-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_vbounds","text":"Returns the voltage magnitude bounds for the individual load elements in a multiphase load. These are inferred from vmin/vmax for wye loads and from calcbusvmll_bounds for delta loads.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_mc_transformer_Tvi-Tuple{PowerModels.AbstractPowerModel,Int64}","page":"Modeling Components","title":"PowerModelsDistribution._calc_mc_transformer_Tvi","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_mc_voltage_product_bounds-Tuple{PowerModels.AbstractPowerModel,Any}","page":"Modeling Components","title":"PowerModelsDistribution._calc_mc_voltage_product_bounds","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_transformer_current_max_frto-Tuple{Dict,Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_transformer_current_max_frto","text":"Returns a current magnitude bound for the from and to side of a transformer. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_transformer_power_ub_frto-Tuple{Dict,Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_transformer_power_ub_frto","text":"Returns a power magnitude bound for the from and to side of a transformer. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_load_needs_cone-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._check_load_needs_cone","text":"Returns a Bool, indicating whether the convex hull of the voltage-dependent relationship needs a cone inclusion constraint.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._correct_duplicate_components!-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._correct_duplicate_components!","text":"_correct_duplicate_components!(dss_data)\n\nFinds duplicate components in dss_data and merges up, meaning that older data (lower indices) is always overwritten by newer data (higher indices).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._create_capacitor","page":"Modeling Components","title":"PowerModelsDistribution._create_capacitor","text":"_create_capacitor(bus1, name, bus2=0; kwargs)\n\nCreates a Dict{String,Any} containing all of the expected properties for a Capacitor. If bus2 is not specified, the capacitor will be treated as a shunt. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_generator","page":"Modeling Components","title":"PowerModelsDistribution._create_generator","text":"_create_generator(bus1, name; kwargs...)\n\nCreates a Dict{String,Any} containing all of the expected properties for a Generator. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_line","page":"Modeling Components","title":"PowerModelsDistribution._create_line","text":"_create_line(bus1, bus2, name; kwargs...)\n\nCreates a Dict{String,Any} containing all of the properties for a Line. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_linecode","page":"Modeling Components","title":"PowerModelsDistribution._create_linecode","text":"_create_linecode(name; kwargs...)\n\nCreates a Dict{String,Any} containing all of the properties of a Linecode. See OpenDSS documentation for valid fields and ways to specify the different properties. DEPRECIATED: Calculation all done inside of createline() due to Rg, Xg. Merge linecode values into line kwargs values BEFORE calling createline(). This is now mainly used for parsing linecode dicts into correct data types.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_load","page":"Modeling Components","title":"PowerModelsDistribution._create_load","text":"_create_load(bus1, name; kwargs...)\n\nCreates a Dict{String,Any} containing all of the expected properties for a Load. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_loadshape","page":"Modeling Components","title":"PowerModelsDistribution._create_loadshape","text":"_create_loadshape(name; kwargs...)\n\nCreates a Dict{String,Any} containing all expected properties for a LoadShape element. See OpenDSS documentation for valid fields and ways to specify different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_pvsystem","page":"Modeling Components","title":"PowerModelsDistribution._create_pvsystem","text":"_create_pvsystem(bus1, name; kwargs...)\n\nCreates a Dict{String,Any} containing all of the expected properties for a PVSystem. See OpenDSS document https://github.com/tshort/OpenDSS/blob/master/Doc/OpenDSS%20PVSystem%20Model.doc for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_reactor","page":"Modeling Components","title":"PowerModelsDistribution._create_reactor","text":"_create_reactor(bus1, name, bus2=0; kwargs...)\n\nCreates a Dict{String,Any} containing all of the expected properties for a Reactor. If bus2 is not specified Reactor is treated like a shunt. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_sourcebus_vbranch!-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._create_sourcebus_vbranch!","text":"Creates a virtual branch between the virtual_sourcebus and sourcebus with the impedance given by circuit\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._create_storage","page":"Modeling Components","title":"PowerModelsDistribution._create_storage","text":"_create_storage(bus1, name; kwargs...)\n\nCreates a Dict{String,Any} containing all expected properties for a storage element. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_transformer","page":"Modeling Components","title":"PowerModelsDistribution._create_transformer","text":"_create_transformer(name; kwargs...)\n\nCreates a Dict{String,Any} containing all of the expected properties for a Transformer. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_vbranch!-Tuple{Any,Int64,Int64}","page":"Modeling Components","title":"PowerModelsDistribution._create_vbranch!","text":"This function adds a new branch to the data model and returns its dictionary. It is virtual in the sense that it does not correspond to a branch in the network, but is part of the decomposition of the transformer.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._create_vbus!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._create_vbus!","text":"This function adds a new bus to the data model and returns its dictionary. It is virtual in the sense that it does not correspond to a bus in the network, but is part of the decomposition of the transformer.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._create_vsource","page":"Modeling Components","title":"PowerModelsDistribution._create_vsource","text":"_create_vsource(bus1, name, bus2=0; kwargs...)\n\nCreates a Dict{String,Any} containing all of the expected properties for a Voltage Source. If bus2 is not specified, VSource will be treated like a generator. Mostly used as sourcebus which represents the circuit. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._decompose_transformers!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._decompose_transformers!","text":"function _decompose_transformers!(pmd_data)\n\nReplaces complex transformers with a composition of ideal transformers and branches which model losses. New buses (virtual, no physical meaning) are added.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._discover_buses-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._discover_buses","text":"_discover_buses(dss_data)\n\nDiscovers all of the buses (not separately defined in OpenDSS), from \"lines\".\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_branch!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_branch!","text":"_dss2pmd_branch!(pmd_data, dss_data, import_all)\n\nAdds PowerModels-style branches to pmd_data from dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_bus!","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_bus!","text":"_dss2pmd_bus!(pmd_data, dss_data)\n\nAdds PowerModels-style buses to pmd_data from dss_data.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2pmd_buscoords!-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_buscoords!","text":"Parses buscoords lon,lat into their respective buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_gen!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_gen!","text":"_dss2pmd_gen!(pmd_data, dss_data, import_all)\n\nAdds PowerModels-style generators to pmd_data from dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_load!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_load!","text":"_dss2pmd_load!(pmd_data, dss_data, import_all)\n\nAdds PowerModels-style loads to pmd_data from dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_pvsystem!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_pvsystem!","text":"_dss2pmd_pvsystem!(pmd_data, dss_data)\n\nAdds PowerModels-style pvsystems to pmd_data from dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_reactor!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_reactor!","text":"_dss2pmd_reactor!(pmd_data, dss_data, import_all)\n\nAdds PowerModels-style branch components based on DSS reactors to pmd_data from dss_data\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_shunt!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_shunt!","text":"_dss2pmd_shunt!(pmd_data, dss_data, import_all)\n\nAdds PowerModels-style shunts to pmd_data from dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_storage!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_storage!","text":"_dss2pmd_storage!(pmd_data, dss_data, import_all)\n\nAdds PowerModels-style storage to pmd_data from dss_data\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2pmd_transformer!-Tuple{Dict,Dict,Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_transformer!","text":"_dss2pmd_transformer!(pmd_data, dss_data, import_all)\n\nAdds ThreePhasePowerModels-style transformers to pmd_data from dss_data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._find_ref_buses-Tuple{PowerModels.AbstractPowerModel,Any}","page":"Modeling Components","title":"PowerModelsDistribution._find_ref_buses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_conductors_ordered-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._get_conductors_ordered","text":"_get_conductors_ordered(busname; neutral=true)\n\nReturns an ordered list of defined conductors. If ground=false, will omit any 0\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_delta_transformation_matrix-Tuple{Int64}","page":"Modeling Components","title":"PowerModelsDistribution._get_delta_transformation_matrix","text":"creates a delta transformation matrix\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_dtypes-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._get_dtypes","text":"Returns a Dict{String,Type} for the desired component comp, giving all of the expected data types\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_linecode-Tuple{Dict,AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._get_linecode","text":"returns the linecode with name id\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_prop_name-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._get_prop_name","text":"_get_prop_name(ctype)\n\nReturns the property names in order for a given component type ctype.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_array-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_array","text":"checks if data is an opendss-style array string\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_conn-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_conn","text":"checks is a string is a connection by checking the values\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_matrix-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_matrix","text":"checks if data is an opendss-style matrix string\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_rpn-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_rpn","text":"detects if expr is Reverse Polish Notation expression\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._load_expmodel_params-Tuple{Dict,Dict}","page":"Modeling Components","title":"PowerModelsDistribution._load_expmodel_params","text":"Returns the exponential load model parameters for a load. For an exponential load it simply returns certain data model properties, whilst for constantpower, constantcurrent and constant_impedance it returns the equivalent exponential model parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_full_matrix_variable-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._make_full_matrix_variable","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_hermitian_matrix_variable-Tuple{Any,Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._make_hermitian_matrix_variable","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_matrix_variable_element-Union{Tuple{T}, Tuple{JuMP.Model,Array{T,1},Int64,Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution._make_matrix_variable_element","text":"Sometimes we want to bound only a subset of the elements of a matrix variable. For example, an unbounded Hermitian variable usually still has a lower bound of zero on the real diagonal elements. When there is a mix of bounded and unbounded elements, the unboundedness is encoded as 'Inf' and '-Inf' in the bound parameters. This cannot be passed directlty to JuMP, because it would lead to an error in Mosek for example. Instead, this method checks whether all bounds for an element (n,m) are Inf, and if so, does not pass a bound to JuMP.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_multiconductor!-Tuple{Dict{String,#s37} where #s37,Real}","page":"Modeling Components","title":"PowerModelsDistribution._make_multiconductor!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._mat2ltrivec!-Union{Tuple{Union{Array{T,2}, LinearAlgebra.Symmetric{T,S} where S<:(AbstractArray{#s627,2} where #s627<:T)}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._mat2ltrivec!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._mat2utrivec!-Union{Tuple{Union{Array{T,2}, LinearAlgebra.Symmetric{T,S} where S<:(AbstractArray{#s627,2} where #s627<:T)}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._mat2utrivec!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._merge_dss!-Tuple{Dict{String,Array},Dict{String,Array}}","page":"Modeling Components","title":"PowerModelsDistribution._merge_dss!","text":"_merge_dss!(dss_prime, dss_to_add)\n\nMerges two (partially) parsed OpenDSS files to the same dictionary dss_prime. Used in cases where files are referenced via the \"compile\" or \"redirect\" OpenDSS commands inside the originating file.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_array","page":"Modeling Components","title":"PowerModelsDistribution._parse_array","text":"parse matrices according to active nodes\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._parse_array-Tuple{Type,AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_array","text":"_parse_array(dtype, data)\n\nParses a OpenDSS style array string data into a one dimensional array of type dtype. Array strings are capped by either brackets, single quotes, or double quotes, and elements are separated by spaces.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_binary-Tuple{AbstractString,Type}","page":"Modeling Components","title":"PowerModelsDistribution._parse_binary","text":"parses sng and dbl precision loadshape binary files\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_buscoords-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_buscoords","text":"_parse_buscoords(file)\n\nParses a Bus Coordinate file, in either \"dat\" or \"csv\" formats, where in \"dat\", columns are separated by spaces, and in \"csv\" by commas. File expected to contain \"bus,x,y\" on each line.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_busname-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_busname","text":"_parse_busname(busname)\n\nParses busnames as defined in OpenDSS, e.g. \"primary.1.2.3.0\".\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_component","page":"Modeling Components","title":"PowerModelsDistribution._parse_component","text":"_parse_component(component, properies, compDict=Dict{String,Any}())\n\nParses a component with properties into a compDict. If compDict is not defined, an empty dictionary will be used. Assumes that unnamed properties are given in order, but named properties can be given anywhere.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._parse_conn-Tuple{String}","page":"Modeling Components","title":"PowerModelsDistribution._parse_conn","text":"parses connection \"conn\" specification reducing to wye or delta\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_dss_source_id-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._parse_dss_source_id","text":"Parses a component's OpenDSS source information into the dss_source_id struct\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_element_with_dtype-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._parse_element_with_dtype","text":"parses the raw dss values into their expected data types\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_line","page":"Modeling Components","title":"PowerModelsDistribution._parse_line","text":"_parse_line(elements, curCompDict=Dict{String,Any}())\n\nParses an already separated line given by elements (an array) of an OpenDSS file into curCompDict. If not defined, curCompDict is an empty dictionary.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._parse_loadshape!-Tuple{Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution._parse_loadshape!","text":"parses loadshape component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_loadshape_csv-Tuple{AbstractString,AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_loadshape_csv","text":"parses single column load profile files\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_loadshape_file-Tuple{AbstractString,AbstractString,Union{Nothing, Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._parse_loadshape_file","text":"parses csv or binary loadshape files\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_matrix-Tuple{Type,AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_matrix","text":"_parse_matrix(dtype, data)\n\nParses a OpenDSS style triangular matrix string data into a two dimensional array of type dtype. Matrix strings are capped by either parenthesis or brackets, rows are separated by \"|\", and columns are separated by spaces.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_matrix-Union{Tuple{T}, Tuple{Array{T,N} where N,Array{Bool,N} where N}, Tuple{Array{T,N} where N,Array{Bool,N} where N,Int64}, Tuple{Array{T,N} where N,Array{Bool,N} where N,Int64,Any}} where T","page":"Modeling Components","title":"PowerModelsDistribution._parse_matrix","text":"parse matrices according to active nodes\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_mult-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_mult","text":"parses pmult and qmult entries on loadshapes\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_properties-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_properties","text":"_parse_properties(properties)\n\nParses a string of properties of a component type, character by character into an array with each element containing (if present) the property name, \"=\", and the property value.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_rpn","page":"Modeling Components","title":"PowerModelsDistribution._parse_rpn","text":"parses Reverse Polish Notation expr\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._push_dict_ret_key!-Tuple{Dict{String,Any},Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution._push_dict_ret_key!","text":"This function appends a component to a component dictionary of a pmd data model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._reorder_matrix-Tuple{Any,Any}","page":"Modeling Components","title":"PowerModelsDistribution._reorder_matrix","text":"Reorders a matrix based on the order that phases are listed in on the from- (pof) and to-sides (pot)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._replace_nan-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._replace_nan","text":"Replaces NaN values with zeros\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rm_redundant_pd_elements!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._rm_redundant_pd_elements!","text":"This function removes zero impedance branches. Only for transformer loss model! Branches with zero impedances are deleted, and one of the buses it connects. For now, the implementation should only be used on the loss model of transformers. When deleting buses, references at shunts, loads... should be updated accordingly. In the current implementation, that is only done for shunts. The other elements, such as loads, do not appear in the transformer loss model.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._roll-Union{Tuple{T}, Tuple{Array{T,1},Int64}} where T<:Number","page":"Modeling Components","title":"PowerModelsDistribution._roll","text":"rolls a 1d array left or right by idx\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._run_mc_ucopf-Tuple{Any,Type,Any}","page":"Modeling Components","title":"PowerModelsDistribution._run_mc_ucopf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._run_mn_mc_opf-Tuple{Any,Type,Any}","page":"Modeling Components","title":"PowerModelsDistribution._run_mn_mc_opf","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._run_mn_mc_opf_strg-Tuple{Any,Type,Any}","page":"Modeling Components","title":"PowerModelsDistribution._run_mn_mc_opf_strg","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._sc2br_impedance-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._sc2br_impedance","text":"Converts a set of short-circuit tests to an equivalent reactance network. Reference: R. C. Dugan, “A perspective on transformer modeling for distribution system analysis,” in 2003 IEEE Power Engineering Society General Meeting (IEEE Cat. No.03CH37491), 2003, vol. 1, pp. 114-119 Vol. 1.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._sqr-Tuple{Float64}","page":"Modeling Components","title":"PowerModelsDistribution._sqr","text":"Squares x, for parsing Reverse Polish Notation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._strip_comments-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._strip_comments","text":"Strips comments, defined by \"!\" from the ends of lines\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._strip_lines-Tuple{Array}","page":"Modeling Components","title":"PowerModelsDistribution._strip_lines","text":"strips lines that are either commented (block or single) or empty\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._to_sym_keys-Tuple{Dict{String,Any}}","page":"Modeling Components","title":"PowerModelsDistribution._to_sym_keys","text":"converts Dict{String,Any} to Dict{Symbol,Any} for passing as kwargs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._vec2ltri!-Union{Tuple{Array{T,1}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._vec2ltri!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._vec2utri!-Union{Tuple{Array{T,1}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._vec2utri!","text":"https://stackoverflow.com/questions/39039553/lower-triangular-matrix-in-julia\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._where_is_comp-Tuple{Array,AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._where_is_comp","text":"_where_is_comp(data, comp_id)\n\nFinds existing component of id comp_id in array of data and returns index. Assumes all components in data are unique.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._wrap_to_180-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._wrap_to_180","text":"wraps angles in degrees to 180\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._wrap_to_pi-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._wrap_to_pi","text":"wraps angles in radians to pi\n\n\n\n\n\n","category":"method"},{"location":"developer/#Developer-Documentation-1","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"math-model/#The-PowerModelsDistribution-Mathematical-Model-1","page":"Mathematical Model","title":"The PowerModelsDistribution Mathematical Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"As PowerModelsDistribution implements a variety of power network optimization problems, the implementation is the best reference for precise mathematical formulations.  This section provides a complex number based mathematical specification for a prototypical unbalanced AC Optimal Power Flow problem, to provide an overview of the typical mathematical models in PowerModelsDistribution.","category":"page"},{"location":"math-model/#Unbalanced-AC-Optimal-Power-Flow-1","page":"Mathematical Model","title":"Unbalanced AC Optimal Power Flow","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"PowerModelsDistribution implements a  generalized version of the AC Optimal Power Flow problem, from Matpower but extended to take into account phase unbalance [1].  These generalizations make it possible for PowerModelsDistribution to more accurately capture real-world distribution network datasets.  The core generalizations are,","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"Support for multiple load and shunt components on each bus\nLine charging (shunt) that supports a conductance and asymmetrical values","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"In the mathematical description below,","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"Bold typeface indicates a vector (in mathbbC^c) or matrix (in mathbbC^ctimes c)\nOperator diag takes the diagonal (vector) from a square matrix\nThe set of complex numbers is mathbbC and real numbers is mathbbR\nSuperscript H indicates complex conjugate transpose (Hermitian adjoint)\nNote that complex power is defined as mathbfS_ij = mathbfV_i mathbfI_ij^H and is therefore a complex matrix of dimension c times c\nThe line mathbfY^c_ij mathbfY^c_ji and bus mathbfY^s_k shunt matrices do not need to be diagonal","category":"page"},{"location":"math-model/#Sets-1","page":"Mathematical Model","title":"Sets","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"The definitions of the sets involved remain unchanged w.r.t. the balanced OPF problem definition, except for the addition of the conductor set:","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n\nmboxsets  nonumber \n N mbox - busesnonumber \n R mbox - references busesnonumber \n E E^R mbox - branches forward and reverse orientation nonumber \n G G_i mbox - generators and generators at bus i nonumber \n L L_i mbox - loads and loads at bus i nonumber \n S S_i mbox - shunts and shunts at bus i nonumber \n C mbox - conductors nonumber \n\nendalign","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where the set of conductors C typically equals  abc.","category":"page"},{"location":"math-model/#Data-1","page":"Mathematical Model","title":"Data","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nmboxdata  nonumber \n S^gl_kc S^gu_kc in mathbbC  forall k in G forall c in C nonumber mathbfS^gl_k= S^gl_kc_c in C mathbfS^gu_k = S^gu_kc_c in C  \n c_2k c_1k c_0k in mathbbR  forall k in G nonumber \n v^l_ic v^u_ic in mathbbR  forall i in N forall c in C nonumber mathbfv^l_i = v^l_ic_c in C mathbfv^u_i = v^u_ic_c in C \n S^d_kcin mathbbC  forall k in L forall c in C nonumber mathbfS^d_k = S^d_kc_c in C \n mathbfY^s_kin mathbbC^ctimes c  forall k in S nonumber \n mathbfY_ij mathbfY^c_ij mathbfY^c_jiin mathbbC^ctimes c  forall (ij) in E nonumber \n s^u_ijc theta^Delta l_ijc theta^Delta u_ijc in mathbbR forall (ij) in E forall c in C nonumber mathbfs^u_ij = s^u_ijc_c in C \n V^textref_ic  in mathbbC  forall r in R  mathbfV^textref_i =  V^textref_ic_c in C \n\nendalign","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where the notation mathbfv^l_i = v^l_ic_c in C reflects that the vector mathbfv^l_i is constructed by putting the individual phase values v^l_ic in a vector (in order abc).","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"Alternatively, the series impedance of a line can be written in impedance form:","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"mathbfZ_ij in mathbbC^ctimes c  forall (ij) in E nonumber mathbfY_ij = ( mathbfZ_ij)^-1","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where superscript -1 indicates the matrix inverse. Note that mathbfY_ij or mathbfZ_ij may not be invertible, e.g. in case of single-phase branches in a three-phase grid. In this case the pseudo-inverse can be used.","category":"page"},{"location":"math-model/#Variables-for-a-Bus-Injection-Model-1","page":"Mathematical Model","title":"Variables for a Bus Injection Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n S^g_kc  in mathbbC  forall kin G forall c in C nonumber mathbfS^g_k = S^g_kc_c in C \n V_ic  in mathbbC  forall iin N forall c in C nonumber mathbfV_i = V_ic_c in C \n mathbfS_ij  in mathbbC^ctimes c  forall (ij) in E cup E^R \n\nendalign","category":"page"},{"location":"math-model/#Mathematical-Formulation-of-a-Bus-Injection-Model-1","page":"Mathematical Model","title":"Mathematical Formulation of a Bus Injection Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"A complete mathematical model is as follows,","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"\nbeginalign\nmboxminimize   sum_k in G c_2k left( sum_c in C Re(S^g_kc) right)^2 + c_1k  sum_c in C Re(S^g_kc) + c_0k \n\nmboxsubject to   nonumber \n mathbfV_i = mathbfV^textref_i    forall r in R \n S^gl_kc leq S^g_kc leq S^gu_kc  forall k in G forall c in C  \n v^l_ic leq V_ic leq v^u_ic  forall i in N forall c in C \n sum_substackk in G_i mathbfS^g_k - sum_substackk in L_i mathbfS^d_k - sum_substackk in S_i  mathbfV_i mathbfV^H_i (mathbfY^s_k)^H = sum_substack(ij)in E_i cup E_i^R diag(mathbfS_ij)  forall iin N \n mathbfS_ij =  mathbfV_i mathbfV_i^H left( mathbfY_ij + mathbfY^c_ijright)^H - mathbfV_i mathbfV^H_j mathbfY^H_ij   forall (ij)in E \n mathbfS_ji = mathbfV_j mathbfV_j^H left( mathbfY_ij + mathbfY^c_ji right)^H - mathbfV^H_i mathbfV_j mathbfY^H_ij  forall (ij)in E \n diag(mathbfS_ij) leq mathbfs^u_ij  forall (ij) in E cup E^R \n theta^Delta l_ijc leq angle (V_ic V^*_jc) leq theta^Delta u_ijc  forall (ij) in E forall c in C\n\nendalign","category":"page"},{"location":"math-model/#Variables-for-a-Branch-Flow-Model-1","page":"Mathematical Model","title":"Variables for a Branch Flow Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n S^g_kc  in mathbbC forall kin G forall c in C nonumber mathbfS^g_k = S^g_kc_c in C \n V_ic in mathbbC  forall iin N forall c in C nonumber mathbfV_i = V_ic_c in C \n I^s_ijc  in mathbbC forall e in E forall c in C nonumber mathbfI^s_ij = I^s_ijc_c in C \n mathbfS_ij  in mathbbC^ctimes c  forall (ij) in E cup E^R \n\nendalign","category":"page"},{"location":"math-model/#Mathematical-Formulation-of-a-Branch-Flow-Model-1","page":"Mathematical Model","title":"Mathematical Formulation of a Branch Flow Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"A complete mathematical model is as follows,","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nmboxminimize   sum_k in G c_2k left( sum_c in C Re(S^g_kc) right)^2 + c_1k  sum_c in C Re(S^g_kc) + c_0k \n\nmboxsubject to   nonumber \n mathbfV_i = mathbfV^textref_i    forall r in R \n S^gl_kc leq S^g_kc leq S^gu_kc  forall k in G forall c in C  \n v^l_ic leq V_ic leq v^u_ic  forall i in N forall c in C \n sum_substackk in G_i mathbfS^g_k - sum_substackk in L_i mathbfS^d_k - sum_substackk in S_i  mathbfV_i mathbfV^H_i (mathbfY^s_k)^H = sum_substack(ij)in E_i cup E_i^R diag(mathbfS_ij)  forall iin N \n mathbfS_ij + mathbfS_ji =  mathbfV_i mathbfV_i^H (mathbfY^c_ij)^H + mathbfZ_ij mathbfI^s_ij(mathbfI^s_ij)^H + mathbfV_j mathbfV_j^H (mathbfY^c_ji)^H   forall (ij)in E \n mathbfS^s_ij = mathbfS_ij + mathbfV_i mathbfV_i^H (mathbfY^c_ij)^H   forall (ij) in E cup E^R \n mathbfS^s_ij = mathbfV_i (mathbfI^s_ij)^H   forall (ij) in E cup E^R\n mathbfV_i = mathbfV_j - mathbfZ_ij mathbfI^s_ij forall (ij)in E \n diag(mathbfS_ij) leq mathbfs^u_ij  forall (ij) in E cup E^R \n theta^Delta l_ijc leq angle (V_ic V^*_jc) leq theta^Delta u_ijc  forall (ij) in E forall c in C\n\nendalign","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"[1] Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. https://doi.org/10.1109/PSCC.2014.7038399","category":"page"},{"location":"specifications/#Problem-Specifications-1","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications/#Optimal-Power-Flow-(OPF)-with-On-Load-Tap-Changers-(OLTC)-1","page":"Problem Specifications","title":"Optimal Power Flow (OPF) with On-Load Tap Changers (OLTC)","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"This problem is identical to mc_opf, except that all transformers are now modelled as on-load tap changers (OLTCs). Each phase has an individual tap ratio, which can be either variable or fixed, as specified in the data model.","category":"page"},{"location":"specifications/#Objective-1","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_fuel_cost(pm)","category":"page"},{"location":"specifications/#Variables-1","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_mc_voltage(pm)\nvariable_mc_branch_flow(pm)\n\nfor c in PMs.conductor_ids(pm)\n    PMs.variable_generation(pm, cnd=c)\n    PMs.variable_dcline_flow(pm, cnd=c)\nend\nvariable_mc_transformer_flow(pm)\nvariable_mc_oltc_tap(pm)","category":"page"},{"location":"specifications/#Constraints-1","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"constraint_mc_model_voltage(pm)\n\nfor i in PMs.ids(pm, :ref_buses)\n    constraint_mc_theta_ref(pm, i)\nend\n\nfor i in PMs.ids(pm, :bus), c in PMs.conductor_ids(pm)\n    constraint_mc_power_balance(pm, i, cnd=c)\nend\n\nfor i in PMs.ids(pm, :branch)\n    constraint_mc_ohms_yt_from(pm, i)\n    constraint_mc_ohms_yt_to(pm, i)\n\n    for c in PMs.conductor_ids(pm)\n        PMs.constraint_voltage_angle_difference(pm, i, cnd=c)\n\n        PMs.constraint_thermal_limit_from(pm, i, cnd=c)\n        PMs.constraint_thermal_limit_to(pm, i, cnd=c)\n    end\nend\n\nfor i in PMs.ids(pm, :dcline), c in PMs.conductor_ids(pm)\n    PMs.constraint_dcline(pm, i, cnd=c)\nend\n\nfor i in PMs.ids(pm, :transformer)\n    constraint_mc_oltc(pm, i)\nend","category":"page"},{"location":"specifications/#Optimal-Power-Flow-(OPF)-with-Load-Models-(LM)-1","page":"Problem Specifications","title":"Optimal Power Flow (OPF) with Load Models (LM)","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"Unlike mc_opf, which models all loads as constant power loads, this problem specification additionally supports loads proportional to the voltage magnitude (a.k.a. constant current) and the square of the voltage magnitude (a.k.a. constant impedance). Each load now has associated active and reactive power variables. In mc_opf, loads are directly added as parameters in KCL.","category":"page"},{"location":"specifications/#Objective-2","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_fuel_cost(pm)","category":"page"},{"location":"specifications/#Variables-2","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_mc_voltage(pm)\nvariable_mc_branch_flow(pm)\n\nfor c in PMs.conductor_ids(pm)\n    PMs.variable_generation(pm, cnd=c)\n    PMs.variable_dcline_flow(pm, cnd=c)\nend\nvariable_mc_transformer_flow(pm)\nvariable_mc_oltc_tap(pm)","category":"page"},{"location":"specifications/#Constraints-2","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"constraint_mc_model_voltage(pm)\n\nfor i in PMs.ids(pm, :ref_buses)\n    constraint_mc_theta_ref(pm, i)\nend\n\nfor i in PMs.ids(pm, :bus)\n    constraint_mc_power_balance_load(pm, i)\nend\n\nfor id in PMs.ids(pm, :load)\n    model = PMs.ref(pm, pm.cnw, :load, id, \"model\")\n    if model==\"constant_power\"\n        constraint_mc_load_power_setpoint(pm, id)\n    elseif model==\"proportional_vm\"\n        constraint_mc_load_power_prop_vm(pm, id)\n    elseif model==\"proportional_vmsqr\"\n        constraint_mc_load_power_prop_vmsqr(pm, id)\n    else\n        Memento.@error(LOGGER, \"Unknown model $model for load $id.\")\n    end\nend\n\nfor i in PMs.ids(pm, :branch)\n    constraint_mc_ohms_yt_from(pm, i)\n    constraint_mc_ohms_yt_to(pm, i)\n\n    for c in PMs.conductor_ids(pm)\n        PMs.constraint_voltage_angle_difference(pm, i, cnd=c)\n\n        PMs.constraint_thermal_limit_from(pm, i, cnd=c)\n        PMs.constraint_thermal_limit_to(pm, i, cnd=c)\n    end\nend\n\nfor i in PMs.ids(pm, :dcline), c in PMs.conductor_ids(pm)\n    PMs.constraint_dcline(pm, i, cnd=c)\nend\n\nfor i in PMs.ids(pm, :transformer)\n    constraint_mc_transformer(pm, i)\nend","category":"page"},{"location":"specifications/#Power-Flow-(PF)-with-Load-Models-(LM)-1","page":"Problem Specifications","title":"Power Flow (PF) with Load Models (LM)","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"Unlike mc_pf, which models all loads as constant power loads, this problem specification additionally supports loads proportional to the voltage magnitude (a.k.a. constant current) and the square of the voltage magnitude (a.k.a. constant impedance). Each load now has associated active and reactive power variables. In mc_pf, loads are directly added as parameters in KCL.","category":"page"},{"location":"specifications/#Variables-3","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_mc_voltage(pm, bounded=false)\nvariable_mc_branch_flow(pm, bounded=false)\nvariable_mc_transformer_flow(pm, bounded=false)\nvariable_mc_load(pm)\n\nfor c in PMs.conductor_ids(pm)\n    PMs.variable_generation(pm, bounded=false, cnd=c)\n    PMs.variable_dcline_flow(pm, bounded=false, cnd=c)\nend","category":"page"},{"location":"specifications/#Constraints-3","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"constraint_mc_model_voltage(pm, bounded=false)\n\nfor (i,bus) in PMs.ref(pm, :ref_buses)\n    constraint_mc_theta_ref(pm, i)\n\n    for c in PMs.conductor_ids(pm)\n        @assert bus[\"bus_type\"] == 3\n        PMs.constraint_voltage_magnitude_setpoint(pm, i, cnd=c)\n    end\nend\n\nfor (i,bus) in PMs.ref(pm, :bus)\n    constraint_mc_power_balance_load(pm, i)\n\n    for c in PM.conductor_ids(pm)\n        # PV Bus Constraints\n        if length(PMs.ref(pm, :bus_gens, i)) > 0 && !(i in PMs.ids(pm,:ref_buses))\n            # this assumes inactive generators are filtered out of bus_gens\n            @assert bus[\"bus_type\"] == 2\n\n            PMs.constraint_voltage_magnitude_setpoint(pm, i, cnd=c)\n            for j in PMs.ref(pm, :bus_gens, i)\n                PMs.constraint_active_gen_setpoint(pm, j, cnd=c)\n            end\n        end\n    end\nend\n\nfor id in PMs.ids(pm, :load)\n    model = PMs.ref(pm, pm.cnw, :load, id, \"model\")\n    if model==\"constant_power\"\n        constraint_mc_load_power_setpoint(pm, id)\n    elseif model==\"proportional_vm\"\n        constraint_mc_load_power_prop_vm(pm, id)\n    elseif model==\"proportional_vmsqr\"\n        constraint_mc_load_power_prop_vmsqr(pm, id)\n    else\n        Memento.@error(LOGGER, \"Unknown model $model for load $id.\")\n    end\nend\n\nfor i in PMs.ids(pm, :branch)\n    constraint_mc_ohms_yt_from(pm, i)\n    constraint_mc_ohms_yt_to(pm, i)\nend\n\nfor (i,dcline) in PMs.ref(pm, :dcline), c in PMs.conductor_ids(pm)\n    PMs.constraint_active_dcline_setpoint(pm, i, cnd=c)\n\n    f_bus = PMs.ref(pm, :bus)[dcline[\"f_bus\"]]\n    if f_bus[\"bus_type\"] == 1\n        PMs.constraint_voltage_magnitude_setpoint(pm, f_bus[\"index\"], cnd=c)\n    end\n\n    t_bus = PMs.ref(pm, :bus)[dcline[\"t_bus\"]]\n    if t_bus[\"bus_type\"] == 1\n        PMs.constraint_voltage_magnitude_setpoint(pm, t_bus[\"index\"], cnd=c)\n    end\nend\n\nfor i in PMs.ids(pm, :transformer)\n    constraint_mc_transformer(pm, i)\nend","category":"page"},{"location":"specifications/#Minimal-Load-Delta-(MLD)-Problem-Specification-1","page":"Problem Specifications","title":"Minimal Load Delta (MLD) Problem Specification","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"Load shed (continuous) problem. See \"Relaxations of AC Maximal Load Delivery for Severe Contingency Analysis\" by C. Coffrin et al. (DOI: 10.1109/TPWRS.2018.2876507) for single-phase case.","category":"page"},{"location":"specifications/#Variables-4","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxvariables   nonumber \n z^v_i in 01  forall i in N mbox - bus voltage onoff variable \n z^g_i in 01  forall i in G mbox - generator onoff variable \n z^b_i in 01  forall i in Bmbox - storage onoff variable \n z^d_i in (01)  forall i in L mbox - continuous load shedding variable \n z^s_i in (01)  forall i in H mbox - continuous shunt shedding variable\nendalign","category":"page"},{"location":"specifications/#Objective-3","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxminimize left (\nsum_substackiin Ncin C10 left (1-z^v_i right ) + sum_substackiin Lcin C10 omega_icleft Releft (S^d_iright )right left ( 1-z^d_i right )  + sum_substackiin Hcin Cleft  Releft (S^s_i right )right  left (1-z^s_i right )  + sum_substackiin Gcin CDelta^g_i  + sum_substackiin Bcin CDelta^b_i right )\nendalign","category":"page"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"where","category":"page"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nDelta^g_i = left Releft (S^g_i(0) right ) - Releft (S^g_i right ) right  \nDelta^g_i = -left Releft (S^g_i(0) right ) - Releft (S^g_i right ) right  \nDelta^b_i = left Releft (S^b_i(0) right ) - Releft (S^b_i right ) right  \nDelta^b_i = -left Releft (S^b_i(0) right ) - Releft (S^b_i right ) right \nendalign","category":"page"},{"location":"specifications/#Constraints-4","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxsubject to   nonumber \n z^v_i v^l_ic leq left  V_ic right  leq z_i^v v^u_ic  forall i in Nforall c in C \n z^g_i S^gl_ic leq S^g_ic leq z^g_i S^gu_ic  forall i in Gforall c in C \n sum_substackkin G_icin C S^g_kc - sum_substackkin L_icin C z^d_k S^d_kc- sum_substackkin H_icin C z^s_k Y^s_kcleft  V_ic right ^2 nonumber \n = sum_substack(ij)in E_icup E_i^Rcin C S_ijc forall i in N\nendalign","category":"page"},{"location":"load-model/#Load-Models-1","page":"Load Models","title":"Load Models","text":"","category":"section"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"S^d=S^d_1S^d_n^T","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"is a column vector ntimes 1, specifying for each individual load how much power is consumed. By definition, this is","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"S^d=U^dodot left(I^dright)^*","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"where U^d is the voltage applied across each individual load and I^d is the current drawn by each load. At the same time, the composed load is connected to a bus with voltage U^textbus, and draws a current I^textbus and power S^textbus. How these quantities relate to each other, depends on how the load is connected.","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"(S^d U^d I^d)  (S^textbus U^textbus I^textbus)","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"In the implementations, these variables are referred to as","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"beginalign\nS^d=textpd+jtextqd  S^textbus=textpd_bus+jtextqd_bus\nI^d=textcrd+jtextcid  I^textbus=textcrd_bus+jtextcid_bus\nU^d=textvrd+jtextvid  U^textbus=textvr+jtextvi\nendalign","category":"page"},{"location":"load-model/#Voltage-dependency-1","page":"Load Models","title":"Voltage dependency","text":"","category":"section"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"The general, exponential load model is defined as P^d_i = P^d0_i left(fracV^d_iV^d0_iright)^alpha_i = a_i left(V^d_iright)^alpha_i Q^d_i = Q^d0_i left(fracV^d_iV^d0_iright)^beta_i = b_i left(V^d_iright)^beta_i","category":"page"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"This might seem overly complicated, but occurs in distribution network data due to experimental model fitting of loads. There are a few cases which get a special name: constant power (alpha=beta=0), constant current (alpha=beta=1), and constant impedance (alpha=beta=2).","category":"page"},{"location":"load-model/#Wye-connected-Loads-1","page":"Load Models","title":"Wye-connected Loads","text":"","category":"section"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"A wye-connected load connects between a set of phases mathcalP and a neutral conductor n. The voltage as seen by each individual load is then U^d = U^textbus_mathcalP-U^textbus_n whilst the current I^textbus_mathcalP = I^textdI^textbus_n=-1^TI^d We now develop the expression for the power drawn at the bus for the phase conductors $   S^\\text{bus}\\mathcal{P} = (U^d+U^\\text{bus}n)\\odot(I^d)^*       = S^d+U^\\text{bus}n S^d\\oslash U^d. $ From conservation of power or simply the formulas above, $     S^\\text{bus}n = -1^TS^\\text{bus}_\\mathcal{P}+1^TS^d. $","category":"page"},{"location":"load-model/#Grounded-neutral-1","page":"Load Models","title":"Grounded neutral","text":"","category":"section"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"Note that when the neutral is grounded, i.e. U^textbus_n=0, these formulas simplify to S^textbus_mathcalP=S^dS^textbus_n=0 which is why in Kron-reduced unbalanced networks, you can directly insert the power consumed by the loads, in the nodal power balance equations.","category":"page"},{"location":"load-model/#Delta-connected-Loads-1","page":"Load Models","title":"Delta-connected Loads","text":"","category":"section"},{"location":"load-model/#","page":"Load Models","title":"Load Models","text":"Firstly, define the three-phase delta transformation matrix M^Delta_3 = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix which can be extended to more phases in a straight-forward manner. Now, U^d = M^Delta U^textbus I^textbus = left(M^Deltaright)^T I^d We can related S^textbus to U^textbus and I^d $ S^\\text{bus} = U^\\text{bus}\\odot \\left(I^\\text{bus}\\right)^*              = U^\\text{bus}\\odot \\left(M^\\Delta\\right)^T\\left(I^d\\right)^, $ and using the fact that \\left(I^d\\right)^=S^d \\oslash U^d and the expression above for U^d, $ S^\\text{bus} = U^\\text{bus}\\left(M^\\Delta\\right)^T S^d \\oslash M^\\Delta U^\\text{bus} $","category":"page"},{"location":"formulation-details/#Three-phase-formulation-details-1","page":"Formulation Details","title":"Three-phase formulation details","text":"","category":"section"},{"location":"formulation-details/#AbstractACPModel-1","page":"Formulation Details","title":"AbstractACPModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Real-valued formulation from:","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Formulation without shunts: Mahdad, B., Bouktir, T., & Srairi, K. (2006). A three-phase power flow modelization: a tool for optimal location and control of FACTS devices in unbalanced power systems. In IEEE Industrial Electronics IECON (pp. 2238–2243).","category":"page"},{"location":"formulation-details/#AbstractDCPModel-1","page":"Formulation Details","title":"AbstractDCPModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Applying all of the standard DC linearization tricks to the AbstractACPModel","category":"page"},{"location":"formulation-details/#SOCWRModel-1","page":"Formulation Details","title":"SOCWRModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Applying the standard BIM voltage cross-product (sine and cosine) substitution tricks to AbstractACPModel results immediately in a SOC formulation.","category":"page"},{"location":"formulation-details/#SDPUBFModel-1","page":"Formulation Details","title":"SDPUBFModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"The BFM SDP relaxation as described in:","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. https://doi.org/10.1109/PSCC.2014.7038399","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Note that this formulation is complex-valued and additional steps are needed to implement this in JuMP.","category":"page"},{"location":"formulation-details/#SOCNLPUBFModel-1","page":"Formulation Details","title":"SOCNLPUBFModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"The starting point is SDPUBFModel. The SDP constraint can be relaxed to a set of SOC constraints, starting from either the real or complex form of the matrix on which the PSD-ness constraint is applied.","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Kim, S., Kojima, M., & Yamashita, M. (2003). Second order cone programming relaxation of a positive semidefinite constraint. Optimization Methods and Software, 18(5), 535–541. https://doi.org/10.1080/1055678031000148696\nAndersen, M. S., Hansson, A., & Vandenberghe, L. (2014). Reduced-complexity semidefinite relaxations of optimal power flow problems. IEEE Trans. Power Syst., 29(4), 1855–1863.","category":"page"},{"location":"formulation-details/#SOCConicUBFModel-1","page":"Formulation Details","title":"SOCConicUBFModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"See SOCNLPUBFModel","category":"page"},{"location":"formulation-details/#LPUBFFullModel-1","page":"Formulation Details","title":"LPUBFFullModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Matrix formulation that generalizes simplified DistFlow equations, as introduced in :","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. https://doi.org/10.1109/PSCC.2014.7038399","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Note that this formulation is complex-valued and additional steps are needed to implement this in JuMP.","category":"page"},{"location":"formulation-details/#LPUBFDiagModel-1","page":"Formulation Details","title":"LPUBFDiagModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"This formulation has originally been developed by Sankur et al.","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Sankur, M. D., Dobbe, R., Stewart, E., Callaway, D. S., & Arnold, D. B. (2016). A linearized power flow model for optimization in unbalanced distribution systems. https://arxiv.org/abs/1606.04492v2","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"This formulation is here cast as only considering the diagonal elements defined in LPUBFFullModel, which furthermore leads to the imaginary part of the lifted node voltage variable W being redundant and substituted out.","category":"page"},{"location":"formulation-details/#LPLinUBFModel-1","page":"Formulation Details","title":"LPLinUBFModel","text":"","category":"section"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Scalar reformulation of:","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"Sankur, M. D., Dobbe, R., Stewart, E., Callaway, D. S., & Arnold, D. B. (2016). A linearized power flow model for optimization in unbalanced distribution systems. https://arxiv.org/abs/1606.04492v2","category":"page"},{"location":"formulation-details/#","page":"Formulation Details","title":"Formulation Details","text":"This formulation was already derived in real variables and parameters.","category":"page"},{"location":"#PowerModelsDistribution.jl-Documentation-1","page":"Home","title":"PowerModelsDistribution.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = PowerModelsDistribution","category":"page"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"PowerModelsDistribution.jl is a Julia/JuMP extension package to PowerModels.jl for modeling of Multi-Phase (with a focus on three-phase) power grids.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.add(\"PowerModelsDistribution\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.checkout(\"PowerModelsDistribution\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"At least one solver is required for running PowerModelsDistribution.  The open-source solver Ipopt is recommended, as it is extremely fast, and can be used to solve a wide variety of the problems and network formulations provided in PowerModelsDistribution.  The Ipopt solver can be installed via the package manager with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.add(\"Ipopt\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.test(\"PowerModelsDistribution\")","category":"page"}]
}
