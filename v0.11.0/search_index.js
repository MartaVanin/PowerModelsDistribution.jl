var documenterSearchIndex = {"docs":
[{"location":"connections/#Connecting-Components","page":"Connecting Components","title":"Connecting Components","text":"","category":"section"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"One of the main goals of a network model, is specifying how constituent components are connected together. The patterns explained here, are equally applicable to the engineering and mathematical data model.","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"The available connections of each component connect to bus terminals. Take for example a bus with four terminals, terminals=[\"a\",\"b\",\"c\",\"n\"].","category":"page"},{"location":"connections/#Node-objects","page":"Connecting Components","title":"Node objects","text":"","category":"section"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"Node objects always connect to a single bus (and perhaps also the universal ground, as can be the case for shunts). Therefore, they always have at least two key fields controlling the connectivity: bus and connections. Most node objects also have a configuration field, which affects the interpretation of the values supplied in connections. We will illustrate this for loads below.","category":"page"},{"location":"connections/#Loads","page":"Connecting Components","title":"Loads","text":"","category":"section"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"A multi-phase load consists of several individual loads, the number of which is implied by the length of properties such as pd_nom, qd_nom etc. The table below illustrates how the length of the field connections and the value of the field configuration determines the layout of the load.","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"connections configuration==WYE configuration==DELTA\n2 (Image: 2 connections, wye) (Image: 2 connections, delta)\n3 (Image: 3 connections, wye) (Image: 3 connections, delta)\n4 (Image: 4 connections, wye) undefined","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"For example, we wish to connect a wye-connected load consisting of 2 individual loads (|connections|=3 and configuration=WYE) to our example bus with four available terminals. If we specify connections=[\"a\",\"c\",\"n\"], this leads to","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"(Image: loads connection example).","category":"page"},{"location":"connections/#Edge-objects","page":"Connecting Components","title":"Edge objects","text":"","category":"section"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"Edge objects connect two buses (except for generic transformers, which can connect N buses). Therefore, they have the fields","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"f_bus and f_connections, specifying the from-side bus and how the object connects to it;\nt_bus and t_connections, specifying the same for the to-side.","category":"page"},{"location":"connections/#Lines","page":"Connecting Components","title":"Lines","text":"","category":"section"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"A line can have a variable number of conductors, which is implied by the size of the fields rs, xs, g_fr, b_fr, g_to and b_to. The fields f_connections and t_connections should specify for each conductor, to which terminals it connects. The figure below illustrates this for a line with 2 conuctors,","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"(Image: line connection example).","category":"page"},{"location":"connections/#Transformers","page":"Connecting Components","title":"Transformers","text":"","category":"section"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"Transformers also have a configuration field. For","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"generic transformers, this is specified per winding, and configuration is therefore a vector of ConnConfig enums (WYE or DELTA);\nAL2W transformers however are always two-winding, and the secondary is always wye-connected. Therefore, configuration is a scalar, specifying the configuration of the from-side winding.","category":"page"},{"location":"connections/","page":"Connecting Components","title":"Connecting Components","text":"Generic transformers have a field buses, a Vector containing the buses to which each winding connects respectively (these do not have to be unique; a split-phase transformer is typically represented by having two windings connect to the same bus). The AL2W transformer however, since it is always two-winding, follows the f_connections/t_connections pattern.","category":"page"},{"location":"math-model/#The-PowerModelsDistribution-Mathematical-Model","page":"Mathematical Model","title":"The PowerModelsDistribution Mathematical Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"As PowerModelsDistribution implements a variety of power network optimization problems, the implementation is the best reference for precise mathematical formulations.  This section provides a complex number based mathematical specification for a prototypical unbalanced AC Optimal Power Flow problem, to provide an overview of the typical mathematical models in PowerModelsDistribution.","category":"page"},{"location":"math-model/#Unbalanced-AC-Optimal-Power-Flow","page":"Mathematical Model","title":"Unbalanced AC Optimal Power Flow","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"PowerModelsDistribution implements a generalized version of the AC Optimal Power Flow problem, from Matpower but extended to take into account phase unbalance [1].  These generalizations make it possible for PowerModelsDistribution to more accurately capture real-world distribution network datasets.  The core generalizations are,","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Support for multiple load and shunt components on each bus\nLine charging (shunt) that supports a conductance and asymmetrical values","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"In the mathematical description below,","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Bold typeface indicates a vector (in mathbbC^c) or matrix (in mathbbC^ctimes c)\nOperator diag takes the diagonal (vector) from a square matrix\nThe set of complex numbers is mathbbC and real numbers is mathbbR\nSuperscript H indicates complex conjugate transpose (Hermitian adjoint)\nNote that complex power is defined as mathbfS_ij = mathbfV_i mathbfI_ij^H and is therefore a complex matrix of dimension c times c\nThe line mathbfY^c_ij mathbfY^c_ji and bus mathbfY^s_k shunt matrices do not need to be diagonal","category":"page"},{"location":"math-model/#Sets","page":"Mathematical Model","title":"Sets","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"The definitions of the sets involved remain unchanged w.r.t. the balanced OPF problem definition, except for the addition of the conductor set:","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n\nmboxsets  nonumber \n N mbox - busesnonumber \n R mbox - references busesnonumber \n E E^R mbox - branches forward and reverse orientation nonumber \n G G_i mbox - generators and generators at bus i nonumber \n L L_i mbox - loads and loads at bus i nonumber \n S S_i mbox - shunts and shunts at bus i nonumber \n C mbox - conductors nonumber \n\nendalign","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where the set of conductors C typically equals  abc.","category":"page"},{"location":"math-model/#Data","page":"Mathematical Model","title":"Data","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nmboxdata  nonumber \n S^gl_kc S^gu_kc in mathbbC  forall k in G forall c in C nonumber mathbfS^gl_k= S^gl_kc_c in C mathbfS^gu_k = S^gu_kc_c in C  \n c_2k c_1k c_0k in mathbbR  forall k in G nonumber \n v^l_ic v^u_ic in mathbbR  forall i in N forall c in C nonumber mathbfv^l_i = v^l_ic_c in C mathbfv^u_i = v^u_ic_c in C \n S^d_kcin mathbbC  forall k in L forall c in C nonumber mathbfS^d_k = S^d_kc_c in C \n mathbfY^s_kin mathbbC^ctimes c  forall k in S nonumber \n mathbfY_ij mathbfY^c_ij mathbfY^c_jiin mathbbC^ctimes c  forall (ij) in E nonumber \n s^u_ijc theta^Delta l_ijc theta^Delta u_ijc in mathbbR forall (ij) in E forall c in C nonumber mathbfs^u_ij = s^u_ijc_c in C \n V^textref_ic  in mathbbC  forall r in R  mathbfV^textref_i =  V^textref_ic_c in C \n\nendalign","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where the notation mathbfv^l_i = v^l_ic_c in C reflects that the vector mathbfv^l_i is constructed by putting the individual phase values v^l_ic in a vector (in order abc).","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Alternatively, the series impedance of a line can be written in impedance form:","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"mathbfZ_ij in mathbbC^ctimes c  forall (ij) in E nonumber mathbfY_ij = ( mathbfZ_ij)^-1","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where superscript -1 indicates the matrix inverse. Note that mathbfY_ij or mathbfZ_ij may not be invertible, e.g. in case of single-phase branches in a three-phase grid. In this case the pseudo-inverse can be used.","category":"page"},{"location":"math-model/#Variables-for-a-Bus-Injection-Model","page":"Mathematical Model","title":"Variables for a Bus Injection Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n S^g_kc  in mathbbC  forall kin G forall c in C nonumber mathbfS^g_k = S^g_kc_c in C \n V_ic  in mathbbC  forall iin N forall c in C nonumber mathbfV_i = V_ic_c in C \n mathbfS_ij  in mathbbC^ctimes c  forall (ij) in E cup E^R \n\nendalign","category":"page"},{"location":"math-model/#Mathematical-Formulation-of-a-Bus-Injection-Model","page":"Mathematical Model","title":"Mathematical Formulation of a Bus Injection Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"A complete mathematical model is as follows,","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"\nbeginalign\nmboxminimize   sum_k in G c_2k left( sum_c in C Re(S^g_kc) right)^2 + c_1k  sum_c in C Re(S^g_kc) + c_0k \n\nmboxsubject to   nonumber \n mathbfV_i = mathbfV^textref_i    forall r in R \n S^gl_kc leq S^g_kc leq S^gu_kc  forall k in G forall c in C  \n v^l_ic leq V_ic leq v^u_ic  forall i in N forall c in C \n sum_substackk in G_i mathbfS^g_k - sum_substackk in L_i mathbfS^d_k - sum_substackk in S_i  mathbfV_i mathbfV^H_i (mathbfY^s_k)^H = sum_substack(ij)in E_i cup E_i^R diag(mathbfS_ij)  forall iin N \n mathbfS_ij =  mathbfV_i mathbfV_i^H left( mathbfY_ij + mathbfY^c_ijright)^H - mathbfV_i mathbfV^H_j mathbfY^H_ij   forall (ij)in E \n mathbfS_ji = mathbfV_j mathbfV_j^H left( mathbfY_ij + mathbfY^c_ji right)^H - mathbfV^H_i mathbfV_j mathbfY^H_ij  forall (ij)in E \n diag(mathbfS_ij) leq mathbfs^u_ij  forall (ij) in E cup E^R \n theta^Delta l_ijc leq angle (V_ic V^*_jc) leq theta^Delta u_ijc  forall (ij) in E forall c in C\n\nendalign","category":"page"},{"location":"math-model/#Variables-for-a-Branch-Flow-Model","page":"Mathematical Model","title":"Variables for a Branch Flow Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n S^g_kc  in mathbbC forall kin G forall c in C nonumber mathbfS^g_k = S^g_kc_c in C \n V_ic in mathbbC  forall iin N forall c in C nonumber mathbfV_i = V_ic_c in C \n I^s_ijc  in mathbbC forall e in E forall c in C nonumber mathbfI^s_ij = I^s_ijc_c in C \n mathbfS_ij  in mathbbC^ctimes c  forall (ij) in E cup E^R \n\nendalign","category":"page"},{"location":"math-model/#Mathematical-Formulation-of-a-Branch-Flow-Model","page":"Mathematical Model","title":"Mathematical Formulation of a Branch Flow Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"A complete mathematical model is as follows,","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nmboxminimize   sum_k in G c_2k left( sum_c in C Re(S^g_kc) right)^2 + c_1k  sum_c in C Re(S^g_kc) + c_0k \n\nmboxsubject to   nonumber \n mathbfV_i = mathbfV^textref_i    forall r in R \n S^gl_kc leq S^g_kc leq S^gu_kc  forall k in G forall c in C  \n v^l_ic leq V_ic leq v^u_ic  forall i in N forall c in C \n sum_substackk in G_i mathbfS^g_k - sum_substackk in L_i mathbfS^d_k - sum_substackk in S_i  mathbfV_i mathbfV^H_i (mathbfY^s_k)^H = sum_substack(ij)in E_i cup E_i^R diag(mathbfS_ij)  forall iin N \n mathbfS_ij + mathbfS_ji =  mathbfV_i mathbfV_i^H (mathbfY^c_ij)^H + mathbfZ_ij mathbfI^s_ij(mathbfI^s_ij)^H + mathbfV_j mathbfV_j^H (mathbfY^c_ji)^H   forall (ij)in E \n mathbfS^s_ij = mathbfS_ij + mathbfV_i mathbfV_i^H (mathbfY^c_ij)^H   forall (ij) in E cup E^R \n mathbfS^s_ij = mathbfV_i (mathbfI^s_ij)^H   forall (ij) in E cup E^R\n mathbfV_i = mathbfV_j - mathbfZ_ij mathbfI^s_ij forall (ij)in E \n diag(mathbfS_ij) leq mathbfs^u_ij  forall (ij) in E cup E^R \n theta^Delta l_ijc leq angle (V_ic V^*_jc) leq theta^Delta u_ijc  forall (ij) in E forall c in C\n\nendalign","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"[1] Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. https://doi.org/10.1109/PSCC.2014.7038399","category":"page"},{"location":"eng-data-model/#Engineering-Data-Model","page":"Engineering Data Model","title":"Engineering Data Model","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"This document describes the ENGINEERING data model type in PowerModelsDistribution, which is transformed at runtime, or at the user's direction into a MATHEMATICAL data model for optimization.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"In this document,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"nphases refers to the number of non-neutral, non-ground active phases connected to a component,\nnconductors refers to all active conductors connected to a component, i.e. length(connections), and\nnwindings refers to the number of windings of a transformer.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The data structure is in the following format","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Dict{String,Any}(\n    \"data_model\" => ENGINEERING,\n    \"component_type\" => Dict{String,Dict{String,Any}}(\n        id => Dict{String,Any}(\n            \"parameter\" => value,\n            ...\n        ),\n        ...\n    ),\n    ...\n)","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Valid component types are those that are documented in the sectios below. Each component object is identified by an id, which must be a string (id <: String), but id does not appear inside of the component dictionary, and only appears as keys to the component dictionaries under each component type. Note that this requirement is so that data structures will be JSON serializable.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Each edge or node component (i.e. all those that are not data objects or buses), is expected to have status fields to specify whether the component is active or disabled, bus or f_bus and t_bus, to specify the buses that are connected to the component, and connections or f_connections and t_connections, to specify the terminals of the buses that are actively connected in an ordered list. NOTE: terminals, connections, f_connections, and t_connections, must be type Vector{Int}.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Parameter values on components are expected to be specified in SI units by default (where applicable) in the engineering data model. Relevant expected units are noted in the sections below. It is possible for the user to select universal scalar factors for power and voltages. For example, if power_scalar_factor and voltage_scalar_factor are their default values given below, where units is listed as watt or var, real units will be kW and kvar. Where units are listed as volt, real units will be kV (multiplied by vm_nom, where that value exists).","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The Used column describes the situtations where certain parameters are used. \"always\" indicates those values are used in all contexts, opf, mld, or any other problem name abbreviation indicate they are used in particular for those problems. \"solution\" indicates that those parameters are outputs from the solvers. \"multinetwork\" indicates these values are only used to build multinetwork problems.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Those parameters that have a default may be omitted by the user from the data model, they will be populated by the specified default values.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Components that support \"codes\", such as lines, switches, and transformers, behave such that any property on said object that conflicts with a value in the code will override the value given in the code object. This is noted on each object where this is relevant.","category":"page"},{"location":"eng-data-model/#Root-Level-Properties","page":"Engineering Data Model","title":"Root-Level Properties","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"At the root level of the data structure, the following fields can be found.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Used Description\nname  String  Case name\ndata_model ENGINEERING DataModel always ENGINEERING, MATHEMATICAL, or DSS. Type of the data model (this document describes data_model==ENGINEERING)\nsettings Dict() Dict{String,<:Any} always Base settings for the data model, see Settings section below for details","category":"page"},{"location":"eng-data-model/#Settings-(settings)","page":"Engineering Data Model","title":"Settings (settings)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"At the root-level of the data model a settings dictionary object is expected, containing the following fields.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nvoltage_scale_factor 1e3 Real  always Scalar multiplier for voltage values\npower_scale_factor 1e3 Real  always Scalar multiplier for power values\nvbases_default  Dict{<:Any,Real}  always Instruction to set the vbase at a number of buses for non-dimensionalization\nsbase_default  Real  always Instruction to set the power base for non-dimensionalization\nbase_frequency 60.0 Real Hz always Frequency base, i.e. the base frequency of the whole circuit","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The parameters voltage_scale_factor and power_scale_factordetermine the base for all voltage and power parameters in this data model. For example,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"voltage_scale_factor=1E3 and vm_nom=4.0: vm_nom is 4.0 kV/4.0E3 V,\npower_scale_factor=1E6 and pd_nom=2.0: pd_nom is 2.0 MW/2.0E6 W,\npower_scale_factor=1E6 and qd_nom=5.0: qd_nom is 5.0 MVAr/5.0E6 VAr,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"where the mentioned fields vm_nom, pd_nom and qd_nom are sample voltage and power variables which are defined later.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"On the other hand,vbase_default and sbase_default provide default values for a 'per unit' conversion; these do not affect the interpretation of the parameters in this model, like the scale factors do. Note that vbase_default is a Dict{Any,Real}, with pairs of bus ids and voltage magnitude levels, since in per unit conversion, the voltage base can change from bus to bus. The power base is the same everywhere, and therefore sbase_default has a single value.","category":"page"},{"location":"eng-data-model/#Buses-(bus)","page":"Engineering Data Model","title":"Buses (bus)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The data model below allows us to include buses of arbitrary many terminals (i.e., more than the usual four). This would be useful for","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"underground lines with multiple neutrals which are not joined at every bus;\ndistribution lines that carry several conventional lines in parallel (see for example the quad circuits in NEVTestCase).","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nterminals [1,2,3,4] Vector{Int}  always Terminals for which the bus has active connections; NOTE: type can be either Vector{Int} or Vector{String}, but has to be consistent across all fields referring to terminals\nvm_lb  Vector{Real} volt opf Minimum conductor-to-ground voltage magnitude, size=nphases\nvm_ub  Vector{Real} volt opf Maximum conductor-to-ground voltage magnitude, size=nphases\nvm_pair_ub  Vector{Tuple}  opf e.g.  [(1,2,210)] means |U1-U2|>210\nvm_pair_lb  Vector{Tuple}  opf e.g.  [(1,2,230)] means |U1-U2|<230\ngrounded [] Vector{Int}  always List of terminals which are grounded\nrg [] Vector{Real}  always Resistance of each defined grounding, size=length(grounded)\nxg [] Vector{Real}  always Reactance of each defined grounding, size=length(grounded)\nvm  Vector{Real} volt always Voltage magnitude at bus. If set, voltage magnitude at bus is fixed\nva  Vector{Real} degree always Voltage angle at bus. If set, voltage angle at bus is fixed\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Each terminal c of the bus has an associated complex voltage phasor v[c]. There are two types of voltage magnitude bounds. The first type bounds the voltage magnitude of each v[c] individually,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"lb <= |v[c]| <= ub","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"However, especially in four-wire networks, bounds are more naturally imposed on the difference of two terminal voltages instead, e.g. for terminals c and d,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"lb <= |v[c]-v[d]| <= ub","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"This is why we introduce the fields vm_pair_lb and vm_pair_ub, which define bounds for pairs of terminals,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"forall\n(c,d,lb) in vm_pair_lb: |v[c]-v[d]| >= lb\nforall\n(c,d,ub) in vm_pair_ub: |v[c]-v[d]| <= ub","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Finally, we give an example of how grounding impedances should be entered. If terminal 4 is grounded through an impedance Z=1+j2, we write","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"grounded=[4], rg=[1], xg=[2]","category":"page"},{"location":"eng-data-model/#Special-Case:-three-phase-bus","page":"Engineering Data Model","title":"Special Case: three-phase bus","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"For three-phase buses, instead of specifying bounds explicitly for each pair of windings, often we want to specify 'phase-to-phase', 'phase-to-neutral' and 'neutral-to-ground' bounds. This can be done conveniently with a number of additional fields. First, phases is a list of the phase terminals, and neutral designates a single terminal to be the neutral.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The bounds vm_pn_lb and vm_pn_ub specify the same lower and upper bound for the magnitude of the difference of each phase terminal and the neutral.\nThe bounds vm_pp_lb and vm_pp_ub specify the same lower and upper bound for the magnitude of the difference of all phase terminals.\nvm_ng_ub specifies an upper bound for the neutral terminal, the lower bound is typically zero.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"If all of these are specified, these bounds also imply valid bounds for the individual voltage magnitudes,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"forall\nc in phases: vm_pn_lb - vm_ng_ub <= |v[c]| <= vm_pn_ub + vm_ng_ub\n0 <= |v[neutral]|<= vm_ng_ub","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Instead of defining the bounds directly, they can be specified through an associated voltage zone.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nphases  Vector{Int}  always Identifies the terminal that represents the neutral conductor\nneutral  Int  always Identifies the terminal that represents the neutral conductor\nvm_pn_lb  Real  opf Minimum phase-to-neutral voltage magnitude for all phases\nvm_pn_ub  Real  opf Maximum phase-to-neutral voltage magnitude for all phases\nvm_pp_lb  Real  opf Minimum phase-to-phase voltage magnitude for all phases\nvm_pp_ub  Real  opf Maximum phase-to-phase voltage magnitude for all phases\nvm_ng_ub  Real  opf Maximum neutral-to-ground voltage magnitude","category":"page"},{"location":"eng-data-model/#Edge-Objects","page":"Engineering Data Model","title":"Edge Objects","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"These objects represent edges on the power grid and therefore require f_bus and t_bus (or buses in the case of transformers), and f_connections and t_connections (or connections in the case of transformers).","category":"page"},{"location":"eng-data-model/#Lines-(line)","page":"Engineering Data Model","title":"Lines (line)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"This is a pi-model branch. When a linecode is given, and any of rs, xs, b_fr, b_to, g_fr or g_to are specified, any of those overwrite the values on the linecode.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nf_bus  Any  always id of from-side bus connection\nt_bus  Any  always id of to-side bus connection\nf_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the f_bus it connects\nt_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the t_bus it connects\nlinecode  Any  always id of an associated linecode\nrs  Matrix{Real} ohm/meter always Series resistance matrix, size=(nconductors,nconductors)\nxs  Matrix{Real} ohm/meter always Series reactance matrix, size=(nconductors,nconductors)\ng_fr zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always From-side conductance, size=(nconductors,nconductors)\nb_fr zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always From-side susceptance, size=(nconductors,nconductors)\ng_to zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always To-side conductance, size=(nconductors,nconductors)\nb_to zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always To-side susceptance, size=(nconductors,nconductors)\nlength 1.0 Real meter always Length of the line\ncm_ub  Vector{Real} amp opf Symmetrically applicable current rating, size=nconductors\nsm_ub  Vector{Real} watt opf Symmetrically applicable power rating, size=nconductors\nvad_lb  Vector{Real} degree opf Voltage angle difference lower bound\nvad_ub  Vector{Real} degree opf Voltage angle difference upper bound\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively","category":"page"},{"location":"eng-data-model/#Transformers-(transformer)","page":"Engineering Data Model","title":"Transformers (transformer)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"These are n-winding (nwinding), n-phase (nphase), lossy transformers. Note that most properties are now Vectors (or Vectors of Vectors), indexed over the windings.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbuses  Vector{Any}  always List of bus for each winding, size=nwindings\nconnections  Vector{Vector{Int}}  always List of connection for each winding, size=((nconductors),nwindings)\nconfigurations fill(WYE, nwindings) Vector{ConnConfig}  always WYE or DELTA. List of configuration for each winding, size=nwindings\nxfmrcode  Any  always id of\nxsc zeros(nwindings*(nwindings-1)/2) Vector{Real} sm_nom[1] always List of short-circuit reactances between each pair of windings, relative to the VA rating of the first winding; enter as a list of the upper-triangle elements\nrw zeros(nwindings) Vector{Real} sm_nom[1] always Active power lost due to resistance of each winding, relative to the VA rating of each winding winding\ncmag 0.0 Real sm_nom[1] always Total no-load reactive power drawn by the transformer, relative to VA rating of the first winding (magnetizing current)\nnoloadloss 0.0 Real sm_nom[1] always Total no-load active power drawn by the transformer, relative to VA rating of the first winding\ntm_nom ones(nwindings) Vector{Real}  always Nominal tap ratio for the transformer, size=nwindings (multiplier)\ntm_ub  Vector{Vector{Real}}  opf Maximum tap ratio for each winding and phase, size=((nphases),nwindings) (base=tm_nom)\ntm_lb  Vector{Vector{Real}}  opf Minimum tap ratio for for each winding and phase, size=((nphases),nwindings) (base=tm_nom)\ntm_set fill(fill(1.0,nphases),nwindings) Vector{Vector{Real}}  always Set tap ratio for each winding and phase, size=((nphases),nwindings) (base=tm_nom)\ntm_fix fill(fill(true,nphases),nwindings) Vector{Vector{Bool}}  oltc Indicates for each winding and phase whether the tap ratio is fixed, size=((nphases),nwindings)\npolarity fill(1,nwindings) Vector{Int}  always \nvm_nom  Vector{Real} volt always \nsm_nom  Vector{Real} watt always \nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively","category":"page"},{"location":"eng-data-model/#Asymmetric,-Lossless,-Two-Winding-(AL2W)-Transformers-(transformer)","page":"Engineering Data Model","title":"Asymmetric, Lossless, Two-Winding (AL2W) Transformers (transformer)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Special case of the Generic transformer, which is still a transformer object, but has a simplified method for its definition. These are transformers are asymmetric (A), lossless (L) and two-winding (2W). Asymmetric refers to the fact that the secondary is always has a WYE configuration, whilst the primary can be DELTA. The table below indicates alternate, more simple ways to specify the special case of an AL2W Transformer. xsc and rw cannot be specified for an AL2W transformer, because it is lossless. To use this definition format, all of f_bus, t_bus, f_connections, t_connections, and configuration must be used, and none of buses, connections, configurations may be used. xfmrcode is ignored for this component.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nf_bus  Any  always Alternative way to specify buses, requires both f_bus and t_bus\nt_bus  Any  always Alternative  way to specify buses, requires both f_bus and t_bus\nf_connections  Vector{Int}  always Alternative way to specify connections, requires both f_connections and t_connections, size=nphases\nt_connections  Vector{Int}  always Alternative way to specify connections, requires both f_connections and t_connections, size=nphases\nconfiguration WYE ConnConfig  always WYE or DELTA. Alternative way to specify the from-side configuration, to-side is always WYE\ntm_nom 1.0 Real  always Nominal tap ratio for the transformer (multiplier)\ntm_ub  Vector{Real}  opf Maximum tap ratio for each phase (base=tm_nom), size=nphases\ntm_lb  Vector{Real}  opf Minimum tap ratio for each phase (base=tm_nom), size=nphases\ntm_set fill(1.0,nphases) Vector{Real}  always Set tap ratio for each phase (base=tm_nom), size=nphases\ntm_fix fill(true,nphases) Vector{Bool}  oltc Indicates for each phase whether the tap ratio is fixed, size=nphases","category":"page"},{"location":"eng-data-model/#Switches-(switch)","page":"Engineering Data Model","title":"Switches (switch)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Switches without rs, xs or a linecode (conductance/susceptance not considered), defined the switch will be treated as lossless. If lossy parameters are defined, switch objects will be decomposed into virtual branch & bus, and an ideal switch.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nf_bus  Any  always id of from-side bus connection\nt_bus  Any  always id of to-side bus connection\nf_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the f_bus it connects\nt_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the t_bus it connects\ncm_ub  Vector{Real} amp opf Symmetrically applicable current rating\nsm_ub  Vector{Real} watt opf Symmetrically applicable power rating\nlinecode  Any  always id of an associated linecode, does not take into account conductance/susceptance\nrs zeros(nphases,nphases) Matrix{Real} ohm always Series resistance matrix, size=(nphases,nphases)\nxs zeros(nphases,nphases) Matrix{Real} ohm always Series reactance matrix, size=(nphases,nphases)\ndispatchable NO Dispatchable   NO or YES, indicates whether switch state can be changed in a switching optimization problem\nstate CLOSED SwitchState  always CLOSED: closed or OPEN: open, to indicate state of switch\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively","category":"page"},{"location":"eng-data-model/#Node-Objects","page":"Engineering Data Model","title":"Node Objects","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"These are objects that have single bus connections. Every object will have at least bus, connections, and status.","category":"page"},{"location":"eng-data-model/#Shunts-(shunt)","page":"Engineering Data Model","title":"Shunts (shunt)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Any  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\ngs  Matrix{Real} siemens always Conductance, size=(nconductors,nconductors)\nbs  Matrix{Real} siemens always Susceptance, size=(nconductors,nconductors)\nmodel GENERIC ShuntModel   GENERIC, CAPACITOR, or REACTOR. Indicates the type of shunt which may be necessary for transient stability analysis\ndispatchable NO Dispatchable  mld NO or YES, indicates whether a shunt can be shed\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/#Loads-(load)","page":"Engineering Data Model","title":"Loads (load)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Any  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nmodel POWER LoadModel  always POWER, IMPEDANCE, CURRENT, EXPONENTIAL, or ZIP. Indicates the type of voltage-dependency\npd_nom  Vector{Real} watt always Nominal active load, with respect to vm_nom, size=nphases\nqd_nom  Vector{Real} var always Nominal reactive load, with respect to vm_nom, size=nphases\nvm_nom  Real volt model!=POWER Nominal voltage (multiplier)\ndispatchable NO Dispatchable  mld NO or YES, indicates whether a load can be shed\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Multi-phase loads define a number of individual loads connected between two terminals each. How they are connected, is defined both by configuration and connections. The table below indicates the value of configuration and lengths of the other properties for a consistent definition,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"| configuration | |connections| | |pd_nom|=|qd_nom|=|pd_exp|=... | |––––––––-|––––––––-|–––––––––––––––––| | DELTA         | 2             | 1                              | | DELTA         | 3             | 3                              | | WYE           | 2             | 1                              | | WYE           | 3             | 2                              | | WYE           | N             | N-1                            |","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Note that for delta loads, only 2 and 3 connections are allowed. Each individual load i is connected between two terminals, exposed to a voltage magnitude v[i], which leads to a consumption pd[i]+j*qd[i]. The model then defines the relationship between these quantities,","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"model pd[i]/pd_nom[i]= qd[i]/qd_nom[i]=\nPOWER 1 1\nCURRENT (v[i]/vm_nom) (v[i]/vm_nom)\nIMPEDANCE (v[i]/vm_nom)^2 (v[i]/vm_nom)^2","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Two more model types are supported, which need additional fields and are defined below.","category":"page"},{"location":"eng-data-model/#model-EXPONENTIAL","page":"Engineering Data Model","title":"model == EXPONENTIAL","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"(pd[i]/pd_nom[i]) = (v[i]/vm_nom)^pd_exp[i]\n(qd[i]/qd_nom[i]) = (v[i]/vm_nom)^qd_exp[i]","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\npd_exp  Real  model==EXPONENTIAL \nqd_exp  Real  model==EXPONENTIAL ","category":"page"},{"location":"eng-data-model/#model-ZIP","page":"Engineering Data Model","title":"model == ZIP","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"(pd[i]/pd_nom) = pd_cz[i]*(v[i]/vm_nom)^2 + pd_ci[i]*(v[i]/vm_nom) + pd_cp[i]\n(qd[i]/qd_nom) = qd_cz[i]*(v[i]/vm_nom)^2 + qd_ci[i]*(v[i]/vm_nom) + qd_cp[i]","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nvm_nom  Real volt model==ZIP Nominal voltage (multiplier)\npd_cz  Real  model==ZIP \npd_ci  Real  model==ZIP \npd_cp  Real  model==ZIP \nqd_cz  Real  model==ZIP \nqd_ci  Real  model==ZIP \nqd_cp  Real  model==ZIP ","category":"page"},{"location":"eng-data-model/#Generators-(generator)","page":"Engineering Data Model","title":"Generators (generator)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Any  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nvg  Vector{Real} volt control_mode==ISOCHRONOUS Voltage magnitude setpoint\npg_lb zeros(nphases) Vector{Real} watt opf Lower bound on active power generation per phase, size=nphases\npg_ub fill(Inf, nphases) Vector{Real} watt opf Upper bound on active power generation per phase, size=nphases\nqg_lb -pg_ub Vector{Real} var opf Lower bound on reactive power generation per phase, size=nphases\nqg_ub pg_ub Vector{Real} var opf Upper bound on reactive power generation per phase, size=nphases\npg  Vector{Real} watt solution Present active power generation per phase, size=nphases\nqg  Vector{Real} var solution Present reactive power generation per phase, size=nphases\ncontrol_mode FREQUENCYDROOP ControlMode   FREQUENCYDROOP or ISOCHRONOUS\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/#generator-Cost-Model","page":"Engineering Data Model","title":"generator Cost Model","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The generator cost model is currently specified by the following fields.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ncost_pg_model 2 Int  opf Cost model type, 1 = piecewise-linear, 2 = polynomial\ncost_pg_parameters [0.0, 1.0, 0.0] Vector{Real} /MVA opf Cost model polynomial","category":"page"},{"location":"eng-data-model/#Photovoltaic-Systems-(solar)","page":"Engineering Data Model","title":"Photovoltaic Systems (solar)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Any  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\npg_lb  Vector{Real} watt opf Lower bound on active power generation per phase, size=nphases\npg_ub  Vector{Real} watt opf Upper bound on active power generation per phase, size=nphases\nqg_lb  Vector{Real} var opf Lower bound on reactive power generation per phase, size=nphases\nqg_ub  Vector{Real} var opf Upper bound on reactive power generation per phase, size=nphases\npg  Vector{Real} watt solution Present active power generation per phase, size=nphases\nqg  Vector{Real} var solution Present reactive power generation per phase, size=nphases\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/#solar-Cost-Model","page":"Engineering Data Model","title":"solar Cost Model","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"The cost model for a photovoltaic system currently matches that of generators.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ncost_pg_model 2 Int  opf Cost model type, 1 = piecewise-linear, 2 = polynomial\ncost_pg_parameters [0.0, 1.0, 0.0] Vector{Real} /MVA opf Cost model polynomial","category":"page"},{"location":"eng-data-model/#Wind-Turbine-Systems-(wind)","page":"Engineering Data Model","title":"Wind Turbine Systems (wind)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Wind turbine systems are most closely approximated by induction machines, also known as asynchronous machines. These are not currently supported, but there is plans to support them in the future.","category":"page"},{"location":"eng-data-model/#Storage-(storage)","page":"Engineering Data Model","title":"Storage (storage)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"A storage object is a flexible component that can represent a variety of energy storage objects, like Li-ion batteries, hydrogen fuel cells, flywheels, etc.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"How to include the inverter model for this? Similar issue as for a PV generator","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Any  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nenergy  Real watt-hr always Stored energy\nenergy_ub  Real  opf maximum energy rating\ncharge_ub  Real  opf maximum charge rating\ndischarge_ub  Real  opf maximum discharge rating\nsm_ub  Vector{Real} watt opf Power rating, size=nphases\ncm_ub  Vector{Real} amp opf Current rating, size=nphases\ncharge_efficiency  Real percent always charging efficiency (losses)\ndischarge_efficiency  Real percent always disharging efficiency (losses)\nqs_ub  Vector{Real}  opf Maximum reactive power injection, size=nphases\nqs_lb  Vector{Real}  opf Minimum reactive power injection, size=nphases\nrs  Vector{Real} ohm always converter resistance\nxs  Vector{Real} ohm always converter reactance\npex  Real  always Total active power standby exogenous flow (loss)\nqex  Real  always Total reactive power standby exogenous flow (loss)\nps  Vector{Real} watt solution Present active power injection\nqs  Vector{Real} var solution Present reactive power injection\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/#Voltage-Sources-(voltage_source)","page":"Engineering Data Model","title":"Voltage Sources (voltage_source)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"A voltage source is a source of power at a set voltage magnitude and angle connected to a slack bus. If rs or xs are not specified, the voltage source is assumed to be lossless, otherwise virtual branch and bus will be created in the mathematical model to represent the internal losses of the voltage source.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Any  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nvm ones(nphases) Vector{Real} volt always Voltage magnitude set at slack bus, size=nphases\nva zeros(nphases) Real degree always Voltage angle offsets at slack bus, applies symmetrically to each phase angle\nrs zeros(nconductors,nconductors) Matrix{Real} ohm always Internal series resistance of voltage source, size=(nconductors,nconductors)\nxs zeros(nconductors,nconductors) Matrix{Real} ohm always Internal series reactance of voltage soure, size=(nconductors,nconductors)\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"eng-data-model/#Data-Objects-(codes,-time-series,-etc.)","page":"Engineering Data Model","title":"Data Objects (codes, time series, etc.)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"These objects are referenced by node and edge objects, but are not part of the network themselves, only containing data.","category":"page"},{"location":"eng-data-model/#Linecodes-(linecode)","page":"Engineering Data Model","title":"Linecodes (linecode)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Linecodes are easy ways to specify properties common to multiple lines.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nrs  Matrix{Real} ohm/meter always Series resistance, size=(nconductors,nconductors)\nxs  Matrix{Real} ohm/meter always Series reactance, size=(nconductors,nconductors)\ng_fr zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always From-side conductance, size=(nconductors,nconductors)\nb_fr zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always From-side susceptance, size=(nconductors,nconductors)\ng_to zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always To-side conductance, size=(nconductors,nconductors)\nb_to zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always To-side susceptance, size=(nconductors,nconductors)\ncm_ub  Vector{Real} ampere always maximum current per conductor, symmetrically applicable","category":"page"},{"location":"eng-data-model/#Transformer-Codes-(xfmrcode)","page":"Engineering Data Model","title":"Transformer Codes (xfmrcode)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Transformer codes are easy ways to specify properties common to multiple transformers","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nconfigurations fill(WYE, nwindings) Vector{ConnConfig}  always WYE or DELTA. List of configuration for each winding, size=nwindings\nxsc [0.0] Vector{Real} ohm always List of short-circuit reactances between each pair of windings; enter as a list of the upper-triangle elements, size=(nwindings == 2 ? 1 : 3)\nrw zeros(nwindings) Vector{Real} ohm always List of the winding resistance for each winding, size=nwindings\ntm_nom ones(nwindings) Vector{Real}  always Nominal tap ratio for the transformer, size=nwindings (multiplier)\ntm_ub  Vector{Vector{Real}}  opf Maximum tap ratio for each winding and phase, size=((nphases), nwindings) (base=tm_nom)\ntm_lb  Vector{Vector{Real}}  opf Minimum tap ratio for for each winding and phase, size=((nphases), nwindings) (base=tm_nom)\ntm_set fill(fill(1.0, nphases), nwindings) Vector{Vector{Real}}  always Set tap ratio for each winding and phase, size=((nphases), nwindings) (base=tm_nom)\ntm_fix fill(fill(true, nphases), nwindings) Vector{Vector{Bool}}  always Indicates for each winding and phase whether the tap ratio is fixed, size=((nphases), nwindings)","category":"page"},{"location":"eng-data-model/#Time-Series-(time_series)","page":"Engineering Data Model","title":"Time Series (time_series)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Time series objects are used to specify time series for e.g. load or generation forecasts.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Some parameters for components specified in this document can support a time series by inserting a referece to a time_series object into the time_series dictionary inside a component under the relevant parameter name. For example, for a load, if pd_nom is supposed to be a time series, the user would specify \"time_series\" => Dict(\"pd_nom\" => time_series_id) where time_series_id is the id of an object in time_series, and has type Any.","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ntime  Vector{Union{Real,String}} hour always Time points at which values are specified. If time is specified in String, units not required to be in hours.\nvalues  Vector{Real}  always Multipers at each time step given in time\noffset 0 Real hour always Start time offset\nreplace true Bool  always Indicates to replace with data, instead of multiply. Will only work on non-Array data","category":"page"},{"location":"eng-data-model/#Fuses-(fuse)","page":"Engineering Data Model","title":"Fuses (fuse)","text":"","category":"section"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Fuses can be defined on any terminal of any physical component","category":"page"},{"location":"eng-data-model/","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ncomponent_type  String   \ncomponent_id  Any   \nterminals  Vector{Int}   \nfuse_curve  Array{Vector{Real},2}   specifies the fuse blowing condition\nminimum_melting_curve  Array{Vector{Real},2}   specifies the minimum melting conditions of the fuse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"EditURL = \"https://github.com/lanl-ansi/PowerModelsDistribution.jl/blob/master/examples/beginners_guide.jl\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"### A Pluto.jl notebook ###","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"v0.14.2","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"using Markdown\nusing InteractiveUtils","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"macro bind(def, element)\n    quote\n        local el = $(esc(element))\n        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing\n        el\n    end\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 9787aa73-8ffc-4634-bf0f-b70eee0bf377","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"using CodeTracking, Revise, PlutoUI","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ a1989876-9301-11eb-0783-83b3aa7abfbc","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tusing PowerModelsDistribution\n\tusing PowerModelsAnalytics\n\timport InfrastructureModels as IM\n\timport JuMP\n\timport Ipopt\n\timport JSON\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ c9a5c344-961b-11eb-0458-a746afcb280c","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"html\"\"\"\n\n<style>\nmain {\n\tmax-width: 1000px;\n}\nbody {\n\toverflow-x: hidden;\n}\n</style>\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b5928052-9616-11eb-14b3-79770b9929df","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Introduction to PowerModelsDistribution","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"This Notebook was designed for the following versions:\n\n- `julia = \"~1.6\"`\n- `PowerModelsDistribution = \"~0.11\"`\n- `PowerModelsAnalytics = \"~0.4.1\"`\n\nThis notebook is a begginer's introduction to PowerModelsDistribution, an optimization-focused Julia library for quasi-steady state power distribution modeling, based on JuMP.jl, and part of the larger [InfrastructureModels.jl](https://github.com/lanl-ansi/InfrastructureModels.jl) ecosystem, which notably includes:\n\n- [PowerModels.jl](https://github.com/lanl-ansi/PowerModels.jl) : Transmission (single-phase positive sequence power networks) optimization\n- [GasModels.jl](https://github.com/lanl-ansi/GasModels.jl) : Natural Gas pipeline optimization (includes Steady-state and Transient optimization)\n- [WaterModels.jl](https://github.com/lanl-ansi/WaterModels.jl) : Water network steady-state optimization\n\nDetails about PowerModelsDistribution.jl can be found in our [PSCC Conference Proceedings paper](https://doi.org/10.1016/j.epsr.2020.106664).\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 62c14531-357a-4669-90cd-2a186df123eb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"The following packages are used for notebook features only and do not relate to tutorial content\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b953c65d-515f-4334-a4d4-b27af1b0e29a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThis notebook will make use of the following packages in various places\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 749d062d-72a1-4160-afcf-1cdc27d85c84","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n# Case Section\n\nThis notebook can apply to different data sets, select a case for examples below from the cases included in the PMD unit testing suite:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 7e032130-c565-42d1-93ed-87955e1f2334","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tpmd_path = joinpath(dirname(pathof(PowerModelsDistribution)), \"..\")\n\t@bind case_file Select([\n\t\t\tjoinpath(pmd_path, \"test/data/opendss/case3_balanced.dss\") => \"case3_balanced\",\n\t\t\tjoinpath(pmd_path, \"test/data/opendss/case3_unbalanced.dss\") => \"case3_unbalanced\",\n\t\t\tjoinpath(pmd_path, \"test/data/opendss/case3_balanced_battery.dss\") => \"case3_balanced_battery\",\n\t\t\tjoinpath(pmd_path, \"test/data/opendss/case5_phase_drop.dss\") => \"case5_phase_drop\",\n\t\t\tjoinpath(pmd_path, \"test/data/opendss/ut_trans_2w_yy_oltc.dss\") => \"ut_trans_2w_yy_oltc\",\n\t\t\tjoinpath(pmd_path, \"test/data/opendss/case3_balanced_battery.dss\") => \"case3_balanced_battery\",\n\t\t])\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 67029534-961a-11eb-2b06-210f67607d20","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tdss = open(case_file, \"r\") do f\n\t\tjoin(readlines(f),\"\\n\")\n\tend\n\n\timporting_data_md = \"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Importing Data","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"PMD supports two input formats, __OpenDSS__ and __JSON__. We strongly recommend OpenDSS for new users, as JSON is intended primarily for data models and results portability between colleagues working on the same problem, and OpenDSS is appropriate for specifying new networks.\n\nBelow is an example of an OpenDSS specification for a 3-phase, 3-bus balanced feeder:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"dss dss","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\nData is imported via the `parse_file` command, which we will use further down in the tutorial.\n\"\"\"\n\n\timporting_data_md |> Markdown.parse\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 0b9598a8-9618-11eb-1947-4f98dac7129f","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Data Models","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"In PMD, there are two data models, an `ENGINEERING` data model, which is meant to be user facing, and to better reflect the engineering realities of the system, and a `MATHEMATICAL` data model, which reflect the mathematical representation of the system.\n\nData models are identified by a key in the data dictionary, `\"data_model\"`, whose values are `ENUM`s:\n\n- $(ENGINEERING)\n- $(MATHEMATICAL)\n\n# ENGINEERING data model\n\nFull specification of the `ENGINEERING` data model can be found in our [documentation](https://lanl-ansi.github.io/PowerModelsDistribution.jl/stable/eng-data-model/).\n\nThe engineering data model supports several broad categories of data:\n\n- metadata\n- node objects\n- edge objects\n- data objects\n\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 6d94d2cd-069b-4e48-84da-ba87c554297b","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng = parse_file(case_file)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 480f6685-56a0-4fdd-a975-33cdb3459ef5","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"\n### Metadata\n\nMetadata is mostly straight-forward, containing meta information about the feeder, on the parse, and what type of data model is currently being represented.\n\nFor `case3_balanced_eng` the following metadata fields are available:\n\n- `name`\n- `conductor_ids`\n- `settings`\n- `files`\n- `conductors`\n- `data_model`\n\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b73eedaf-5809-43b9-90e0-69350d6ee2c4","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Dict{String,Any}(k => eng[k] for k in [\"settings\", \"conductor_ids\", \"files\", \"name\", \"data_model\"])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 4243344a-9cdf-46db-96ee-633b0f5e8a71","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n`settings` and `data_model` are the most important metadata, required for solving any type of optimization problem.\n\n`data_model` is self-explanatory, but `settings` requires some explanation. First and foremost, `settings` contains the information needed to calculate the voltage bases for all of the buses in the network. When parsing from a DSS file, these are not explicitly stated, and must be extrapolated from the voltage at the source, and the network must be walked-through, and in a case with transformers the new voltage base is adjusted on the other side of the transformer.\n\nInside `settings`, scalars can also be set, which might be valuable if, _e.g._, the power or voltage values are being scaled into inappropriate per-unit values.\n\nFinally, `settings` also contains `base_frequency`, which by default is 60 Hz, but can be specified in OpenDSS, and is valuable to know if, for example, you are working with data from Europe, which might have a base frequency of 50 Hz.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ e95a9fba-b6ad-4339-8219-de4ca04536f4","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n### Distribution Assets\n\nThese consist of the actual physical assests in the distribution feeder, including the buses, which are the connective nodes on the network graph, lines, which are the fundamental edges, and others. In `case3_balanced_eng` there is the following asset types:\n\n- `bus`\n- `line`\n- `load`\n- `voltage_source`\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 23a3a107-2fc4-4af1-8eb6-e6a0dc29ddbe","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Dict{String,Any}(k => eng[k] for k in [\"bus\", \"line\", \"load\", \"voltage_source\"])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ba7c38a6-34f5-40d3-998e-7ea520001454","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nVoltage sources are representations of the substation at which the feeder is connected. By default in dss, there is a default voltage source called `\"source\"`, which has some default values.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 47fdba38-56ae-4a68-88a0-26af4e0a907a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n### Data objects\n\nData objects are things that affect and/or modify other objects, so linecodes, transformer codes (xfmrcode), or time series data.\n\nIn `eng`, only the following data object exists:\n\n- `linecode`\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 4628c72d-32a2-46bb-929e-153f3851f9c0","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Dict{String,Any}(k => eng[k] for k in [\"linecode\"])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ca82db50-ff48-411c-bc97-44f5f33c4ddf","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n### Enums\n\nIn the `ENGINEERING` data model we make heavy use of a Julia data structure called an `Enum`, or an Enumerated Type. This is a type whose values are enumerated, starting with 0. This has the benefit of being much more readable by the user.\n\nIf you are familiar with JuMP, you probably are already used to Enums `TerminationStatusCode` and `ResultStatusCode`, which we import explicitly from MathOptInterface and export, for easy access by the user when using `using PowerModelsDistribution`.\n\nFor example, instead of a switch `state` having the possible values 0 or 1, instead we created an enumerated type `SwitchState`, with values `OPEN` (0) and `CLOSED` (1).\n\nWe follow the convention that Enum values are all uppercase.\n\nEnums can be cast into their integer values easily:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 4f45cac5-3b27-4771-994b-3a9d81ed61c9","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Int(OPEN)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ fb08875c-1d9e-4744-bec2-7b7cad4320f6","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"Integers can be converted back to Enums just as easily...\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 5cf93941-3f88-4bd1-98c4-77b924ddb385","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"SwitchState(0)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 8a8222c3-ef01-4d18-97ff-fa43ad89cfcc","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"The following Enum types exist in PMD\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 38dfd21e-f156-45be-b9b3-f6eb5008723e","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"PowerModelsDistributionEnums","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 0f73a5be-7ee3-4936-95ed-ebb1b913cf4e","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"and the following enum values exist currently in PMD (excluding those imported from MathOptInterface):\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 254a4ed3-263b-4084-b9af-c97eac2d4ab7","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"[n for n in names(PowerModelsDistribution) if isa(getproperty(PowerModelsDistribution, n), Enum) && !isa(getproperty(PowerModelsDistribution, n),Union{TerminationStatusCode,ResultStatusCode})]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 03e27a4b-cf53-4e92-9e88-d07015937b3e","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nSome common examples when you will typically see Enums include:\n\n- `status`, on all components,\n- `data_model`, at the root level,\n- `dispatchable`, on things like switches, loads, and shunts, which indicate an ability to change their \"state\", like shedding the load, or opening or closing the switch\n- `configuration`, which indicates the connection type, `WYE` or `DELTA`\n- `model`, e.g., on loads, which can indicate the type of load, like constant `POWER`, `CURRENT`, `IMPEDANCE`, etc.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 3e74097f-55ce-4143-938d-543a59581a72","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n### Transformations\n\nTransformations are one of the most powerfull aspects of using the engineering model, because items are more simple and self-contained rather than decomposed, editing before transformation into a mathematical model is significantly more straightforward.\n\nThe best example of this is Kron reduction, which is still done by default, where it would be too complicated at the mathematical level, requiring significant changes to the transformer models, for example.\n\nSome simple examples that we commonly use involve settings better OPF bounds:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 2c11f944-ff4c-478b-9b6c-fba54bfc0afd","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tapply_voltage_bounds!(eng; vm_lb=0.9, vm_ub=1.1)\n\tapply_voltage_angle_difference_bounds!(eng, 1)\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 427bebe9-5a0d-41b0-ace6-6622400e136c","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nSome other valuable transformations built into PMD are:\n\n- `make_lossless` (will strip loss models on engineering assets that contain them, e.g., voltage sources or switches)\n- `remove_all_bounds` (will remove all bounds, e.g., those parsed in from the raw dss file)\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 284a471c-5b97-4753-b5be-8896dc096657","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia #= none:1 =# @code_string remove_all_bounds!(eng)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 20c563f0-9304-11eb-16b4-6720b073e911","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n# MATHEMATICAL data model\n\nThe mathematical data model is a transformation of the engineering components into ones which we can more easily represent in the optimization model.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ e70c3f4a-9302-11eb-1176-0925031bccc0","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"math = transform_data_model(eng)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 9a65d284-8558-4ddf-9139-e88e3a3625d9","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThe mathematical model can also be loaded directly via `parse_file`:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia parsefile(casefile; data_model=MATHEMATICAL)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\nIn some cases, the transformations are straight-forward, 1-to-1 type of conversions, where we convert to more optimization-friendly fields and units, like with lines -> branches, or loads -> loads.\n\nBut, some other components' transformations are less obvious, like voltage sources.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 7edf07c2-208d-47d4-914e-08c09bdfd7f6","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"@bind source_id_select Select([\"$type.$name\" for type in pmd_eng_asset_types for name in keys(get(eng, type, Dict()))])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 36f01f08-0c19-4a28-a2eb-11a11dec9897","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"filter(\n\tx->!isempty(x.second),\n\tDict(\n\t\ttype => Dict(\n\t\t\t\tname => obj\n\t\t\t\tfor (name,obj) in get(math, type, Dict())\n\t\t\t\t\tif source_id_select == obj[\"source_id\"]\n\t\t\t\t) for type in pmd_math_asset_types\n\t\t)\n)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ a3e10f7e-c193-4c02-9fef-e23bde112350","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nNote: All objects have the field `source_id`, that is meant to indicate where a `MATHEMATICAL` object originated from with the `ENGINEERING` model.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 1cf59273-3f50-41bd-b93c-c5cf5f3cd124","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThe reason for this is that some more complex objects can be decomposed into multiple mathematical objects. In the case of this voltage source, there is a non-zero source impedance, and rather than creating an entirely new mathematical object, we can decompose it into a generator with unlimited power bounds, and into an impedance branch, with a connecting bus.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 7e36b7b8-198c-4b9e-8b62-d1b481f09eeb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"\n### Componnent ID Format\n\nIn the engineering model, all component ids can be arbitrary strings, making it easier to navigate a feeder, but in the mathematical model we use only integers (Strings for dict keys, to maintain JSON compatibility, and Ints for ids within the data properties). For example:\n\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b717dab6-30fd-4e4b-b6f8-29ffcff80131","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"bus_keys = keys(math[\"bus\"])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ def53588-f511-4dda-8aa9-941d1aa994f7","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"bus_ids = [bus[\"bus_i\"] for (i, bus) in math[\"bus\"]]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ f1866650-ca90-4f4b-81ef-1cc3202dc240","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n\n### Additional Metadata\n\n- `map`\n- `bus_lookup`\n- `basekv`\n- `baseMVA`\n- `is_projected`\n- `per_unit`\n- `is_kron_reduced`\n\nTwo particular items classified as metadata that are key for understanding how the data model maps between the engineering and mathematical models are `bus_lookup`, which maps bus names into their new integer ids, and `map`, which is an ordered list of actions that were taken to map engineering to mathematical model, so that we can map the solutions back up to the correct components in the engineering model.\n\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 27ec55f0-77c2-4cec-b505-976fd86f1004","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"math[\"bus_lookup\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 0ef86c0a-6d65-44a3-9804-676d4cc904c3","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"math[\"map\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ e45adf3e-5b84-4d14-9840-40ba2fbc1573","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"\n### Asset Types\n\nFor mathematical models we initially adopted the PowerModels data model, which was originally designed based on the Matpower package. We try to largely maintain this parity with PowerModels even though it is no longer a dependency, which is why there there remains some inconsistency in property names compared to the engineering model. The current components in the math model are:\n\n- `bus`\n- `load`\n- `shunt`\n- `gen`\n- `branch`\n- `transformer`\n- `switch`\n- `storage`\n\nThe one notable divergence is the existance of `transformer`s. In distribution models, phase unbalanced transformers are much more complex than the typical two-winding Pi-branch model commonly utilized in transmission grids.\n\nIn the PMD math model, transformers are two-winding lossless transformers that can be either wye-wye or wye-delta connected.\n\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 905bfb0a-2fb5-4b0c-bc62-49bd2888ad30","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Optimization in PMD","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Solving optimization problems in PowerModelsDistribution will feel very familiar to those who use PowerModels.jl for transmission grids (positive sequence representable networks).\n\nFull optimization problems consist of a data model, a mathematical formulation, and a problem specification in which the variables, constraints and objectives are defined.\n\nAdditional details can be found in our documentation about the [mathematical problem specifications](https://lanl-ansi.github.io/PowerModelsDistribution.jl/stable/math-model/) and [formulations](https://lanl-ansi.github.io/PowerModelsDistribution.jl/stable/formulation-details/).\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 3d468a08-c62c-42cb-a096-8ba382bb91e5","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n# Formulations\n\nFormulations in PMD are represented by Julia Types, and have a clearly defined hierarchy, starting with our base abstact unbalanced (i.e., multiconductor) PowerModel: `AbstractUnbalancedPowerModel`.\n\nSome useful abbreviations / acronyms in PowerModel and function names:\n\n- `MC`/`_mc_` : multi-conductor, to differentiate from PowerModels.jl name, indicating applies to multiconductor / phase unbalanced / distribution problems.\n- `U` : unbalanced\n- `BF` : branch flow\n- `ACP` : AC polar\n- `ACR` : AC rectangular\n- `IVR` : IV reectangular\n- `LP` : linear program\n- `SDP` : semi-definite program\n- `SOC` : second-order cone\n- `KCL` : Kirchoff's Current Law\n- `MX` : matrix\n\n### Non-convex Formulations\n\n- `ACPUPowerModel` : Complex Power-Voltage space polar multiconductor form (bus injection model)\n- `ACRUPowerModel` : Complex Power-Voltage space rectangular multiconductor form (bus injection model)\n- `IVRUPowerModel` : Complex Current-Voltage space rectangular multiconductor form (bus injection model)\n\n### Linear/Quadratic Formulations\n\n- `LPUBFDiagPowerModel` / `LinDist3Flow` : Diagonal matrix formulation of DistFlow equations (unbalanced branch flow model)\n- `NFAUPowerModel <: AbstractUnbalancedActivePowerModel` : Linear, Active-power-only multiconductor form (bus injection model)\n- `DCPUPowerModel` : DC polar multiconductor form (bus injection model)\n\n### Semi-definite formulations\n\n- `SDPUBFMCPowerModel` : SDP multiconductor form (unbalanced branch flow model)\n- `SDPUBFKCLMXMCPowerModel` : SDP with Matrix KCL constraint multiconductor form (unbalanced branch flow model)\n\n### Second-Order Cone formulations\n\n- `SOCUBFNLPMCPowerModel` : SOC-representable with non-linear ... multiconductor form (unbalanced branch flow model)\n- `SOCUBFConicMCPowerModel` : SOC-representable with conic multiconductor form (unbalanced branch flow model)\n\nA more detailed description of the type heirarchies can be found in our [documentation](https://lanl-ansi.github.io/PowerModelsDistribution.jl/stable/formulations/).\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 114f8b4c-3296-428a-bf72-f5efe6b21b47","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"filter(x -> endswith(String(x), \"PowerModel\"), names(PowerModelsDistribution))","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 0d510b81-6f58-4790-be85-82c9b215322d","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"\n# Problem Specifications\n\nSome additional helpful abbreviations for problem specifications:\n\n- `mn` - Multinetwork, i.e., time series problem\n- `uc` - unit-commitment, i.e., full load shed only, no partial shed\n\nIn PMD, there are two primary problem specifications,\n\n- Optimal Power Flow (OPF) `solve_mc_opf`\n  - There is a sub-problem for OPF called On-load Tap Changing (OLTC)\n- Maximal Load Delivery (MLD) `solve_mc_mld`\n  - There is also a \"simple\" version, but it will not work in conjunction with a switching optimization (`solve_mc_mld_simple`)\n  - There is a caveat that the currently included MLD problem features continuous shedding of individual loads, which is not realistic for real-world distribution operations. While in transmission problems, one may assume some continuous shedding of loads, in real distribution grids, most loads can only be shed by using switches to isolate load blocks.\n\nRecently, with the addition of idealized switches, we have also added a test version of a switching problem (OSW), which has variables for switch states of dispatchable switches, and an additional term in the objective to discourage state changes. This spec is experimental, but ongoing research in this area are expected to yield updates in this problem area.\n\nWe also have a debugging problem spec, `solve_mc_opf_pbs`, which will install slacks at every bus, which can be helpful in determining where the issue is in the network.\n\nPower flow (`solve_mc_pf`) is also included, but if should be noted that this uses the same mechanism to solve as all of our optimization problems, and is therefore not efficient or quick, like a Newton-Raphson or Backwards/Forwards method for power flow solving might be.\n\nBelow is the primary example for the OPF problem:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia #= none:1 =# @code_string build_mc_opf(instantiate_mc_model(eng, ACPUPowerModel, build_mc_opf))","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ cf3614bc-4c35-4b4d-9ec9-f43307a04c48","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"filter(x->startswith(String(x), \"solve_\"), names(PowerModelsDistribution))","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 6335835e-2b5e-45a0-a5f6-4d97328694bd","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Examples","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Let's start with the AC polar formulation, and solve the OPF problem using Ipopt:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ bea3a93e-a827-473a-9e19-348ad85dfa25","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng_result = solve_mc_opf(eng, ACPUPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 86d66ed7-89b1-461e-9487-0e190e6fd02e","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nWe have designed the `solution` dictionary to be as verbose as possible, including all variables contained in the problem automatically, in the same order and format as the input data.\n\nThis means that if an engineering data model is provided, the results will return in the same units and format as that model, unless otherwise instructed...\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ce39193d-833b-40aa-b532-f9db22f03652","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng_result_pu = solve_mc_opf(eng, ACPUPowerModel, Ipopt.Optimizer; make_si=false)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ cb632c77-5c8b-4fbb-a867-127a22ce54ad","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng_result_pu[\"solution\"][\"bus\"][\"sourcebus\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b3bd6e16-28dc-44b7-b8ad-1478cdfefecc","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng_result[\"solution\"][\"bus\"][\"sourcebus\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ a0e6612f-516e-4be4-b3ae-00c612b981e2","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nWhat if `vm` and `va` are desired, but those variables are not in the model, for example, in `ACRMCPowerModel`?\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 77899c35-2609-4aef-bcd0-178076237d1d","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng_result_acr2acp = solve_mc_opf(eng, ACRUPowerModel, Ipopt.Optimizer; solution_processors=[sol_data_model!])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ eb3d6861-0d91-4ae1-9580-7b3182cefef1","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"eng_result_acr2acp[\"solution\"][\"bus\"][\"sourcebus\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 1b6fd52f-0cdf-4f4f-aa38-31cd8aa9ca7d","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia #= none:1 =# @code_string PowerModelsDistribution._sol_data_model_acr!(eng_result)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ e39e89d8-7b3d-4c2d-bbe3-8de202e91c5f","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nIt is also possible to optimize using the `MATHEMATICAL` data model directly, but it will output results in the same format as the model it is provided:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 493d1dfd-719c-4f03-b660-6b0e9e50a222","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"math_result = solve_mc_opf(math, ACPUPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b6700c39-8dff-4bcb-b6fa-c67b2ddf5163","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nHowever, if your `MATHEMATICAL` data model contains the `map`, it is possible to manually convert the solution back into the `ENGINEERING` structure...\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ f0cb5faf-0471-4651-9d09-61fe6e5e0fb5","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"transform_solution(math_result[\"solution\"], math)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 89f6282d-9898-4547-a121-028fcdf4f876","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"PMD Internals for Specification / Formulation Builders","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"A problem is formally created using `instantiate_mc_model(data, form, prob)`, and outputs a Julia Struct:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia #= none:1 =# @code_string IM.InitializeInfrastructureModel(NFAUPowerModel, eng, PowerModelsDistribution._pmd_global_keys, pmd_it_sym)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\nThe following helper functions are here to help you navigate through the mathematical model.\n\n- `ref`\n- `var`\n- `con`\n- `ids`\n\n\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 7303e40a-56f8-4035-8537-e2eed7c16b8b","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"pm = instantiate_mc_model(eng, NFAUPowerModel, build_mc_opf)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ c3dcee8a-edf1-43bb-8733-f2798b29d57a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"As you can see, the following property names exist on the PowerModel struct:\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ d7522533-43b9-4b3c-a8e5-1aa4f39700bb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"propertynames(pm)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ f4fb1464-8d33-4265-ab40-8fb72d533466","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"Using the `ref` helper function, for example, we could get all branches in the model...\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 213e9ea4-c800-47bc-a020-4eacc334e4fc","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"math_branches = ref(pm,:branch)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ e32b7e5e-1d99-482f-b406-460a18cde912","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"Or, we could get only the branch ids by using `ids`...\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 6b7e5199-61ed-40b0-a658-1a490298dc6d","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"branch_ids = ids(pm,:branch)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ fb48ddde-128a-4a32-ab5f-084561108539","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Example: Upgrading MLD to use Load Blocks","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"As mentioned in the section above on Problem Specifications, the MLD problem bundled in PMD represents all loads as individually sheddable, which is not accurate to distribution feeders, where it is unlikely that loads would be sheddable by themselves. Instead, usually loads are only sheddable as a whole block, by opening switches to isolate them.\n\nIn this example I am going to get us closer to that more realistic problem by creating indicator variables for loads that apply to the whole load block, instead of variables for each load individually.\n\nTo achieve this, first we must be able to calculate the possible load blocks, which we can do with `identify_load_blocks`, which will return all sets of buses that can be isolated with switches...\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 92fd9826-17a4-44e2-ae8b-8d96d6f21130","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"identify_load_blocks(math)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ a7037bcd-e65d-40d4-8070-7fd73811ffad","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThen we should add the loads in each block to a `ref` for easy lookup when we are building our model...\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 53e1237b-c380-4506-9924-8b7298d0b38a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\nfunction _ref_add_load_blocks!(ref::Dict{Symbol,<:Any}, data::Dict{String,<:Any})\n\tref[:load_blocks] = Dict{Int,Set}(i => block for (i,block) in enumerate(identify_load_blocks(data)))\n\n\tload_block_map = Dict{Int,Int}()\n\tfor (l,load) in get(data, \"load\", Dict())\n\t\tfor (b,block) in ref[:load_blocks]\n\t\t\tif load[\"load_bus\"] in block\n\t\t\t\tload_block_map[parse(Int,l)] = b\n\t\t\tend\n\t\tend\n\tend\n\tref[:load_block_map] = load_block_map\n\n\tload_block_switches = Dict{Int,Vector{Int}}(b => Vector{Int}([]) for (b, block) in ref[:load_blocks])\n\tfor (b,block) in ref[:load_blocks]\n\t\tfor (s,switch) in get(data, \"switch\", Dict())\n\t\t\tif switch[\"f_bus\"] in block || switch[\"t_bus\"] in block\n\t\t\t\tif switch[\"dispatchable\"] == 1 && switch[\"status\"] == 1\n\t\t\t\t\tpush!(load_block_switches[b], parse(Int,s))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tref[:load_block_switches] = load_block_switches\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 60485fa1-7b4d-4be1-a0c4-50b45a840a66","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nBecause of a recent upgrade to support multi-infrasture models, we now want to use `apply_pmd!` to help us apply this ref, which will help us apply things to the correct data structure and to each subnetwork, if applicable.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 8e2620f3-894f-43ff-9704-637225a6dda3","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\nfunction ref_add_load_blocks!(ref::Dict{Symbol,<:Any}, data::Dict{String,<:Any})\n    apply_pmd!(_ref_add_load_blocks!, ref, data; apply_to_subnetworks=true)\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 516bc915-946d-4216-b5d0-b0bde5db6546","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nWe will demonstrate how to apply this `add_ref_load_blocks!` later, but in the next steps we will assume we already have these added refs avaiable to us.\n\nNext we need to add the new indicator variables. An indicator variable is a variable z ∈ [0,1] that we can use to shed the loads. This variable gets applied to the real and reactive load power values, so that the load can be dynamically shed in the algorithm.\n\nBecause we need to shed whole blocks at a time, there should only be one indicator variable for each block.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 87bf0ddd-5678-4aea-9024-26c0a2db7521","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"create variables for demand status by load block\"\nfunction variable_mc_load_block_indicator(pm::AbstractUnbalancedPowerModel; nw::Int=IM.nw_id_default, relax::Bool=false, report::Bool=true)\n    if relax\n        z_demand = var(pm, nw)[:z_demand_blocks] = JuMP.@variable(pm.model,\n            [i in ids(pm, nw, :load_blocks)], base_name=\"$(nw)_z_demand\",\n            lower_bound = 0,\n            upper_bound = 1,\n            start = 1.0\n        )\n    else\n        z_demand = var(pm, nw)[:z_demand_blocks] = JuMP.@variable(pm.model,\n            [i in ids(pm, nw, :load_blocks)], base_name=\"$(nw)_z_demand\",\n            binary = true,\n            start = 1\n        )\n    end\n\n    load_block_map = ref(pm, nw, :load_block_map)\n\n    var(pm, nw)[:z_demand] = Dict(l => z_demand[load_block_map[l]] for l in ids(pm, nw, :load))","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"expressions for pd and qd","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"    pd = var(pm, nw)[:pd] = Dict(i => var(pm, nw)[:z_demand][i].*ref(pm, nw, :load, i)[\"pd\"] for i in ids(pm, nw, :load))\n    qd = var(pm, nw)[:qd] = Dict(i => var(pm, nw)[:z_demand][i].*ref(pm, nw, :load, i)[\"qd\"] for i in ids(pm, nw, :load))\n\n    report && IM.sol_component_value(pm, pmd_it_sym, nw, :load, :status, ids(pm, nw, :load), var(pm, nw)[:z_demand])\n    report && IM.sol_component_value(pm, pmd_it_sym, nw, :load, :pd, ids(pm, nw, :load), pd)\n    report && IM.sol_component_value(pm, pmd_it_sym, nw, :load, :qd, ids(pm, nw, :load), qd)\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ f9fc4c70-f091-4ecd-ac70-c1dfcd8a6f93","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThe last three lines are how the pd and qd variables get added to the solution.\n\nFinally, we need to update the problem to use this new variable. Lets use the \"simple\" mld problem as a starting point.\n\nFirst we need the problem definition (the builder).\n\nNote that in this example I am using a Unbalanced Branch Flow formulation, which obviously has some different constraints in the branch section than would be used with, e.g., the NLP formulations.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 33dd7091-5576-4375-b5d9-d9a738656ddb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"Multinetwork load shedding problem for Branch Flow model\"\nfunction build_mc_mld_simple_loadblock(pm::AbstractUBFModels)\n\tvariable_mc_bus_voltage(pm)\n\n    variable_mc_branch_power(pm)\n\tvariable_mc_branch_current(pm)\n    variable_mc_switch_power(pm)\n    variable_mc_transformer_power(pm)\n\n    variable_mc_generator_power(pm)\n\n    variable_mc_load_block_indicator(pm; relax=true)\n    variable_mc_shunt_indicator(pm; relax=true)\n\tvariable_mc_storage_power_mi(pm; relax=true)\n\n   \tconstraint_mc_model_current(pm)\n\n    for i in ids(pm, :ref_buses)\n        constraint_mc_theta_ref(pm, i)\n    end\n\n    for i in ids(pm, :gen)\n        constraint_mc_generator_power(pm, i)\n    end\n\n    for i in ids(pm, :bus)\n        constraint_mc_power_balance_shed(pm, i)\n    end\n\n    for i in ids(pm, :storage)\n        constraint_storage_state(pm, i)\n        constraint_storage_complementarity_mi(pm, i)\n        constraint_mc_storage_losses(pm, i)\n        constraint_mc_storage_thermal_limit(pm, i)\n    end\n\n    for i in ids(pm, :branch)\n        constraint_mc_power_losses(pm, i)\n        constraint_mc_model_voltage_magnitude_difference(pm, i)\n\n        constraint_mc_voltage_angle_difference(pm, i)\n\n        constraint_mc_thermal_limit_from(pm, i)\n        constraint_mc_thermal_limit_to(pm, i)\n    end\n\n    for i in ids(pm, :switch)\n        constraint_mc_switch_state(pm, i)\n        constraint_mc_switch_thermal_limit(pm, i)\n    end\n\n    for i in ids(pm, :transformer)\n        constraint_mc_transformer_power(pm, i)\n    end\n\n    objective_mc_min_load_setpoint_delta_simple(pm)\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 1b18e8ce-f403-4cb6-b833-083e8b9ef5bb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nNext, we need a way to call this problem to solve it:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 5369925c-3e0f-43ca-a4d8-c801a90653ff","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\nfunction solve_mc_mld_simple_loadblock(data::Dict{String,<:Any}, model_type::Type, solver; kwargs...)\n    return solve_mc_model(data, model_type, solver, build_mc_mld_simple_loadblock; ref_extensions=[ref_add_load_blocks!], kwargs...)\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 51af76d7-2c62-422d-98d1-b199aba84263","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nNote in particular the addition of the `ref_extensions` keyword argument, which takes a vector of function references. This is how we add our custom ref extension `ref_add_load_blocks!`\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 12ed532a-164c-4a92-a7d1-fc4dd53c3c57","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"mld_result = solve_mc_mld_simple_loadblock(eng, LPUBFDiagPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 3207f33b-00e5-4691-a9c9-9461c974b3b0","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nBut we can see that no loads get shed in the case, because there is no contingency applied to this feeder\n\nWhat if we instead apply a contingency where power delivery is disabled on one phase, what happens?\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 8eb99a9b-ee92-4aad-bbfc-c9242dc916cb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\teng_vs_disabled = deepcopy(eng)\n\teng_vs_disabled[\"voltage_source\"][\"source\"][\"pg_ub\"] = [Inf, Inf, 0]\n\teng_vs_disabled[\"voltage_source\"][\"source\"][\"qg_ub\"] = [Inf, Inf, 0]\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ f70780ef-5ad1-4f69-bb2e-41de737b1bef","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"mld_vs_disabled_result = solve_mc_mld_simple_loadblock(eng_vs_disabled, LPUBFDiagPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ab146273-0cf6-4815-b996-dc2e8fc185db","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nBecause loads are tied together, we must shed all of the load in this block, even though only one phase could not deliver power.\n\nThis is a very simplistic example, and therefore the results may not seem interesting in themselves.\n\nFinally, I want to note that in this example, status is not == 0, even though we might expect it to be. This is because we are using the \"relaxed\" version of the indicator constraints, which will often be not quite zero or one, even when we might expect them to be, especially in the case of the \"simple\" mld problem.\n\nTo guarantee 0 or 1, which is the most realistic for distribution feeders, we should use the unrelaxed indicator variables, but this will require using a different solver that can support mixed-integer variables. In the case of the problem I created above, Juniper, using Cbc and Ipopt might be a good option, but e.g., Gurobi would be better.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 3f03084d-f8cc-424e-99a6-78b39ece17ef","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Multinetwork Data and Problems","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Next we will cover multinetwork problems, e.g. time series OPF.\n\nPMD has a lot of tools for multinetwork problems, but really only one constraint that is inherently multinetwork, storage state.\n\nLet's start with constructing a multinetwork data structure, and exploring it.\n\nFirst, for multinetwork data to be created automatically, we need `time_series` data. If we have chosen one of the data sets above that contains `time_series`, this should have entries...\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 19e88e22-44e1-4139-bb5b-1247a271e34a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"get(eng, \"time_series\", Dict())","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 7af68b51-a1b3-4ed8-95bc-43b2523c298c","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\n`time_series` is one of our \"data\" objects, in that it does not represent actual assets on the feeder, but represents information about one or more assets. `linecode`s are the most often encountered and most familiar data objects in feeder data.\n\nEach `time_series` object will have \"time\", \"values\", and \"replace\", at a minimum, with optional \"source_id\", to help find the orginating object, and \"offset\", for which the intention if for it to add an offset to \"time\". \"offset\" is not yet supported, but datetime strings or floats in units of hours in \"time\" are supported.\n\n\"replace\" indicates whether the values in \"values\" will replace the property they are assigned to, if `false`, values will be multiplied by the base value.\n\nTo apply a `time_series` object to a property, it must be specified within an asset's specification:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 3d769b34-b327-4304-af0a-1b995a4d6e4c","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"filter(x->!isempty(x.second), Dict(type => Dict(name => obj for (name, obj) in get(eng, type, Dict()) if haskey(obj, \"time_series\")) for type in pmd_eng_asset_types))","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 9bb9cbf5-67ef-487b-88a9-830f15378537","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nIf a input data set with timeseries data has been selected then one should find objects that have their own `\"time_series\"` dictionary, inside of which the keys are properties to be replaced, and values are references to root-level `time_series` objects.\n\nOpenDSS has multiple ways to specify time series data, most usually through `LoadShapes`, which are specified on `Load` objects via the `daily` or `yearly` properties most often.\n\nBy default PMD will parse the `daily` time series data, but you can specify this at parse:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia parsefile(casefile; time_series=\"yearly\")","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\nIf anything other than `\"daily\"` is chosen, it might be necessary to adjust `time_elapsed`, which will be discussed below.\n\nIf you have `time_series` data specified correctly, building a multinetwork is straightforward:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 4bbc5205-4a3e-4e3d-88d6-219195ad8a0f","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"mn_eng = make_multinetwork(eng)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ba8e830f-3c3b-45bc-be25-c440cc736a02","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nIt is also possible to load from a file directly into a multinetwork data structure:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia parsefile(casefile; multinetwork=true)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\nThis transformation changes the root-level of the data model pretty drastically.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ea462d05-6325-44b3-84fc-bf34e032bb01","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"keys(mn_eng)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 565385e3-ccb4-4ac7-a0a5-12c2744ceed5","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"Compared to a non-multinetwork structure...\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ fb05c680-d4ba-46a6-a696-7536aaa0dd57","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"keys(eng)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 5cd2d702-f5fa-44f3-9739-8eb75b0b6472","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nHowever, what is really happening here is that only some information is needed at the root-level, and some information is paired directly with subnetworks (what we can a timestep in the multinetwork structure).\n\nAt the top level, we really need `\"data_model\"`, `\"nw\"`, and `\"multinetwork\"`. Even `\"mn_lookup\"` is only useful for one of our helper functions for manually reorganizing subnetworks `sort_multinetwork!`\n\nThe subnetworks live inside `\"nw\"`:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 85d52ceb-2b4f-4c22-880a-290c1a5737a1","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"mn_eng[\"nw\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 20f6dfed-5d1a-481c-92f4-440de0f2abca","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nInside `nw`, subnetworks are organized by string integers, corresponding to the \"time step\". This makes iterating through them consistent...\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ff6dfa9a-d55e-4bbe-bf41-357a417784a5","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"sort([parse(Int, n) for n in keys(mn_eng[\"nw\"])])","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 74a403df-0f94-4a1a-af69-cd8dc5bef430","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nEach subnetwork contains all of the information we should need for variables, constraints, etc. at that time step:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 28f75060-d0be-47f2-bea9-377d5df89cf6","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"first(mn_eng[\"nw\"]).second","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 663e32f5-4b2e-4255-9def-e1c7d383c36d","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThe reason for so much duplication of data is that the vision for multinetworks was never just for time series data, but that it could be used more generally in creative ways, like pairing two topologically different networks together with custom problem specifications.\n\nThis use case means that things that you might expect to stay the same between time steps, like `conductor_ids`, `linecodes`, `settings`, and the overall topology, could be drastically different, and therefore should be replicated for each subnetwork.\n\nThis also explains the origin of the name \"multinetwork\", in case the standard use case made its name confusing.\n\nAs an interesting note, `make_multinetwork` will always return a multinetwork structure, even if there is no `time_series` data, with a single subnetwork with key `\"0\"`.\n\nTransforming into the `MATHEMATICAL` data model from a multinetwork `ENGINEERING` data model is also the same as for single network data:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ d3e6486c-4133-404b-91c1-7ac18ec8388f","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"mn_math = transform_data_model(mn_eng)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 8c34cd7f-52c4-440f-a226-afc27bf24799","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nSome of the root-level keys will be slightly different, but otherwise you will see what you are already familiar with in the single network `MATHEMATICAL` data model.\n\nIt is also possible to transform directly into a multinetwork `MATHEMATICAL` data model from a single network `ENGINEERING` data model:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia mnmath = transformdata_model(eng; multinetwork=true)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\nThe one major caveat with these automatic generations of multinetwork data structures is that it **must** be performed before converting to the `MATHEMATICAL` data model. This is because, since we support replacing arbitrary fields with `time_series` data, it is impossible to work out the conversions within the `time_series` objects.\n\nIf you have a `MATHEMATICAL` data model and want to convert it to a multinetwork, this is supported, but you must already have a special construction of the `time_series` object that matches the format expected by InfrastructureModels, which has its own, more general, `make_multinetwork` function.\n\nMultinetworks have two key helper functions:\n\n- `sort_multinetwork!`\n- `set_time_elapsed!`\n\nThe first accepts a Vector of `time` values, which it will use to manually re-sort the subnetworks, and the second accepts either a vector of time deltas or a single time delta, and replaces the `time_elapsed` property within all the subnetworks.\n\n`time_elapsed` a value in hours that indicates how long each time step duration is, which is needed for calculating storage losses.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 3562dcc2-b6d7-4bfa-bae7-7a5e992cb422","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"set_time_elapsed!(mn_eng, 0.5)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 805b06be-7ed9-4330-9f1e-a584c4508862","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"first(mn_eng[\"nw\"]).second[\"time_elapsed\"]","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ e56a2563-45c7-40fd-80ad-b86d7e1c1e44","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"\nSolving multinetworks is not anymore difficult than single network cases, but a special problem specification must be used that is multinetwork-aware...\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia #= none:1 =# @code_string build_mn_mc_opf(instantiate_mc_model(mn_eng, ACPUPowerModel, build_mn_mc_opf; multinetwork = true))","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\" |> Markdown.parse","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 49808060-ad86-491e-aed2-c69f203d4a0e","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nNote that the standard OPF problem loops over each subnetwork (not necessarily in order), with the keyword argument `nw=n`.\n\nCurrently the only build-in asset that truly has multinetwork constraints is storage, where you can see the `constraint_storage_state` being called with two nw ids near the bottom of the above specification.\n\nKnowing this, solving a multinetwork OPF problem is straightforward:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 59abd602-30de-40af-bce5-7800d11a7108","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"mn_result = solve_mn_mc_opf(mn_eng, ACRUPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ f40614c0-5aac-491b-bf5b-8aa9d328f640","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Merging Solution with Data","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"It is possible to merge your solutions with your data structures, which will make transporting and/or visualizing data easier. This helper function from InfrastructureModels allows you to merge two *nested* dictionaries together:\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 40e60c21-76fe-44ce-9a33-988030e8d863","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\teng_copy = deepcopy(eng)\n\tupdate_data!(eng_copy, eng_result[\"solution\"])\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 09f7c681-9654-466d-a1cb-e09eebad62fd","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"first(eng_copy[\"bus\"]).second","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 0362394c-9ac9-4978-9b41-bc325464c204","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThis will work on both data model types\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 8361deb2-3baa-4031-927f-e3c034bd7eb9","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tmath_copy = deepcopy(math)\n\tupdate_data!(math_copy, math_result[\"solution\"])\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ba259614-bead-40c4-927f-5f8ad3eb726a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"first(math_copy[\"bus\"]).second","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ dee28964-882f-4bad-9368-762f7af99562","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Exporting and Importing PMD Data Structures","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"It is possible to export our data structures to JSON, but you may have noticed several items that are not strictly JSON compatible, like Matrix, Enum, Symbol, Inf and NaN. Because most users default to JSON.print to export data structures, we have chosen to create a data model correction helper function that will attempt to fix data structures. For straightforward cases this has shown to work well, but may be fragile in its implementation.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 2f10d9b4-c237-4305-ac05-ffe569d70436","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tio = PipeBuffer()\n\tJSON.print(io, eng, 2)\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 26e7b26e-3619-40d0-aef8-0a070af98cbb","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"raw_from_json = JSON.parse(io)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 0c39a147-8587-457e-9a2b-ea38e2bf160a","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"begin\n\tparsed_from_json = deepcopy(raw_from_json)\n\tcorrect_json_import!(parsed_from_json)\n\tparsed_from_json\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ ec94eeb4-e425-452d-8e46-6ed7f876f463","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nThis can be easily achieved via `parse_file`:\n","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"julia parsefile(jsonfile)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 292e7528-cf57-4429-995a-571d567b8560","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Experimental Network Plots with PowerModelsAnalytics","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"It is possible to quickly create some plots of power networks using `PowerModelsAnalytics.plot_network!`.\n\nOriginally we created the plotting functionality in PowerModelsAnalytics primarily for debugging purposes, to look for topological errors, check for errors with load shedding, etc., and had based it on Plots.jl, which is a very popular Julia plotting tool. Unfortunately, plotting graph networks with a lot of nodes is very slow, and we discovered Vega.jl, which is a interface to the Vega visualization grammar.\n\nFor the most part, simple plots can be easily achieved with `plot_network!` (best used for Pluto notebooks to produce the plot in the notebook), or `plot_network`, which will return the LightGraphs-based graph representation of the network.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 687863f6-1aed-4039-b54e-d9d3a683631b","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"plot_network!(eng_copy)","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ b448fae8-56d4-40a0-95fa-d502f8a37a40","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"\nWhile plots won't be publication ready, with some knowledge of Vega, and some tweaking of the plot specifications, it should be possible to produce some nice outputs.\n\nUnder the hood, PMA uses Networkx to automatically layout the graph, but `use_coordinates=true` can be used to use any buscoords included in the data set.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 53f3cd12-05a9-4495-937a-781ce3907174","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"try\n\tplot_network!(eng_copy; use_coordinates=true)\ncatch\n\tmd\"**no buscoords exist for this case_file**\"\nend","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ 232a4bde-3f85-46c4-9e57-ffc64ecafbb6","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"md\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"Development","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"PowerModelsDistribution is subject to active, ongoing development, and is used internally by various high-profile projects, making its improvement and maintanence high priority.\n\nIf you find bugs while using PMD, we encourage you to submit bug reports on our [GitHub Issues](https://github.com/lanl-ansi/PowerModelsDistribution.jl/issues).\n\nIf you have questions about using PMD, [JuliaLang Discourse](https://discourse.julialang.org/) is a great place, which several of our developers regularly watch, particularly in the [Optimization Category](https://discourse.julialang.org/c/domain/opt/13).\n\nWe always welcome [Pull Requests](https://github.com/lanl-ansi/PowerModelsDistribution.jl/pulls) for new features and bug fixes as well.\n\"\"\"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"╔═╡ Cell order: ╟─c9a5c344-961b-11eb-0458-a746afcb280c ╟─b5928052-9616-11eb-14b3-79770b9929df ╟─62c14531-357a-4669-90cd-2a186df123eb ╠═9787aa73-8ffc-4634-bf0f-b70eee0bf377 ╟─b953c65d-515f-4334-a4d4-b27af1b0e29a ╠═a1989876-9301-11eb-0783-83b3aa7abfbc ╟─749d062d-72a1-4160-afcf-1cdc27d85c84 ╟─7e032130-c565-42d1-93ed-87955e1f2334 ╟─67029534-961a-11eb-2b06-210f67607d20 ╟─0b9598a8-9618-11eb-1947-4f98dac7129f ╠═6d94d2cd-069b-4e48-84da-ba87c554297b ╟─480f6685-56a0-4fdd-a975-33cdb3459ef5 ╠═b73eedaf-5809-43b9-90e0-69350d6ee2c4 ╟─4243344a-9cdf-46db-96ee-633b0f5e8a71 ╟─e95a9fba-b6ad-4339-8219-de4ca04536f4 ╠═23a3a107-2fc4-4af1-8eb6-e6a0dc29ddbe ╟─ba7c38a6-34f5-40d3-998e-7ea520001454 ╟─47fdba38-56ae-4a68-88a0-26af4e0a907a ╟─4628c72d-32a2-46bb-929e-153f3851f9c0 ╟─ca82db50-ff48-411c-bc97-44f5f33c4ddf ╠═4f45cac5-3b27-4771-994b-3a9d81ed61c9 ╟─fb08875c-1d9e-4744-bec2-7b7cad4320f6 ╠═5cf93941-3f88-4bd1-98c4-77b924ddb385 ╟─8a8222c3-ef01-4d18-97ff-fa43ad89cfcc ╠═38dfd21e-f156-45be-b9b3-f6eb5008723e ╟─0f73a5be-7ee3-4936-95ed-ebb1b913cf4e ╠═254a4ed3-263b-4084-b9af-c97eac2d4ab7 ╟─03e27a4b-cf53-4e92-9e88-d07015937b3e ╟─3e74097f-55ce-4143-938d-543a59581a72 ╠═2c11f944-ff4c-478b-9b6c-fba54bfc0afd ╟─427bebe9-5a0d-41b0-ace6-6622400e136c ╟─284a471c-5b97-4753-b5be-8896dc096657 ╟─20c563f0-9304-11eb-16b4-6720b073e911 ╠═e70c3f4a-9302-11eb-1176-0925031bccc0 ╟─9a65d284-8558-4ddf-9139-e88e3a3625d9 ╟─7edf07c2-208d-47d4-914e-08c09bdfd7f6 ╟─36f01f08-0c19-4a28-a2eb-11a11dec9897 ╟─a3e10f7e-c193-4c02-9fef-e23bde112350 ╟─1cf59273-3f50-41bd-b93c-c5cf5f3cd124 ╟─7e36b7b8-198c-4b9e-8b62-d1b481f09eeb ╠═b717dab6-30fd-4e4b-b6f8-29ffcff80131 ╠═def53588-f511-4dda-8aa9-941d1aa994f7 ╟─f1866650-ca90-4f4b-81ef-1cc3202dc240 ╠═27ec55f0-77c2-4cec-b505-976fd86f1004 ╠═0ef86c0a-6d65-44a3-9804-676d4cc904c3 ╟─e45adf3e-5b84-4d14-9840-40ba2fbc1573 ╟─905bfb0a-2fb5-4b0c-bc62-49bd2888ad30 ╟─3d468a08-c62c-42cb-a096-8ba382bb91e5 ╠═114f8b4c-3296-428a-bf72-f5efe6b21b47 ╟─0d510b81-6f58-4790-be85-82c9b215322d ╠═cf3614bc-4c35-4b4d-9ec9-f43307a04c48 ╟─6335835e-2b5e-45a0-a5f6-4d97328694bd ╠═bea3a93e-a827-473a-9e19-348ad85dfa25 ╟─86d66ed7-89b1-461e-9487-0e190e6fd02e ╠═ce39193d-833b-40aa-b532-f9db22f03652 ╠═cb632c77-5c8b-4fbb-a867-127a22ce54ad ╠═b3bd6e16-28dc-44b7-b8ad-1478cdfefecc ╟─a0e6612f-516e-4be4-b3ae-00c612b981e2 ╠═77899c35-2609-4aef-bcd0-178076237d1d ╠═eb3d6861-0d91-4ae1-9580-7b3182cefef1 ╟─1b6fd52f-0cdf-4f4f-aa38-31cd8aa9ca7d ╟─e39e89d8-7b3d-4c2d-bbe3-8de202e91c5f ╠═493d1dfd-719c-4f03-b660-6b0e9e50a222 ╟─b6700c39-8dff-4bcb-b6fa-c67b2ddf5163 ╠═f0cb5faf-0471-4651-9d09-61fe6e5e0fb5 ╟─89f6282d-9898-4547-a121-028fcdf4f876 ╠═7303e40a-56f8-4035-8537-e2eed7c16b8b ╟─c3dcee8a-edf1-43bb-8733-f2798b29d57a ╠═d7522533-43b9-4b3c-a8e5-1aa4f39700bb ╟─f4fb1464-8d33-4265-ab40-8fb72d533466 ╠═213e9ea4-c800-47bc-a020-4eacc334e4fc ╟─e32b7e5e-1d99-482f-b406-460a18cde912 ╠═6b7e5199-61ed-40b0-a658-1a490298dc6d ╟─fb48ddde-128a-4a32-ab5f-084561108539 ╠═92fd9826-17a4-44e2-ae8b-8d96d6f21130 ╟─a7037bcd-e65d-40d4-8070-7fd73811ffad ╠═53e1237b-c380-4506-9924-8b7298d0b38a ╟─60485fa1-7b4d-4be1-a0c4-50b45a840a66 ╠═8e2620f3-894f-43ff-9704-637225a6dda3 ╟─516bc915-946d-4216-b5d0-b0bde5db6546 ╠═87bf0ddd-5678-4aea-9024-26c0a2db7521 ╟─f9fc4c70-f091-4ecd-ac70-c1dfcd8a6f93 ╠═33dd7091-5576-4375-b5d9-d9a738656ddb ╟─1b18e8ce-f403-4cb6-b833-083e8b9ef5bb ╠═5369925c-3e0f-43ca-a4d8-c801a90653ff ╟─51af76d7-2c62-422d-98d1-b199aba84263 ╠═12ed532a-164c-4a92-a7d1-fc4dd53c3c57 ╠═3207f33b-00e5-4691-a9c9-9461c974b3b0 ╠═8eb99a9b-ee92-4aad-bbfc-c9242dc916cb ╠═f70780ef-5ad1-4f69-bb2e-41de737b1bef ╟─ab146273-0cf6-4815-b996-dc2e8fc185db ╟─3f03084d-f8cc-424e-99a6-78b39ece17ef ╠═19e88e22-44e1-4139-bb5b-1247a271e34a ╟─7af68b51-a1b3-4ed8-95bc-43b2523c298c ╠═3d769b34-b327-4304-af0a-1b995a4d6e4c ╟─9bb9cbf5-67ef-487b-88a9-830f15378537 ╠═4bbc5205-4a3e-4e3d-88d6-219195ad8a0f ╟─ba8e830f-3c3b-45bc-be25-c440cc736a02 ╠═ea462d05-6325-44b3-84fc-bf34e032bb01 ╟─565385e3-ccb4-4ac7-a0a5-12c2744ceed5 ╠═fb05c680-d4ba-46a6-a696-7536aaa0dd57 ╟─5cd2d702-f5fa-44f3-9739-8eb75b0b6472 ╠═85d52ceb-2b4f-4c22-880a-290c1a5737a1 ╟─20f6dfed-5d1a-481c-92f4-440de0f2abca ╠═ff6dfa9a-d55e-4bbe-bf41-357a417784a5 ╟─74a403df-0f94-4a1a-af69-cd8dc5bef430 ╠═28f75060-d0be-47f2-bea9-377d5df89cf6 ╟─663e32f5-4b2e-4255-9def-e1c7d383c36d ╠═d3e6486c-4133-404b-91c1-7ac18ec8388f ╟─8c34cd7f-52c4-440f-a226-afc27bf24799 ╠═3562dcc2-b6d7-4bfa-bae7-7a5e992cb422 ╠═805b06be-7ed9-4330-9f1e-a584c4508862 ╟─e56a2563-45c7-40fd-80ad-b86d7e1c1e44 ╟─49808060-ad86-491e-aed2-c69f203d4a0e ╠═59abd602-30de-40af-bce5-7800d11a7108 ╟─f40614c0-5aac-491b-bf5b-8aa9d328f640 ╠═40e60c21-76fe-44ce-9a33-988030e8d863 ╠═09f7c681-9654-466d-a1cb-e09eebad62fd ╟─0362394c-9ac9-4978-9b41-bc325464c204 ╠═8361deb2-3baa-4031-927f-e3c034bd7eb9 ╠═ba259614-bead-40c4-927f-5f8ad3eb726a ╟─dee28964-882f-4bad-9368-762f7af99562 ╠═2f10d9b4-c237-4305-ac05-ffe569d70436 ╠═26e7b26e-3619-40d0-aef8-0a070af98cbb ╠═0c39a147-8587-457e-9a2b-ea38e2bf160a ╟─ec94eeb4-e425-452d-8e46-6ed7f876f463 ╟─292e7528-cf57-4429-995a-571d567b8560 ╠═687863f6-1aed-4039-b54e-d9d3a683631b ╟─b448fae8-56d4-40a0-95fa-d502f8a37a40 ╠═53f3cd12-05a9-4495-937a-781ce3907174 ╟─232a4bde-3f85-46c4-9e57-ffc64ecafbb6","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"","category":"page"},{"location":"beginners_guide/","page":"Beginners Guide","title":"Beginners Guide","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/#PowerModelsDistribution.jl-Library","page":"Modeling Components","title":"PowerModelsDistribution.jl Library","text":"","category":"section"},{"location":"library/","page":"Modeling Components","title":"Modeling Components","text":"Modules = [PowerModelsDistribution]","category":"page"},{"location":"library/#PowerModelsDistribution.AbstractUBFModels","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUBFModels","text":"Collection of Unbalanced Branch Flow Models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCUBFModels","page":"Modeling Components","title":"PowerModelsDistribution.SOCUBFModels","text":"Collection of Second Order Cone Models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution._1to1_maps","page":"Modeling Components","title":"PowerModelsDistribution._1to1_maps","text":"items that are mapped one-to-one from engineering to math models\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._array_delimiters","page":"Modeling Components","title":"PowerModelsDistribution._array_delimiters","text":"different acceptable delimiters for arrays\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._conductor_matrix","page":"Modeling Components","title":"PowerModelsDistribution._conductor_matrix","text":"field names that should become multi-conductor matrix not arrays\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._conductorless","page":"Modeling Components","title":"PowerModelsDistribution._conductorless","text":"field names that should not be multi-conductor values\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dimensionalize_math","page":"Modeling Components","title":"PowerModelsDistribution._dimensionalize_math","text":"lists of scaling factors and what they apply to\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._double_operators","page":"Modeling Components","title":"PowerModelsDistribution._double_operators","text":"two number operators for reverse polish notation\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss2pmd_load_model","page":"Modeling Components","title":"PowerModelsDistribution._dss2pmd_load_model","text":"dss to pmd load model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_control_objects","page":"Modeling Components","title":"PowerModelsDistribution._dss_control_objects","text":"all objects that define controls\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_data_objects","page":"Modeling Components","title":"PowerModelsDistribution._dss_data_objects","text":"all data holding objects\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_edge_objects","page":"Modeling Components","title":"PowerModelsDistribution._dss_edge_objects","text":"all edge types that can help define buses\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_monitor_objects","page":"Modeling Components","title":"PowerModelsDistribution._dss_monitor_objects","text":"all objects that provide montoring\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_node_objects","page":"Modeling Components","title":"PowerModelsDistribution._dss_node_objects","text":"all node types that can help define buses\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_parameter_data_types","page":"Modeling Components","title":"PowerModelsDistribution._dss_parameter_data_types","text":"Returns a Dict{String,Type} for the desired component comp, giving all of the expected data types\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dss_supported_components","page":"Modeling Components","title":"PowerModelsDistribution._dss_supported_components","text":"components currently supported for automatic data type parsing\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._dtype_regex","page":"Modeling Components","title":"PowerModelsDistribution._dtype_regex","text":"Regexes for determining data types\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._eng_edge_elements","page":"Modeling Components","title":"PowerModelsDistribution._eng_edge_elements","text":"list of edge type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._eng_model_checks","page":"Modeling Components","title":"PowerModelsDistribution._eng_model_checks","text":"data check functions for the engineering data model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._eng_model_dtypes","page":"Modeling Components","title":"PowerModelsDistribution._eng_model_dtypes","text":"Data types of accepted fields in the engineering data model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._eng_model_req_fields","page":"Modeling Components","title":"PowerModelsDistribution._eng_model_req_fields","text":"required fields in the engineering data model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._eng_node_elements","page":"Modeling Components","title":"PowerModelsDistribution._eng_node_elements","text":"list of nodal type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._like_exclusions","page":"Modeling Components","title":"PowerModelsDistribution._like_exclusions","text":"properties that should be excluded from being overwritten during the application of like\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._math_dispatchable_elements","page":"Modeling Components","title":"PowerModelsDistribution._math_dispatchable_elements","text":"list of math asset types that are dispatchable\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._math_edge_elements","page":"Modeling Components","title":"PowerModelsDistribution._math_edge_elements","text":"list of edge type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._math_node_elements","page":"Modeling Components","title":"PowerModelsDistribution._math_node_elements","text":"list of nodal type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._pmd_math_global_keys","page":"Modeling Components","title":"PowerModelsDistribution._pmd_math_global_keys","text":"list of multinetwork keys that belong at the root level\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution._single_operators","page":"Modeling Components","title":"PowerModelsDistribution._single_operators","text":"single number operators in reverse polish notation\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution.pmd_eng_asset_types","page":"Modeling Components","title":"PowerModelsDistribution.pmd_eng_asset_types","text":"list of all eng asset types\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution.pmd_math_asset_types","page":"Modeling Components","title":"PowerModelsDistribution.pmd_math_asset_types","text":"list of all math asset types\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution.pmd_math_component_status","page":"Modeling Components","title":"PowerModelsDistribution.pmd_math_component_status","text":"maps component types to status parameters\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution.pmd_math_component_status_inactive","page":"Modeling Components","title":"PowerModelsDistribution.pmd_math_component_status_inactive","text":"maps component types to inactive status values\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsDistribution.ACPUPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.ACPUPowerModel","text":"AC power flow Model with polar bus voltage variables. The seminal reference of AC OPF:\n\n@article{carpentier1962contribution,\n  title={Contribution to the economic dispatch problem},\n  author={Carpentier, J},\n  journal={Bulletin de la Societe Francoise des Electriciens},\n  volume={3},\n  number={8},\n  pages={431--447},\n  year={1962}\n}\n\nHistory and discussion:\n\n@techreport{Cain2012,\n  author = {Cain, Mary B and {O' Neill}, Richard P and Castillo, Anya},\n  title = {{History of optimal power flow and Models}},\n  year = {2012}\n  pages = {1--36},\n  url = {https://www.ferc.gov/industries/electric/indus-act/market-planning/opf-papers/acopf-1-history-Model-testing.pdf}\n}\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.ACRUPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.ACRUPowerModel","text":"AC power flow Model with rectangular bus voltage variables.\n\n@techreport{Cain2012,\n  author = {Cain, Mary B and {O' Neill}, Richard P and Castillo, Anya},\n  pages = {1--36},\n  title = {{History of optimal power flow and Models}},\n  url = {https://www.ferc.gov/industries/electric/indus-act/market-planning/opf-papers/acopf-1-history-Model-testing.pdf}\n  year = {2012}\n}\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractConicUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractConicUBFModel","text":"Base Abstract Conic Unbalanced Branch Flow Model\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractLPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractLPUBFModel","text":"Abstract form for linear unbalanced power flow models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractNLPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractNLPUBFModel","text":"Base Abstract NLP Unbalanced Branch Flow Model\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUBFAModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUBFAModel","text":"for variants of branch flow models that target LP solvers\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUBFConicModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUBFConicModel","text":"for variants of branch flow models that target conic solvers\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUBFModel","text":"for branch flow models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUBFQPModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUBFQPModel","text":"for variants of branch flow models that target QP or NLP solvers\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUnbalancedACPModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUnbalancedACPModel","text":"\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUnbalancedACRModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUnbalancedACRModel","text":"\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUnbalancedActivePowerModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUnbalancedActivePowerModel","text":"active power only models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUnbalancedConicModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUnbalancedConicModel","text":"variants that target conic solvers\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUnbalancedIVRModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUnbalancedIVRModel","text":"\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.AbstractUnbalancedPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.AbstractUnbalancedPowerModel","text":"root of the power formulation type hierarchy\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.ConnConfig","page":"Modeling Components","title":"PowerModelsDistribution.ConnConfig","text":"Configurations\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.ControlMode","page":"Modeling Components","title":"PowerModelsDistribution.ControlMode","text":"Generator, Solar, Storage, Wind Control Modes\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.DCPUPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.DCPUPowerModel","text":"Linearized 'DC' power flow Model with polar voltage variables. This model is a basic linear active-power-only approximation, which uses branch susceptance values br_b = -br_x / (br_x^2 + br_x^2) for determining the network phase angles.  Furthermore, transformer parameters such as tap ratios and phase shifts are not considered as part of this model. It is important to note that it is also common for active-power-only approximations to use 1/br_x for determining the network phase angles, instead of the br_b value that is used here.  Small discrepancies in solutions should be expected when comparing active-power-only approximations across multiple tools.\n\n@ARTICLE{4956966,\n  author={B. Stott and J. Jardim and O. Alsac},\n  journal={IEEE Transactions on Power Systems},\n  title={DC Power Flow Revisited},\n  year={2009},\n  month={Aug},\n  volume={24},\n  number={3},\n  pages={1290-1300},\n  doi={10.1109/TPWRS.2009.2021235},\n  ISSN={0885-8950}\n}\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.DataModel","page":"Modeling Components","title":"PowerModelsDistribution.DataModel","text":"Supported data model types\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.Dispatchable","page":"Modeling Components","title":"PowerModelsDistribution.Dispatchable","text":"Dispatchable\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.IVRUPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.IVRUPowerModel","text":"Current voltage formulation of AC OPF. The formulation uses rectangular coordinates for both current and voltage.  Note that, even though Kirchhoff's circuit laws are linear in current and voltage, this formulation is nonconvex due to constants power loads/generators and apparent power limits.\n\n@techreport{ONeill2012,\n    author = {{O' Neill}, Richard P and Castillo, Anya and Cain, Mary B},\n    pages = {1--18},\n    title = {{The IV formulation and linear approximations of the ac optimal power flow problem}},\n    year = {2012}\n}\n\nApplicable to problem formulations with _iv in the name.\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.KCLMXModels","page":"Modeling Components","title":"PowerModelsDistribution.KCLMXModels","text":"Collection of Semidefinite Models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.LPUBFDiagModel","page":"Modeling Components","title":"PowerModelsDistribution.LPUBFDiagModel","text":"LinDist3Flow per Arnold et al. (2016), using vector variables for power, voltage and current\n\nD. B. Arnold, M. Sankur, R. Dobbe, K. Brady, D. S. Callaway and A. Von Meier, \"Optimal dispatch of reactive power for voltage regulation and balancing in unbalanced distribution systems,\" 2016 IEEE Power and Energy Society General Meeting (PESGM), Boston, MA, 2016, pp. 1-5, doi: 10.1109/PESGM.2016.7741261.\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.LPUBFDiagPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.LPUBFDiagPowerModel","text":"default LP unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.LoadModel","page":"Modeling Components","title":"PowerModelsDistribution.LoadModel","text":"Load Models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.NFAUPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.NFAUPowerModel","text":"The an active power only network flow approximation, also known as the transportation model.\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFKCLMXModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFKCLMXModel","text":"SDP BFM with KCL as matrix equation, Geth 2020 (under review)\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFKCLMXPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFKCLMXPowerModel","text":"default SDP unbalanced DistFlow with matrix KCL constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFModel","text":"SDP BFM per Gan and Low 2014, PSCC\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SDPUBFPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SDPUBFPowerModel","text":"default SDP unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCConicUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCConicUBFModel","text":"SOC relaxation of SDPUBFModel per Kim, Kojima, & Yamashita 2003, cast as a SOC\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCConicUBFPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCConicUBFPowerModel","text":"default SOC unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCNLPUBFModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCNLPUBFModel","text":"SOC relaxation of SDPUBFModel per Kim, Kojima, & Yamashita 2003, cast as an QCP\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SOCNLPUBFPowerModel","page":"Modeling Components","title":"PowerModelsDistribution.SOCNLPUBFPowerModel","text":"default SOC unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.ShuntModel","page":"Modeling Components","title":"PowerModelsDistribution.ShuntModel","text":"Shunt Models\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.Status","page":"Modeling Components","title":"PowerModelsDistribution.Status","text":"Status\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.SwitchState","page":"Modeling Components","title":"PowerModelsDistribution.SwitchState","text":"Switch States\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsDistribution.Model","page":"Modeling Components","title":"PowerModelsDistribution.Model","text":"Instantiates a PowerModelsDistribution data model\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._add_component!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", AbstractString, Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._add_component!","text":"Adds a component of type obj_type_name with properties given by object to the existing data_dss structure. If a component of the same type has already been added to data_dss, the new component is appeneded to the existing array of components of that type, otherwise a new array is created.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._add_eng_obj!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", String, Any, Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._add_eng_obj!","text":"add engineering data object to engineering data model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._add_gen_cost_model!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._add_gen_cost_model!","text":"convert cost model names\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._add_property-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", SubString{String}, Any}","page":"Modeling Components","title":"PowerModelsDistribution._add_property","text":"Adds a property to an existing component properties dictionary object given the key and value of the property. If a property of the same name already exists inside object, the original value is converted to an array, and the new value is appended to the end.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._add_unused_kwargs!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._add_unused_kwargs!","text":"adds kwargs that were specified but unused by the required defaults to the component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._admittance_conversion-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Dict{String, var\"#s3002\"} where var\"#s3002\", String}","page":"Modeling Components","title":"PowerModelsDistribution._admittance_conversion","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_filter!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Vector{String}, Int64, Union{BitArray, Array}}","page":"Modeling Components","title":"PowerModelsDistribution._apply_filter!","text":"Filters out values of a vector or matrix for certain properties (transformer winding variant)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_filter!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Vector{String}, Union{BitArray, Array}}","page":"Modeling Components","title":"PowerModelsDistribution._apply_filter!","text":"Filters out values of a vector or matrix for certain properties\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_like!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\", String}","page":"Modeling Components","title":"PowerModelsDistribution._apply_like!","text":"applies like to component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_linecode!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\", Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution._apply_linecode!","text":"applies a linecode to a line in preparation for converting to mathematical model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_ordered_properties-Tuple{Dict{String, var\"#s2994\"} where var\"#s2994\", Dict{String, var\"#s2993\"} where var\"#s2993\"}","page":"Modeling Components","title":"PowerModelsDistribution._apply_ordered_properties","text":"apply properties in the order that they are given\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._apply_xfmrcode!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._apply_xfmrcode!","text":"applies a xfmrcode to a transformer in preparation for converting to mathematical model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._assign_property!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", AbstractString, AbstractString, AbstractString, Any}","page":"Modeling Components","title":"PowerModelsDistribution._assign_property!","text":"Assigns a property with name property_name and value property_value to the component of type obj_type named obj_name in data_dss.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._bank_transformers!-Tuple{Dict{String, var\"#s2985\"} where var\"#s2985\"}","page":"Modeling Components","title":"PowerModelsDistribution._bank_transformers!","text":"Combines transformers with 'bank' keyword into a single transformer\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._barrel_roll-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution._barrel_roll","text":"shifts a vector by shift spots to the left\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._biggest_generator-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._biggest_generator","text":"find the largest active generator in a collection of generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_loss_model!-Tuple{Dict{String, var\"#s2989\"} where var\"#s2989\", Any, Vector{String}, Vector{Float64}, Dict{Tuple{Int64, Int64}, ComplexF64}, ComplexF64}","page":"Modeling Components","title":"PowerModelsDistribution._build_loss_model!","text":"loss model builder for transformer decomposition\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_mn_opb-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_mn_opb","text":"Constructor for Optimal Power Balance\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_osw-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_osw","text":"constructor for OSW in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_osw-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_osw","text":"Constructor for Optimal Switching\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_osw-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_osw","text":"constructor for branch flow osw\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_osw_mi-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_osw_mi","text":"Constructor for Optimal Switching\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_mc_osw_mi-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution._build_mc_osw_mi","text":"constructor for mixed-integer branch flow osw\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._build_time_series_reference!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\", Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\", String, String, String}","page":"Modeling Components","title":"PowerModelsDistribution._build_time_series_reference!","text":"helper function to properly reference time series variables from opendss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._bus_type_conversion-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Dict{String, var\"#s3002\"} where var\"#s3002\", String}","page":"Modeling Components","title":"PowerModelsDistribution._bus_type_conversion","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_current_max-Tuple{Dict{String, var\"#s113\"} where var\"#s113\", Dict{String, var\"#s112\"} where var\"#s112\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_current_max","text":"Returns a total (shunt+series) current magnitude bound for the from and to side of a branch. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_current_max_frto-Tuple{Dict{String, var\"#s112\"} where var\"#s112\", Dict{String, var\"#s111\"} where var\"#s111\", Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_current_max_frto","text":"Returns a total (shunt+series) current magnitude bound for the from and to side of a branch. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_power_max-Tuple{Dict{String, var\"#s113\"} where var\"#s113\", Dict{String, var\"#s112\"} where var\"#s112\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_power_max","text":"Returns a total (shunt+series) power magnitude bound for the from and to side of a branch. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_power_max_frto-Tuple{Dict{String, var\"#s112\"} where var\"#s112\", Dict{String, var\"#s111\"} where var\"#s111\", Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_power_max_frto","text":"Returns a total (shunt+series) power magnitude bound for the from and to side of a branch. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_branch_series_current_max-Tuple{Dict{String, var\"#s112\"} where var\"#s112\", Dict{String, var\"#s111\"} where var\"#s111\", Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_branch_series_current_max","text":"Returns a valid series current magnitude bound for a branch.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_bus_vm_ll_bounds-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_bus_vm_ll_bounds","text":"Returns bounds in line-to-line bounds on the voltage magnitude. If these are not part of the problem specification, then a valid upper bound is implied by the line-to-neutral bounds, but a lower bound (greater than zero) is not. Therefore, a default lower bound is then used, specified by the keyword argument vdmin_eps. The returned bounds are for the pairs 1->2, 2->3, 3->1\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_comp_lines-Tuple{Dict{String, var\"#s764\"} where var\"#s764\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_comp_lines","text":"compute lines in m and b from from pwl cost models\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_connected_components_eng-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._calc_connected_components_eng","text":"computes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_connected_components_math-Tuple{Dict{String, var\"#s102\"} where var\"#s102\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_connected_components_math","text":"computes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_gen_current_max-Tuple{Dict{String, var\"#s113\"} where var\"#s113\", Dict{String, var\"#s112\"} where var\"#s112\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_gen_current_max","text":"Returns a current magnitude bound for the generators.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_ground_shunt_admittance_matrix-Union{Tuple{T}, Tuple{Vector{Int64}, Matrix{T}, Int64}} where T<:Number","page":"Modeling Components","title":"PowerModelsDistribution._calc_ground_shunt_admittance_matrix","text":"Given a set of terminals 'cnds' with associated shunt addmittance 'Y', this method will calculate the reduced addmittance matrix if terminal 'ground' is grounded.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_current_magnitude_bounds-Tuple{Dict, Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_current_magnitude_bounds","text":"Returns magnitude bounds for the current going through the load.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_current_max-Tuple{Dict, Dict}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_current_max","text":"Returns a magnitude bound for the current going through the load.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_pq_bounds-Tuple{Dict{String, var\"#s111\"} where var\"#s111\", Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_pq_bounds","text":"Calculates lower and upper bounds for the loads themselves (not the power withdrawn at the bus).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_load_vbounds-Tuple{Dict{String, var\"#s112\"} where var\"#s112\", Dict{String, var\"#s111\"} where var\"#s111\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_load_vbounds","text":"Returns the voltage magnitude bounds for the individual load elements in a multiphase load. These are inferred from vmin/vmax for wye loads and from calcbusvmll_bounds for delta loads.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_max_cost_index-Tuple{Dict{String, var\"#s764\"} where var\"#s764\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_max_cost_index","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_mc_transformer_Tvi-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution._calc_mc_transformer_Tvi","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_mc_voltage_product_bounds-Tuple{AbstractUnbalancedPowerModel, Any}","page":"Modeling Components","title":"PowerModelsDistribution._calc_mc_voltage_product_bounds","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_shunt-Tuple{Vector{Int64}, Vector{Int64}, Any}","page":"Modeling Components","title":"PowerModelsDistribution._calc_shunt","text":"Given a set of addmittances 'y' connected from the conductors 'fcnds' to the conductors 'tcnds', this method will return a list of conductors 'cnd' and a matrix 'Y', which will satisfy I[cnds] = Y*V[cnds].\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_transformer_current_max_frto-Tuple{Dict{String, var\"#s112\"} where var\"#s112\", Dict{String, var\"#s111\"} where var\"#s111\", Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_transformer_current_max_frto","text":"Returns a current magnitude bound for the from and to side of a transformer. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._calc_transformer_power_ub_frto-Tuple{Dict{String, var\"#s112\"} where var\"#s112\", Dict{String, var\"#s111\"} where var\"#s111\", Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution._calc_transformer_power_ub_frto","text":"Returns a power magnitude bound for the from and to side of a transformer. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._cc_dfs-NTuple{4, Any}","page":"Modeling Components","title":"PowerModelsDistribution._cc_dfs","text":"DFS on a graph\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_branch_loops-Tuple{Dict{String, var\"#s112\"} where var\"#s112\"}","page":"Modeling Components","title":"PowerModelsDistribution._check_branch_loops","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_bus-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_bus","text":"bus data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_bus_and_terminals","page":"Modeling Components","title":"PowerModelsDistribution._check_bus_and_terminals","text":"checks bus_name exists and has terminals\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._check_configuration_infer_dim-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution._check_configuration_infer_dim","text":"checks the connection configuration and infers the dimensions of the connection (number of connected terminals)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_connectivity-Tuple{Dict{String, var\"#s100\"} where var\"#s100\"}","page":"Modeling Components","title":"PowerModelsDistribution._check_connectivity","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_connectivity-Tuple{Dict{String, var\"#s2997\"} where var\"#s2997\", Dict{String, var\"#s2996\"} where var\"#s2996\"}","page":"Modeling Components","title":"PowerModelsDistribution._check_connectivity","text":"checks connectivity of object\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_eng_component_dtypes-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", String, Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_eng_component_dtypes","text":"checks that an engineering model component has the correct data types\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_equal-Tuple{Dict{String, var\"#s2996\"} where var\"#s2996\", Dict{String, var\"#s2995\"} where var\"#s2995\"}","page":"Modeling Components","title":"PowerModelsDistribution._check_equal","text":"checks if data structures are equivalent, and if not, will enumerate the differences\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_generator-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_generator","text":"generator data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_has_keys-Tuple{Dict{String, var\"#s3000\"} where var\"#s3000\", Vector{String}}","page":"Modeling Components","title":"PowerModelsDistribution._check_has_keys","text":"checks that a component has fields\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_has_size-Tuple{Dict{String, var\"#s3000\"} where var\"#s3000\", Vector{String}, Union{Int64, Tuple}}","page":"Modeling Components","title":"PowerModelsDistribution._check_has_size","text":"check that fields has size data_size\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_line-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_line","text":"line data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_linecode-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_linecode","text":"linecode data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_load-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_load","text":"load data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_load_needs_cone-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._check_load_needs_cone","text":"Returns a Bool, indicating whether the convex hull of the voltage-dependent relationship needs a cone inclusion constraint.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_same_size-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Vector{String}}","page":"Modeling Components","title":"PowerModelsDistribution._check_same_size","text":"check that all data in fields have the same size\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_shunt-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_shunt","text":"shunt data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_shunt_capacitor-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_shunt_capacitor","text":"shunt capacitor data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_transformer-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_transformer","text":"Transformer, n-windings three-phase lossy data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_var_keys-NTuple{4, Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_var_keys","text":"checks if a sufficient number of variables exist for the given keys collection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._check_voltage_source-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._check_voltage_source","text":"voltage source data checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._clean_arrays!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Vector{String}}","page":"Modeling Components","title":"PowerModelsDistribution._clean_arrays!","text":"cleans up array properties back into strings for later conversion\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._convert_grounding-NTuple{4, Any}","page":"Modeling Components","title":"PowerModelsDistribution._convert_grounding","text":"lossy grounding to perfect grounding and shunts\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._correct_branch_directions!-Tuple{Dict{String, var\"#s112\"} where var\"#s112\"}","page":"Modeling Components","title":"PowerModelsDistribution._correct_branch_directions!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._correct_bus_types!-Tuple{Dict{String, var\"#s108\"} where var\"#s108\"}","page":"Modeling Components","title":"PowerModelsDistribution._correct_bus_types!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._correct_cost_function!-NTuple{5, Any}","page":"Modeling Components","title":"PowerModelsDistribution._correct_cost_function!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._correct_cost_functions!-Tuple{Dict{String, var\"#s112\"} where var\"#s112\"}","page":"Modeling Components","title":"PowerModelsDistribution._correct_cost_functions!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._create_capacitor","page":"Modeling Components","title":"PowerModelsDistribution._create_capacitor","text":"Creates a Dict{String,Any} containing all of the expected properties for a Capacitor. If bus2 is not specified, the capacitor will be treated as a shunt. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_circuit","page":"Modeling Components","title":"PowerModelsDistribution._create_circuit","text":"alias createcircuit to createvsource\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_generator","page":"Modeling Components","title":"PowerModelsDistribution._create_generator","text":"Creates a Dict{String,Any} containing all of the expected properties for a Generator. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_line","page":"Modeling Components","title":"PowerModelsDistribution._create_line","text":"Creates a Dict{String,Any} containing all of the properties for a Line. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_linecode","page":"Modeling Components","title":"PowerModelsDistribution._create_linecode","text":"Creates a Dict{String,Any} containing all of the properties of a Linecode. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_load","page":"Modeling Components","title":"PowerModelsDistribution._create_load","text":"Creates a Dict{String,Any} containing all of the expected properties for a Load. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_loadshape","page":"Modeling Components","title":"PowerModelsDistribution._create_loadshape","text":"Creates a Dict{String,Any} containing all expected properties for a LoadShape element. See OpenDSS documentation for valid fields and ways to specify different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_options-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution._create_options","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._create_pvsystem","page":"Modeling Components","title":"PowerModelsDistribution._create_pvsystem","text":"Creates a Dict{String,Any} containing all of the expected properties for a PVSystem. See OpenDSS document https://github.com/tshort/OpenDSS/blob/master/Doc/OpenDSS%20PVSystem%20Model.doc for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_reactor","page":"Modeling Components","title":"PowerModelsDistribution._create_reactor","text":"Creates a Dict{String,Any} containing all of the expected properties for a Reactor. If bus2 is not specified Reactor is treated like a shunt. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_spectrum","page":"Modeling Components","title":"PowerModelsDistribution._create_spectrum","text":"Creates a Dict{String,Any} containing all expected properties for a Spectrum object. See OpenDSS documentation for valid fields and ways to specify different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_storage","page":"Modeling Components","title":"PowerModelsDistribution._create_storage","text":"Creates a Dict{String,Any} containing all expected properties for a storage element. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_transformer","page":"Modeling Components","title":"PowerModelsDistribution._create_transformer","text":"Creates a Dict{String,Any} containing all of the expected properties for a Transformer. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_vsource","page":"Modeling Components","title":"PowerModelsDistribution._create_vsource","text":"Creates a Dict{String,Any} containing all of the expected properties for a Voltage Source. If bus2 is not specified, VSource will be treated like a generator. Mostly used as source which represents the circuit. See OpenDSS documentation for valid fields and ways to specify the different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_xfmrcode","page":"Modeling Components","title":"PowerModelsDistribution._create_xfmrcode","text":"Transformer codes contain all of the same properties as a transformer except bus, buses, bank, xfmrcode\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._create_xycurve","page":"Modeling Components","title":"PowerModelsDistribution._create_xycurve","text":"Creates a Dict{String,Any} containing all expected properties for a XYCurve object. See OpenDSS documentation for valid fields and ways to specify different properties.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._discover_buses-Tuple{Dict{String, var\"#s2995\"} where var\"#s2995\"}","page":"Modeling Components","title":"PowerModelsDistribution._discover_buses","text":"Discovers all of the buses (not separately defined in OpenDSS), from 'lines'\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._discover_phases_neutral!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._discover_phases_neutral!","text":"discovers all phases and neutrals in the network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._discover_terminals!-Tuple{Dict{String, var\"#s2988\"} where var\"#s2988\"}","page":"Modeling Components","title":"PowerModelsDistribution._discover_terminals!","text":"discovers all terminals in the network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_bus!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_bus!","text":"Adds nodes as buses to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_buscoords!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_buscoords!","text":"Parses buscoords lon,lat into their respective buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_capacitor!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\", Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_capacitor!","text":"Adds capacitors to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_generator!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_generator!","text":"Adds generators to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_line!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\", Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_line!","text":"Adds lines to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_linecode!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\", Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_linecode!","text":"Adds lines to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_load!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_load!","text":"Adds loads to data_eng from data_dss\n\nConstant can still be scaled by other settings, fixed cannot Note that in the current feature set, fixed therefore equals constant\n\n1: Constant P and Q, default 2: Constant Z 3: Constant P and quadratic Q 4: Exponential 5: Constant I 6: Constant P and fixed Q\n\n7: Constant P and quadratic Q (i.e., fixed reactance)\n\n8: ZIP\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_loadshape!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_loadshape!","text":"Adds loadshapes to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_pvsystem!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_pvsystem!","text":"Adds pvsystems to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_reactor!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\", Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_reactor!","text":"Adds shunt reactors to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_storage!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_storage!","text":"Adds storage to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_transformer!-Tuple{Dict{String, var\"#s2984\"} where var\"#s2984\", Dict{String, var\"#s2983\"} where var\"#s2983\", Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_transformer!","text":"Adds transformers to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._dss2eng_vsource!","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_vsource!","text":"Adds vsources to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._dss2eng_xfmrcode!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\", Bool}","page":"Modeling Components","title":"PowerModelsDistribution._dss2eng_xfmrcode!","text":"Adds transformers to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._find_neutrals-Tuple{Dict{String, var\"#s2973\"} where var\"#s2973\"}","page":"Modeling Components","title":"PowerModelsDistribution._find_neutrals","text":"Discovers all neutrals in the network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._find_ref_buses-Tuple{AbstractUnbalancedPowerModel, Any}","page":"Modeling Components","title":"PowerModelsDistribution._find_ref_buses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._fix_arrays!-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._fix_arrays!","text":"helper function to fix matrices (from vector of vectors) and vector dtypes\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._fix_dtypes!-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution._fix_dtypes!","text":"recursive function to fix data types from data imported from json\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._fix_enums!-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._fix_enums!","text":"helper function to convert stringified enums\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._fix_nulls!-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._fix_nulls!","text":"helper function to fix null values from json (usually Inf or NaN)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_complete_conductor_set-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution._get_complete_conductor_set","text":"finds maximal set of ungrounded phases\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_conductor_indicator-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution._get_conductor_indicator","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_conductors_ordered-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._get_conductors_ordered","text":"Returns an ordered list of defined conductors. If ground=false, will omit any 0\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_delta_transformation_matrix-Tuple{Int64}","page":"Modeling Components","title":"PowerModelsDistribution._get_delta_transformation_matrix","text":"creates a delta transformation matrix\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_ground!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\"}","page":"Modeling Components","title":"PowerModelsDistribution._get_ground!","text":"gets the grounding information for a bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_ground_math!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._get_ground_math!","text":"get a grounded terminal from a bus; if not present, create one\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_idxs-Tuple{Vector{var\"#s2999\"} where var\"#s2999\", Vector{var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._get_idxs","text":"Given a vector and a list of elements to find, this method will return a list of the positions of the elements in that vector.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_ilocs-Tuple{Vector{var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._get_ilocs","text":"get locations of terminal in connections list\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_math_obj-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", String}","page":"Modeling Components","title":"PowerModelsDistribution._get_math_obj","text":"returns component from the mathematical data model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._get_new_ground-Tuple{Vector{var\"#s3073\"} where var\"#s3073\"}","page":"Modeling Components","title":"PowerModelsDistribution._get_new_ground","text":"getground helper function\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._guess_dtype-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._guess_dtype","text":"guesses the data type of a value using regex, returning Float64, Int, ComplexF64, or String (if number type cannot be determined)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._impedance_conversion-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Dict{String, var\"#s3002\"} where var\"#s3002\", String}","page":"Modeling Components","title":"PowerModelsDistribution._impedance_conversion","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._import_all!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._import_all!","text":"creates a dss dict inside object that imports all items in prop_order from dss_obj\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._init_base_components!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\"}","page":"Modeling Components","title":"PowerModelsDistribution._init_base_components!","text":"initializes the base components that are expected by powermodelsdistribution in the mathematical model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._init_lookup!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\"}","page":"Modeling Components","title":"PowerModelsDistribution._init_lookup!","text":"Initializes the lookup table\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._init_math_obj-Tuple{String, Any, Dict{String, var\"#s3072\"} where var\"#s3072\", Int64}","page":"Modeling Components","title":"PowerModelsDistribution._init_math_obj","text":"initializes the base math object of any type, and copies any one-to-one mappings\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._init_unmap_eng_obj!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", String, Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._init_unmap_eng_obj!","text":"initialization actions for unmapping\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._is_after-Tuple{Vector{String}, String, String}","page":"Modeling Components","title":"PowerModelsDistribution._is_after","text":"checks to see if property1 is after property2 in the prop_order\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._is_after_linecode-Tuple{Vector{String}, String}","page":"Modeling Components","title":"PowerModelsDistribution._is_after_linecode","text":"checks to see if a property is after linecode\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._is_after_xfmrcode-Tuple{Vector{String}, String}","page":"Modeling Components","title":"PowerModelsDistribution._is_after_xfmrcode","text":"checks to see if a property is after xfmrcode\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._is_loadshape_split-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\"}","page":"Modeling Components","title":"PowerModelsDistribution._is_loadshape_split","text":"checks if loadshape has both pmult and qmult\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_array-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_array","text":"checks if data is an opendss-style array string\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_conn-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_conn","text":"checks is a string is a connection by checking the values\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_matrix-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_matrix","text":"checks if data is an opendss-style matrix string\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._isa_rpn-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._isa_rpn","text":"detects if expr is Reverse Polish Notation expression\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._kron_reduce_branch!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Vector{String}, Vector{String}, Vector{Int64}, Int64}","page":"Modeling Components","title":"PowerModelsDistribution._kron_reduce_branch!","text":"performs kron reduction on branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._kron_reduce_branch-Tuple{Vector{Matrix{T} where T}, Vector{Matrix{T} where T}, Vector{Int64}, Int64}","page":"Modeling Components","title":"PowerModelsDistribution._kron_reduce_branch","text":"performs kron reduction on branch - helper function\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._kron_reduce_buses!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._kron_reduce_buses!","text":"transformations might have introduced buses with four-terminals; crop here\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._load_expmodel_params-Tuple{Dict, Dict}","page":"Modeling Components","title":"PowerModelsDistribution._load_expmodel_params","text":"Returns the exponential load model parameters for a load. For an exponential load it simply returns certain data model properties, whilst for constantpower, constantcurrent and constant_impedance it returns the equivalent exponential model parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_filtered_logger-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._make_filtered_logger","text":"Helper function to create the filtered logger for PMD\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_full_matrix_variable-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._make_full_matrix_variable","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_hermitian_matrix_variable-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._make_hermitian_matrix_variable","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_math_per_unit!-Tuple{Dict{String, var\"#s2972\"} where var\"#s2972\", Dict{String, var\"#s2971\"} where var\"#s2971\"}","page":"Modeling Components","title":"PowerModelsDistribution._make_math_per_unit!","text":"converts to per unit from SI\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_matrix_variable_element-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Int64, Int64}} where T","page":"Modeling Components","title":"PowerModelsDistribution._make_matrix_variable_element","text":"Sometimes we want to bound only a subset of the elements of a matrix variable. For example, an unbounded Hermitian variable usually still has a lower bound of zero on the real diagonal elements. When there is a mix of bounded and unbounded elements, the unboundedness is encoded as 'Inf' and '-Inf' in the bound parameters. This cannot be passed directlty to JuMP, because it would lead to an error in Mosek for example. Instead, this method checks whether all bounds for an element (n,m) are Inf, and if so, does not pass a bound to JuMP.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_multiconductor!-Tuple{Dict{String, var\"#s2986\"} where var\"#s2986\", Real}","page":"Modeling Components","title":"PowerModelsDistribution._make_multiconductor!","text":"Hacky helper function to transform single-conductor network data, from, e.g., matpower/psse, into multi-conductor data\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_multinetwork_eng-Tuple{Dict{String, var\"#s2971\"} where var\"#s2971\"}","page":"Modeling Components","title":"PowerModelsDistribution._make_multinetwork_eng","text":"Expands an ENGINEERING data structure into a multinetwork\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._make_multinetwork_math-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\"}","page":"Modeling Components","title":"PowerModelsDistribution._make_multinetwork_math","text":"Expands an MATHEMATICAL data structure into a multinetwork\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_conductor_ids!-Tuple{Dict{String, var\"#s2994\"} where var\"#s2994\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_conductor_ids!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math-Tuple{Dict{String, var\"#s2995\"} where var\"#s2995\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math","text":"base function for converting engineering model to mathematical model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_bus!-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\", Dict{String, var\"#s2997\"} where var\"#s2997\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_bus!","text":"converts engineering bus components into mathematical bus components\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_generator!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_generator!","text":"converts engineering generators into mathematical generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_line!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_line!","text":"converts engineering lines into mathematical branches\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_load!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_load!","text":"converts engineering load components into mathematical load components\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_shunt!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_shunt!","text":"converts engineering generic shunt components into mathematical shunt components\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_solar!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_solar!","text":"converts engineering solar components into mathematical generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_storage!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_storage!","text":"converts engineering storage into mathematical storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_switch!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_switch!","text":"converts engineering switches into mathematical switches and (if neeed) impedance branches to represent loss model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_transformer!-Tuple{Dict{String, var\"#s2996\"} where var\"#s2996\", Dict{String, var\"#s2995\"} where var\"#s2995\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_transformer!","text":"converts engineering n-winding transformers into mathematical ideal 2-winding lossless transformer branches and impedance branches to represent the loss model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_eng2math_voltage_source!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_eng2math_voltage_source!","text":"converts engineering voltage sources into mathematical generators and (if needed) impedance branches to represent the loss model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_math2eng_bus!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\", Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_math2eng_bus!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_math2eng_load!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\", Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_math2eng_load!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._map_math2eng_voltage_source!-Tuple{Dict{String, var\"#s3000\"} where var\"#s3000\", Dict{String, var\"#s2999\"} where var\"#s2999\", Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution._map_math2eng_voltage_source!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._mat2ltrivec!-Union{Tuple{Union{Matrix{T}, LinearAlgebra.Symmetric{T, S} where S<:(AbstractMatrix{var\"#s832\"} where var\"#s832\"<:T)}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._mat2ltrivec!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._mat2utrivec!-Union{Tuple{Union{Matrix{T}, LinearAlgebra.Symmetric{T, S} where S<:(AbstractMatrix{var\"#s832\"} where var\"#s832\"<:T)}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._mat2utrivec!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._mat_mult_rm_nan-Union{Tuple{T}, Tuple{Matrix{T} where T, Union{Matrix{T} where T, LinearAlgebra.Adjoint}}} where T","page":"Modeling Components","title":"PowerModelsDistribution._mat_mult_rm_nan","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._merge_dss!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._merge_dss!","text":"Merges two (partially) parsed OpenDSS files to the same dictionary dss_prime. Used in cases where files are referenced via the \"compile\" or \"redirect\" OpenDSS commands inside the originating file.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._nan2zero-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._nan2zero","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad","text":"Multiconductor adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad","text":"gen connections adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch","text":"Multiconductor adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch","text":"gen connections adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl_switch","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pad_connections!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", String, Int64, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution._pad_connections!","text":"adds conductors to connections during padding process, transformer winding variant\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pad_connections!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", String, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution._pad_connections!","text":"adds conductors to connections during padding process\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pad_properties!-Tuple{Dict{String, var\"#s3000\"} where var\"#s3000\", Vector{String}, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._pad_properties!","text":"pads properties to have the total number of conductors for the whole system (transformer winding variant)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pad_properties!-Tuple{Dict{String, var\"#s3000\"} where var\"#s3000\", Vector{String}, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._pad_properties!","text":"pads properties to have the total number of conductors for the whole system\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pad_properties_delta!-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\", Vector{String}, Vector{Int64}, Int64, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._pad_properties_delta!","text":"pads properties to have the total number of conductors for the whole system - delta connection variant\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pad_properties_delta!-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\", Vector{String}, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._pad_properties_delta!","text":"pads properties to have the total number of conductors for the whole system - delta connection variant\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_array-Tuple{Type, AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_array","text":"Parses a OpenDSS style array string data into a one dimensional array of type dtype. Array strings are capped by either brackets, single quotes, or double quotes, and elements are separated by spaces.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_binary_file-Tuple{AbstractString, Type}","page":"Modeling Components","title":"PowerModelsDistribution._parse_binary_file","text":"parses sng and dbl precision loadshape binary files\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_bus_id-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_bus_id","text":"Parses busnames as defined in OpenDSS, e.g. 'primary.1.2.3.0'\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_buscoords_file-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_buscoords_file","text":"Parses a Bus Coordinate file, in either \"dat\" or \"csv\" formats, where in \"dat\", columns are separated by spaces, and in \"csv\" by commas. File expected to contain \"bus,x,y\" on each line.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_component","page":"Modeling Components","title":"PowerModelsDistribution._parse_component","text":"Parses a component with properties into a object. If object is not defined, an empty dictionary will be used. Assumes that unnamed properties are given in order, but named properties can be given anywhere.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._parse_conn-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_conn","text":"parses connection 'conn' specification reducing to wye or delta\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_csv_file-Tuple{AbstractString, AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_csv_file","text":"parses single column load profile files\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_data_file-Tuple{AbstractString, AbstractString, Union{Nothing, Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._parse_data_file","text":"parses csv or binary loadshape files\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_dss_load_model!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Any}","page":"Modeling Components","title":"PowerModelsDistribution._parse_dss_load_model!","text":"converts dss load model to supported PowerModelsDistribution LoadModel enum\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_dss_with_dtypes!","page":"Modeling Components","title":"PowerModelsDistribution._parse_dss_with_dtypes!","text":"Parses the data in keys defined by to_parse in data_dss using types given by the default properties from the get_prop_default function.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._parse_dss_xycurve-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Any, Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution._parse_dss_xycurve","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_element_with_dtype-Tuple{Type, AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_element_with_dtype","text":"parses the raw dss values into their expected data types\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_line-Tuple{Vector{String}}","page":"Modeling Components","title":"PowerModelsDistribution._parse_line","text":"Parses an already separated line given by elements (an array) of an OpenDSS file into current_obj. If not defined, current_obj is an empty dictionary.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_loadshape!-Tuple{Dict{String, var\"#s2997\"} where var\"#s2997\"}","page":"Modeling Components","title":"PowerModelsDistribution._parse_loadshape!","text":"parses loadshape component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_matrix-Tuple{Type, AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_matrix","text":"Parses a OpenDSS style triangular matrix string data into a two dimensional array of type dtype. Matrix strings are capped by either parenthesis or brackets, rows are separated by \"|\", and columns are separated by spaces.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_mult_parameter-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_mult_parameter","text":"parses pmult and qmult entries on loadshapes\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_obj_dtypes!-Tuple{String, Dict{String, Any}, Dict{String, Type}}","page":"Modeling Components","title":"PowerModelsDistribution._parse_obj_dtypes!","text":"parses data type of properties of objects\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_properties-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_properties","text":"Parses a string of properties of a component type, character by character into an array with each element containing (if present) the property name, \"=\", and the property value.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_rpn","page":"Modeling Components","title":"PowerModelsDistribution._parse_rpn","text":"parses Reverse Polish Notation expr\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution._parse_setbusxy!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\", AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._parse_setbusxy!","text":"parses the setbusxy command\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_spectrum!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\"}","page":"Modeling Components","title":"PowerModelsDistribution._parse_spectrum!","text":"parse spectrum component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._parse_xycurve!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\"}","page":"Modeling Components","title":"PowerModelsDistribution._parse_xycurve!","text":"parse xycurve component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._pmd_metafmt-Tuple{Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._pmd_metafmt","text":"MetaFormatter for ConsoleLogger for PMD\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_branch!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_branch!","text":"per-unit conversion for branches\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_bus!-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\", Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_bus!","text":"per-unit conversion for buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_generator!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Real, Real, Real, Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_generator!","text":"per-unit conversion for generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_load!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_load!","text":"per-unit conversion for loads\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_shunt!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_shunt!","text":"per-unit conversion for shunts\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_storage!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_storage!","text":"per-unit conversion for storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_switch!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_switch!","text":"per-unit conversion for switches\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rebase_pu_transformer_2w_ideal!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Real, Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution._rebase_pu_transformer_2w_ideal!","text":"per-unit conversion for ideal 2-winding transformers\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._ref_add_connected_components!-Tuple{Dict{Symbol, var\"#s3001\"} where var\"#s3001\", Dict{String, var\"#s3000\"} where var\"#s3000\"}","page":"Modeling Components","title":"PowerModelsDistribution._ref_add_connected_components!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._register_awaiting_ground!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution._register_awaiting_ground!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._remove_pwl_cost_duplicates!-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._remove_pwl_cost_duplicates!","text":"checks that each point in the a pwl function is unqiue, simplifies the function if duplicates appear\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._replace_nan-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._replace_nan","text":"Replaces NaN values with zeros\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._rescale_cost_model!-Tuple{Dict{String, var\"#s111\"} where var\"#s111\", Real}","page":"Modeling Components","title":"PowerModelsDistribution._rescale_cost_model!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._roll-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T<:Number","page":"Modeling Components","title":"PowerModelsDistribution._roll","text":"rolls a 1d array left or right by idx\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._run_mc_mn_opb-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution._run_mc_mn_opb","text":"depreciation warning for runmcmnopb\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._run_mc_osw-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution._run_mc_osw","text":"depreciation warning for runmc_osw\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._run_mc_osw_mi-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution._run_mc_osw_mi","text":"depreciation warning for runmcoswmi\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._sc2br_impedance-Tuple{Dict{Tuple{Int64, Int64}, ComplexF64}}","page":"Modeling Components","title":"PowerModelsDistribution._sc2br_impedance","text":"Converts a set of short-circuit tests to an equivalent reactance network. Reference: R. C. Dugan, “A perspective on transformer modeling for distribution system analysis,” in 2003 IEEE Power Engineering Society General Meeting (IEEE Cat. No.03CH37491), 2003, vol. 1, pp. 114-119 Vol. 1.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._scale-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", String, Real}","page":"Modeling Components","title":"PowerModelsDistribution._scale","text":"function for applying a scale to a paramter\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._scale_props!-Tuple{Dict{String, var\"#s3072\"} where var\"#s3072\", Vector{String}, Real}","page":"Modeling Components","title":"PowerModelsDistribution._scale_props!","text":"helper function to apply a scale factor to given properties\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._simplify_cost_terms!-Tuple{Dict{String, var\"#s111\"} where var\"#s111\"}","page":"Modeling Components","title":"PowerModelsDistribution._simplify_cost_terms!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._simplify_pwl_cost!-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution._simplify_pwl_cost!","text":"checks the slope of each segment in a pwl function, simplifies the function if the slope changes is below a tolerance\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._slice_branches!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution._slice_branches!","text":"slices branches based on connected terminals\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._sol_data_model_acr!-Tuple{Dict{String, var\"#s762\"} where var\"#s762\"}","page":"Modeling Components","title":"PowerModelsDistribution._sol_data_model_acr!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._sol_data_model_w!-Tuple{Dict{String, var\"#s762\"} where var\"#s762\"}","page":"Modeling Components","title":"PowerModelsDistribution._sol_data_model_w!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._sol_polar_voltage!-Tuple{Dict{String, var\"#s762\"} where var\"#s762\"}","page":"Modeling Components","title":"PowerModelsDistribution._sol_polar_voltage!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._solve_mc_model-Tuple{Dict{String, var\"#s2995\"} where var\"#s2995\", Type, Any, Function}","page":"Modeling Components","title":"PowerModelsDistribution._solve_mc_model","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._solve_mc_osw-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution._solve_mc_osw","text":"Solve optimal switching problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._solve_mc_osw_mi-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution._solve_mc_osw_mi","text":"Solve mixed-integer optimal switching problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._solve_mn_mc_opb-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution._solve_mn_mc_opb","text":"solve test mn mc problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._standardize_cost_terms!-Tuple{Dict{String, var\"#s108\"} where var\"#s108\", Int64, String}","page":"Modeling Components","title":"PowerModelsDistribution._standardize_cost_terms!","text":"ensures all polynomial costs functions have at exactly comp_order terms\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._strip_comments-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._strip_comments","text":"Strips comments, defined by '!' from the ends of lines\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._strip_lines-Tuple{Vector{var\"#s3072\"} where var\"#s3072\"<:AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution._strip_lines","text":"strips lines that are either commented (block or single) or empty\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._to_kwargs-Tuple{Dict{String, Any}}","page":"Modeling Components","title":"PowerModelsDistribution._to_kwargs","text":"converts Dict{String,Any} to Dict{Symbol,Any} for passing as kwargs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._vec2ltri!-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._vec2ltri!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._vec2utri!-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Modeling Components","title":"PowerModelsDistribution._vec2utri!","text":"https://stackoverflow.com/questions/39039553/lower-triangular-matrix-in-julia\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._wrap_to_180-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._wrap_to_180","text":"wraps angles in degrees to 180\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution._wrap_to_pi-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution._wrap_to_pi","text":"wraps angles in radians to pi\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.add_object!-Tuple{Dict{String, var\"#s3000\"} where var\"#s3000\", String, String, Dict{String, var\"#s2999\"} where var\"#s2999\"}","page":"Modeling Components","title":"PowerModelsDistribution.add_object!","text":"Generic add function to add components to an engineering data model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.add_vbase_default!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", String, Real}","page":"Modeling Components","title":"PowerModelsDistribution.add_vbase_default!","text":"Function to add default vbase for a bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_kron_reduction!-Tuple{Dict{String, var\"#s2979\"} where var\"#s2979\"}","page":"Modeling Components","title":"PowerModelsDistribution.apply_kron_reduction!","text":"kron reduction\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_phase_projection!-Tuple{Dict{String, var\"#s2980\"} where var\"#s2980\"}","page":"Modeling Components","title":"PowerModelsDistribution.apply_phase_projection!","text":"pad matrices to max number of conductors\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_phase_projection_delta!-Tuple{Dict{String, var\"#s2993\"} where var\"#s2993\"}","page":"Modeling Components","title":"PowerModelsDistribution.apply_phase_projection_delta!","text":"phase projection for components where unprojected states are not yet supported\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_pmd!-Tuple{Function, Dict{String, var\"#s111\"} where var\"#s111\"}","page":"Modeling Components","title":"PowerModelsDistribution.apply_pmd!","text":"PowerModelsDistribution wrapper for the InfrastructureModels apply! function.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_pmd!-Tuple{Function, Dict{Symbol, var\"#s108\"} where var\"#s108\", Dict{String, var\"#s107\"} where var\"#s107\"}","page":"Modeling Components","title":"PowerModelsDistribution.apply_pmd!","text":"PowerModelsDistribution wrapper for the InfrastructureModels apply! function.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_voltage_angle_difference_bounds!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\", Real}","page":"Modeling Components","title":"PowerModelsDistribution.apply_voltage_angle_difference_bounds!","text":"voltage angle bounds\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.apply_voltage_bounds!-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution.apply_voltage_bounds!","text":"add voltage bounds\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld","text":"Load shedding problem including storage (snap-shot)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld","text":"Load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld_bf-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld_bf","text":"Load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_mld_uc-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_mld_uc","text":"Standard unit commitment (!relaxed) load shedding problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf","text":"constructor for OPF in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf","text":"Constructor for Optimal Power Flow\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf","text":"constructor for branch flow opf\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_oltc-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_oltc","text":"constructor for on-load tap-changer OPF\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_opf_pbs-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_opf_pbs","text":"OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf","text":"Constructor for Power Flow in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf","text":"Constructor for Power Flow Problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf","text":"Constructor for Branch Flow Power Flow\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mc_pf_pbs-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mc_pf_pbs","text":"PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mn_mc_mld_simple-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mn_mc_mld_simple","text":"Multinetwork load shedding problem including storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mn_mc_mld_simple-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.build_mn_mc_mld_simple","text":"Multinetwork load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mn_mc_opf-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mn_mc_opf","text":"Multinetwork current-voltage optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mn_mc_opf-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.build_mn_mc_opf","text":"Multinetwork optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.build_mn_mc_opf-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.build_mn_mc_opf","text":"Multinetwork branch flow optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_branch_y-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.calc_branch_y","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_buspair_parameters-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.calc_buspair_parameters","text":"overwrites PowerModels buspairs ref by conductor\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_connected_components-Tuple{Dict{String, var\"#s108\"} where var\"#s108\"}","page":"Modeling Components","title":"PowerModelsDistribution.calc_connected_components","text":"computes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_cost_pwl_lines-Tuple{Dict}","page":"Modeling Components","title":"PowerModelsDistribution.calc_cost_pwl_lines","text":"compute lines in m and b from from pwl cost models data is a list of components. Can be run on data or ref data structures\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_max_cost_index-Tuple{Dict{String, var\"#s764\"} where var\"#s764\"}","page":"Modeling Components","title":"PowerModelsDistribution.calc_max_cost_index","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_pwl_points-Tuple{Int64, Vector{var\"#s760\"} where var\"#s760\"<:Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution.calc_pwl_points","text":"cleans up raw pwl cost points in preparation for building a mathamatical model. The key mathematical properties,\n\nthe first and last points are strickly outside of the pmin-to-pmax range\npmin and pmax occur in the first and last line segments.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calc_voltage_bases-Tuple{Dict{String, var\"#s2985\"} where var\"#s2985\", Dict{var\"#s2984\", var\"#s2983\"} where {var\"#s2984\", var\"#s2983\"<:Real}}","page":"Modeling Components","title":"PowerModelsDistribution.calc_voltage_bases","text":"calculates voltage bases for each voltage zone\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.calculate_tm_scale-Tuple{Dict{String, Any}, Dict{String, Any}, Dict{String, Any}}","page":"Modeling Components","title":"PowerModelsDistribution.calculate_tm_scale","text":"Calculates the tap scale factor for the non-dimensionalized equations.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.check_branch_loops-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.check_branch_loops","text":"checks that all branches connect two distinct buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.check_connectivity-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.check_connectivity","text":"checks that all buses are unique and other components link to valid buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.check_cost_models-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.check_cost_models","text":"Checks that all cost models are of the same type\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.check_eng_data_model-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\"}","page":"Modeling Components","title":"PowerModelsDistribution.check_eng_data_model","text":"checks the engineering data model for correct data types, required fields and applies default checks\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.check_gen_cost_models-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.check_gen_cost_models","text":"Checks that all generator cost models are of the same type\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.comp_start_value","page":"Modeling Components","title":"PowerModelsDistribution.comp_start_value","text":"\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution.comp_start_value-Tuple{Dict{String, var\"#s5\"} where var\"#s5\", String, Int64, Any}","page":"Modeling Components","title":"PowerModelsDistribution.comp_start_value","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_M_psd-Tuple{JuMP.Model, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_M_psd","text":"For rectangular coordinates of a complex matrix M=Mre+im*Mim, this function applies constraints equivalent to requiring that M itself is PSD.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_SWL_psd-Tuple{JuMP.Model, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_SWL_psd","text":"Take a multi-conductor voltage variable V and a current variable I. The associated power is then defined as S = VI^H Define the lifted variables as W and L as W = VV^H, L = I*I^H Then, it is equally valid that [W S; S^H L] ∈ PSDCone, rank([W S; S^H L])=1 This function adds this PSD constraint for the rectangular coordinates of S, W and L.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_branch_current_series_product_hermitian-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_branch_current_series_product_hermitian","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_balance","text":"Impose all balance related constraints for which key present in data model of bus. For a discussion of sequence components and voltage unbalance factor (VUF), see @INPROCEEDINGS{girigoudarmolzahnroald-2019, \tauthor={K. Girigoudar and D. K. Molzahn and L. A. Roald}, \tbooktitle={submitted}, \ttitle={{Analytical and Empirical Comparisons of Voltage Unbalance Definitions}}, \tyear={2019}, \tmonth={},     url={https://molzahn.github.io/pubs/girigoudarmolzahnroald-2019.pdf} }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_drop-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3072\"} where var\"#s3072\"<:Real, Matrix{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_drop","text":"Defines voltage drop over a branch, linking from and to side complex voltage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_drop-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_drop","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_ll-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{T} where T, Vector{T} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_ll","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_negative_sequence-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_negative_sequence","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{var\"#s3001\"} where var\"#s3001\"<:Real, Vector{var\"#s3000\"} where var\"#s3000\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off","text":"on/off bus voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{var\"#s759\"} where var\"#s759\"<:Real, Vector{var\"#s758\"} where var\"#s758\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off","text":"on/off bus voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off","text":"on/off voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_positive_sequence-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_positive_sequence","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{var\"#s759\"} where var\"#s759\"<:Real, Vector{var\"#s758\"} where var\"#s758\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off","text":"on/off bus voltage magnitude squared constraint for relaxed formulations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off","text":"on/off voltage magnitude squared constraint for relaxed formulations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_vuf-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_vuf","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_zero_sequence-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Float64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_zero_sequence","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUBFModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off bus voltage constraint for relaxed forms\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACPModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"bus voltage on/off constraint for load shed problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"bus voltage on/off constraint for load shed problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedDCPModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off bus voltage constraint for DCP formulation, nothing to do\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off constraint for bus voltages\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_balance-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_balance","text":"Kirchhoff's current law applied to buses sum(cr + im*ci) = 0\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_from-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Matrix{var\"#s3072\"} where var\"#s3072\"<:Real, Matrix{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_from","text":"Defines how current distributes over series and shunt impedances of a pi-model branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_from-Tuple{AbstractUnbalancedIVRModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_from","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_limit-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{var\"#s3072\"} where var\"#s3072\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_limit","text":"Bounds the current magnitude at both from and to side of a branch cr[f_idx]^2 + ci[f_idx]^2 <= c_rating_a^2 cr[t_idx]^2 + ci[t_idx]^2 <= c_rating_a^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_to-Tuple{AbstractUnbalancedIVRModel, Int64, Any, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3072\"} where var\"#s3072\"<:Real, Matrix{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_to","text":"Defines how current distributes over series and shunt impedances of a pi-model branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_current_to-Tuple{AbstractUnbalancedIVRModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_current_to","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_active_bounds-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s3072\"} where var\"#s3072\"<:Real, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_active_bounds","text":"pmin <= Re(v*cg') <= pmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_active_bounds-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_active_bounds","text":"defines limits on active power output of a generator where bounds can't be used\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_power_on_off-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{var\"#s2999\"} where var\"#s2999\"<:Real, Vector{var\"#s2998\"} where var\"#s2998\"<:Real, Vector{var\"#s2997\"} where var\"#s2997\"<:Real, Vector{var\"#s2996\"} where var\"#s2996\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_power_on_off","text":"on/off constraint for generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_power_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{var\"#s760\"} where var\"#s760\"<:Int64, Vector{var\"#s759\"} where var\"#s759\"<:Real, Vector{var\"#s758\"} where var\"#s758\"<:Real, Vector{var\"#s757\"} where var\"#s757\"<:Real, Vector{var\"#s751\"} where var\"#s751\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_power_on_off","text":"on/off constraint for generators\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_power_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_power_setpoint_real-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_power_setpoint_real","text":"pg[i] == pg\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_power_setpoint_real-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{var\"#s766\"} where var\"#s766\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_power_setpoint_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_power_setpoint_real-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_power_setpoint_real","text":"generator active power setpoint constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_reactive_bounds-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s3072\"} where var\"#s3072\"<:Real, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_reactive_bounds","text":"qmin <= Im(v*cg') <= qmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_gen_reactive_bounds-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_gen_reactive_bounds","text":"defines limits on reactive power output of a generator where bounds can't be used\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power-Tuple{AbstractUnbalancedActivePowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"Only support wye-connected generators.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"DELTA When connected in delta, the load power gives the reference in the delta reference frame. This means sd1 = vab.conj(iab) = (va-vb).conj(iab) We can relate this to the per-phase power by sna = va.conj(ia)     = va.conj(iab-ica)     = va.conj(conj(sab/vab) - conj(sca/vca))     = va.(sab/(va-vb) - sca/(vc-va)) So for delta, sn is constrained indirectly.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power-Tuple{SDPUBFKCLMXModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"Link the current and power withdrawn by a generator at the bus through a PSD constraint. The rank-1 constraint is dropped in this formulation.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2984\"} where var\"#s2984\"<:Real, Vector{var\"#s2983\"} where var\"#s2983\"<:Real, Vector{var\"#s2982\"} where var\"#s2982\"<:Real, Vector{var\"#s2981\"} where var\"#s2981\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2983\"} where var\"#s2983\"<:Real, Vector{var\"#s2982\"} where var\"#s2982\"<:Real, Vector{var\"#s2981\"} where var\"#s2981\"<:Real, Vector{var\"#s2980\"} where var\"#s2980\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2985\"} where var\"#s2985\"<:Real, Vector{var\"#s2984\"} where var\"#s2984\"<:Real, Vector{var\"#s2983\"} where var\"#s2983\"<:Real, Vector{var\"#s2982\"} where var\"#s2982\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"delta connected generator setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2992\"} where var\"#s2992\"<:Real, Vector{var\"#s2991\"} where var\"#s2991\"<:Real, Vector{var\"#s2990\"} where var\"#s2990\"<:Real, Vector{var\"#s2989\"} where var\"#s2989\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2988\"} where var\"#s2988\"<:Real, Vector{var\"#s2987\"} where var\"#s2987\"<:Real, Vector{var\"#s2986\"} where var\"#s2986\"<:Real, Vector{var\"#s2985\"} where var\"#s2985\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"wye connected generator setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_current_delta-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{T} where T, Vector{T} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_current_delta","text":"We want to express sab = cp.|vab|+im.cq.|vab| iab = conj(sab/vab) = |vab|.(cq-im.cq)/conj(vab) = (1/|vab|).(cp-im.cq)*vab idem for ibc and ica And then sa = va.conj(ia) = va.conj(iab-ica) idem for sb and sc\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractUnbalancedActivePowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power","text":"Only support wye-connected, constant-power loads.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power","text":"CONSTANT POWER Fixes the load power sd. sd = [sd1, sd2, sd3] What is actually fixed, depends on whether the load is connected in delta or wye. When connected in wye, the load power equals the per-phase power sn drawn at the bus to which the load is connected. sd1 = va.conj(ia) = sn_a\n\nCONSTANT CURRENT Sets the active and reactive load power sd to be proportional to the the voltage magnitude. pd = cp.|vm| qd = cq.|vm| sd = cp.|vm| + j.cq.|vm|\n\nCONSTANT IMPEDANCE Sets the active and reactive power drawn by the load to be proportional to the square of the voltage magnitude. pd = cp.|vm|^2 qd = cq.|vm|^2 sd = cp.|vm|^2 + j.cq.|vm|^2\n\nDELTA When connected in delta, the load power gives the reference in the delta reference frame. This means sd1 = vab.conj(iab) = (va-vb).conj(iab) We can relate this to the per-phase power by sna = va.conj(ia)     = va.conj(iab-ica)     = va.conj(conj(sab/vab) - conj(sca/vca))     = va.(sab/(va-vb) - sca/(vc-va)) So for delta, sn is constrained indirectly.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power-Tuple{SDPUBFKCLMXModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power","text":"Creates the constraints modelling the (relaxed) voltage-dependent loads for the matrix KCL formulation.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power","text":"Creates the constraints modelling the (relaxed) voltage-dependent loads.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2978\"} where var\"#s2978\"<:Real, Vector{var\"#s2977\"} where var\"#s2977\"<:Real, Vector{var\"#s2976\"} where var\"#s2976\"<:Real, Vector{var\"#s2975\"} where var\"#s2975\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2978\"} where var\"#s2978\"<:Real, Vector{var\"#s2977\"} where var\"#s2977\"<:Real, Vector{var\"#s2976\"} where var\"#s2976\"<:Real, Vector{var\"#s2975\"} where var\"#s2975\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2992\"} where var\"#s2992\"<:Real, Vector{var\"#s2991\"} where var\"#s2991\"<:Real, Vector{var\"#s2990\"} where var\"#s2990\"<:Real, Vector{var\"#s2989\"} where var\"#s2989\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"delta connected load setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2988\"} where var\"#s2988\"<:Real, Vector{var\"#s2987\"} where var\"#s2987\"<:Real, Vector{var\"#s2986\"} where var\"#s2986\"<:Real, Vector{var\"#s2985\"} where var\"#s2985\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2988\"} where var\"#s2988\"<:Real, Vector{var\"#s2987\"} where var\"#s2987\"<:Real, Vector{var\"#s2986\"} where var\"#s2986\"<:Real, Vector{var\"#s2985\"} where var\"#s2985\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s2986\"} where var\"#s2986\"<:Real, Vector{var\"#s2985\"} where var\"#s2985\"<:Real, Vector{var\"#s2984\"} where var\"#s2984\"<:Real, Vector{var\"#s2983\"} where var\"#s2983\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"wye connected load setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{AbstractLPUBFModel, Int64, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{SDPUBFModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Matrix{var\"#s3072\"} where var\"#s3072\"<:Real, Matrix{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{SOCConicUBFModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Matrix{var\"#s3072\"} where var\"#s3072\"<:Real, Matrix{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_current-Tuple{Union{SOCConicUBFModel, SOCNLPUBFModel}, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Matrix{var\"#s3072\"} where var\"#s3072\"<:Real, Matrix{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{AbstractUnbalancedDCPModel, Int64, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"nothing to do, these models do not have complex voltage constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"do nothing by default\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{var\"#s2992\"} where var\"#s2992\"<:Real, Matrix{var\"#s2991\"} where var\"#s2991\"<:Real, Matrix{var\"#s2990\"} where var\"#s2990\"<:Real, Matrix{var\"#s2989\"} where var\"#s2989\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"Defines voltage drop over a branch, linking from and to side voltage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{var\"#s3001\"} where var\"#s3001\"<:Real, Matrix{var\"#s3000\"} where var\"#s3000\"<:Real, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"Defines voltage drop over a branch, linking from and to side voltage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_network_power_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_network_power_balance","text":"ensures that power generation and demand are balanced\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_network_power_balance-Tuple{Union{AbstractUnbalancedNFAModel, DCPUPowerModel}, Int64, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_network_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUBFModel, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s2986\"} where var\"#s2986\"<:Real, Matrix{var\"#s2985\"} where var\"#s2985\"<:Real, Matrix{var\"#s2984\"} where var\"#s2984\"<:Real, Matrix{var\"#s2983\"} where var\"#s2983\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np_fr ==     g[c,c] * vm_fr[c]^2 +\n            sum( g[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) +\n                 b[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c) +\n            sum(-g[c,d]*vm_fr[c]*vm_to[d]*cos(va_fr[c]-va_to[d]) +\n                -b[c,d]*vm_fr[c]*vm_to[d]*sin(va_fr[c]-va_to[d]) for d in conductor_ids(pm))\n            + g_fr[c,c] * vm_fr[c]^2 +\n            sum( g_fr[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) +\n                 b_fr[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c)\n            )\nq_fr == -b[c,c] *vm_fr[c]^2 -\n            sum( b[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) -\n                 g[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c) -\n            sum(-b[c,d]*vm_fr[c]*vm_to[d]*cos(va_fr[c]-va_to[d]) +\n                 g[c,d]*vm_fr[c]*vm_to[d]*sin(va_fr[c]-va_to[d]) for d in conductor_ids(pm))\n            -b_fr[c,c] *vm_fr[c]^2 -\n            sum( b_fr[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) -\n                 g_fr[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c)\n            )\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3001\"} where var\"#s3001\"<:Real, Matrix{var\"#s3000\"} where var\"#s3000\"<:Real, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints\n\nsfr = vfr.conj(Y(vfr-vto)) sfr = (vrfr+imvi_fr).(G-imB)([vrfr-vrto]-im[vifr-vito]) sfr = (vrfr+imvifr).([Gvrfr-Gvr_to-Bvifr+B*vito]-im[Gvifr-G*vito+Bvr_fr-Bvr_to])\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s2995\"} where var\"#s2995\"<:Real, Matrix{var\"#s2994\"} where var\"#s2994\"<:Real, Matrix{var\"#s2993\"} where var\"#s2993\"<:Real, Matrix{var\"#s2992\"} where var\"#s2992\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[f_idx] == -b*(t[f_bus] - t[t_bus])\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"ohms constraint for branches on the from-side\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{NFAUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3001\"} where var\"#s3001\"<:Real, Matrix{var\"#s3000\"} where var\"#s3000\"<:Real, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"nothing to do, no voltage angle variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUBFModel, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3001\"} where var\"#s3001\"<:Real, Matrix{var\"#s3000\"} where var\"#s3000\"<:Real, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{T} where T, Matrix{T} where T, Matrix{T} where T, Matrix{T} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"ohms constraint for branches on the to-side\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{NFAUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3001\"} where var\"#s3001\"<:Real, Matrix{var\"#s3000\"} where var\"#s3000\"<:Real, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"nothing to do, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{Union{AbstractUnbalancedNFAModel, DCPUPowerModel}, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{var\"#s3001\"} where var\"#s3001\"<:Real, Matrix{var\"#s3000\"} where var\"#s3000\"<:Real, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Do nothing, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_oltc_tap_fix-Tuple{AbstractUnbalancedPowerModel, Int64, Vector{T} where T, Vector{T} where T}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_oltc_tap_fix","text":"For a variable tap transformer, fix the tap variables which are fixed. For example, an OLTC where the third phase is fixed, will have tap variables for all phases, but the third tap variable should be fixed.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUBFModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"power balanace constraint with line shunts and transformers, active power only\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"KCL including transformer arcs and load variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{LPUBFDiagModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance-Tuple{SDPUBFKCLMXModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"Shunt handling in matrix form: I = Y.U S = U.I' = U.(Y.U)' = U.U'.Y' = W.Y'   = (Wr+j.Wi)(G+jB)' = (Wr+j.Wi)(G'-j.B') = (Wr.G'+Wi.B')+j(-Wr.B'+Wi.G') P =  Wr.G'+Wi.B' Q = -Wr.B'+Wi.G'\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUBFModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"KCL for load shed problem with transformers (AbstractWForms)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"power balance constraint with line shunts and transformers for load shed problem, DCP formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"KCL for load shed problem with transformers\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_shed_simple-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_shed_simple","text":"power balance constraint with line shunts and transformers for load shed problem, DCP formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_simple-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_simple","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_simple-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_simple","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_simple-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_simple","text":"KCL including transformer arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUBFModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{var\"#s763\"} where var\"#s763\"<:Tuple{Tuple{Int64, Int64, Int64}, Vector{Union{Int64, String}}}, Vector{var\"#s762\"} where var\"#s762\"<:Tuple{Tuple{Int64, Int64, Int64}, Vector{Union{Int64, String}}}, Vector{var\"#s761\"} where var\"#s761\"<:Tuple{Tuple{Int64, Int64, Int64}, Vector{Union{Int64, String}}}, Vector{var\"#s760\"} where var\"#s760\"<:Tuple{Int64, Vector{Union{Int64, String}}}, Vector{var\"#s759\"} where var\"#s759\"<:Tuple{Int64, Vector{Union{Int64, String}}}, Vector{var\"#s758\"} where var\"#s758\"<:Tuple{Int64, Vector{Union{Int64, String}}}, Vector{var\"#s757\"} where var\"#s757\"<:Tuple{Int64, Vector{Union{Int64, String}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_losses-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_losses-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{var\"#s2996\"} where var\"#s2996\"<:Real, Matrix{var\"#s2995\"} where var\"#s2995\"<:Real, Matrix{var\"#s2994\"} where var\"#s2994\"<:Real, Matrix{var\"#s2993\"} where var\"#s2993\"<:Real, Matrix{var\"#s2992\"} where var\"#s2992\"<:Real, Matrix{var\"#s2991\"} where var\"#s2991\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"Defines branch flow model power flow equations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_power_losses-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{var\"#s2999\"} where var\"#s2999\"<:Real, Matrix{var\"#s2998\"} where var\"#s2998\"<:Real, Matrix{var\"#s2997\"} where var\"#s2997\"<:Real, Matrix{var\"#s2996\"} where var\"#s2996\"<:Real, Matrix{var\"#s2995\"} where var\"#s2995\"<:Real, Matrix{var\"#s2994\"} where var\"#s2994\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"Defines branch flow model power flow equations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_regen_setpoint_active-Tuple{AbstractUnbalancedIVRModel, Int64, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_regen_setpoint_active","text":"qq[i] == qq\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedACRModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Any, Vector{Int64}, Vector{var\"#s3000\"} where var\"#s3000\"<:Real, Vector{var\"#s2999\"} where var\"#s2999\"<:Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"storage loss constraints, delegate to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"Neglects the active and reactive loss terms associated with the squared current magnitude.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{var\"#s3001\"} where var\"#s3001\"<:Real, Vector{var\"#s3000\"} where var\"#s3000\"<:Real, Vector{var\"#s2999\"} where var\"#s2999\"<:Real, Vector{var\"#s2998\"} where var\"#s2998\"<:Real, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{Int64}, Vector{var\"#s3001\"} where var\"#s3001\"<:Real, Vector{var\"#s3000\"} where var\"#s3000\"<:Real, Vector{var\"#s2999\"} where var\"#s2999\"<:Real, Vector{var\"#s2998\"} where var\"#s2998\"<:Real, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{Int64}, Vector{var\"#s766\"} where var\"#s766\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_current_limit-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_current_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_power_on_off-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_power_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUBFModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedNFAModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"nothing to do\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUBFModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_open-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_open","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_state_open-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_state_open","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"-rate_a <= p[f_idx] <= rate_a\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3001\"} where var\"#s3001\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"p[f_idx]^2 + q[f_idx]^2 <= rate_a^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s766\"} where var\"#s766\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"Generic thermal limit constraint from-side\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"branch thermal constraints from\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from_ne-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from_ne","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_from_on_off-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3001\"} where var\"#s3001\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"p[t_idx]^2 + q[t_idx]^2 <= rate_a^2\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s766\"} where var\"#s766\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"Generic thermal limit constraint to-side\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"branch thermal constraints to\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to_ne-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to_ne","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_thermal_limit_to_on_off-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUBFModel, Int64, Int64, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"do nothing, no way to represent this in these variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"Creates phase angle constraints at reference buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"reference angle constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{LPUBFDiagModel, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"balanced three-phase phasor\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{NFAUPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"nothing to do, no voltage angle variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{Union{AbstractUnbalancedACPModel, AbstractUnbalancedDCPModel}, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"Creates phase angle constraints at reference buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power","text":"Transformer constraints, considering winding type, conductor order, polarity and tap settings.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power-Tuple{NFAUPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power","text":"nothing to do, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s2992\"} where var\"#s2992\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s2995\"} where var\"#s2995\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"This function adds all constraints required to model a two-winding, delta-wye connected transformer.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s3001\"} where var\"#s3001\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"delta-wye transformer power constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s2998\"} where var\"#s2998\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s2998\"} where var\"#s2998\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"This function adds all constraints required to model a two-winding, wye-wye connected transformer.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s3001\"} where var\"#s3001\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"wye-wye transformer power constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{var\"#s2998\"} where var\"#s2998\"<:Real, Vector{Bool}, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"Links to and from power and voltages in a wye-wye transformer, assumes tmfixed is true wfri=(politm_scaletmi)^2wto_i\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUBFModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{var\"#s2999\"} where var\"#s2999\"<:Real, Vector{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"This is duplicated at PowerModelsDistribution level to correctly handle the indexing of the shunts.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedACRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{var\"#s2999\"} where var\"#s2999\"<:Real, Vector{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedIVRModel, Int64, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"Bounds the voltage angle difference between bus pairs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedNFAModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{var\"#s3072\"} where var\"#s3072\"<:Real, Vector{var\"#s3002\"} where var\"#s3002\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"nothing to do, these models do not have angle difference constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"This is duplicated at PowerModelsDistribution level to correctly handle the indexing of the shunts.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{Union{AbstractUnbalancedACPModel, AbstractUnbalancedDCPModel}, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{var\"#s3002\"} where var\"#s3002\"<:Real, Vector{var\"#s3001\"} where var\"#s3001\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{var\"#s3001\"} where var\"#s3001\"<:Real, Vector{var\"#s3000\"} where var\"#s3000\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"vmin <= vm[i] <= vmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"This constraint captures problem agnostic constraints that define limits for voltage magnitudes (where variable bounds cannot be used) Notable examples include IVRUPowerModel and ACRUPowerModel\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUBFModel, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{var\"#s2998\"} where var\"#s2998\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{var\"#s3073\"} where var\"#s3073\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"nothing to do\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"voltage magnitude setpoint constraint\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_psd-Tuple{SDPUBFModel, Int64, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_psd","text":"Add explicit PSD-ness of W for nodes where it is not implied\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_psd-Tuple{SOCConicUBFModel, Int64, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_psd","text":"Add explicit PSD-ness of W for nodes where it is not implied\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_mc_voltage_psd-Tuple{Union{SOCConicUBFModel, SOCNLPUBFModel}, Int64, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_mc_voltage_psd","text":"Add explicit PSD-ness of W for nodes where it is not implied\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_pqw-Tuple{JuMP.Model, JuMP.VariableRef, JuMP.VariableRef, Real, Real, Real, Real, Real, Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_pqw","text":"Creates the constraints modelling the (relaxed) voltage-dependency of the power consumed in each phase, s=p+jq. This is completely symmetrical for p and q, with appropriate substitutions of the variables and parameters: p->q, a->b, alpha->beta, pmin->qmin, pmax->qmax\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_complementarity_mi-Tuple{AbstractUnbalancedPowerModel, Int64, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_complementarity_mi","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_complementarity_mi-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_complementarity_mi","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_complementarity_nl-Tuple{AbstractUnbalancedPowerModel, Int64, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_complementarity_nl","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_complementarity_nl-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_complementarity_nl","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_losses-Tuple{AbstractUBFAModel, Int64, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_losses","text":"Neglects the active and reactive loss terms associated with the squared current magnitude.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_losses-Tuple{AbstractUBFModel, Int64, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_losses-Tuple{AbstractUnbalancedACPModel, Int64, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_losses-Tuple{AbstractUnbalancedACRModel, Int64, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_losses-Tuple{AbstractUnbalancedActivePowerModel, Int64, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_losses-Tuple{Union{AbstractUnbalancedNFAModel, DCPUPowerModel}, Int64, Any, Any, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_state-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Int64, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_state","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_state-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_state","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_state-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_state","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_storage_state_initial-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Any, Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_storage_state_initial","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.constraint_switch_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{var\"#s764\"} where var\"#s764\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.constraint_switch_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_branch_directions!-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.correct_branch_directions!","text":"checks that all parallel branches have the same orientation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_bus_types!-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.correct_bus_types!","text":"checks bus types are suitable for a power flow study, if not, fixes them. the primary checks are that all type 2 buses (i.e., PV) have a connected and active generator and there is a single type 3 bus (i.e., slack bus) with an active connected generator. assumes that the network is a single connected component\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_cost_functions!-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.correct_cost_functions!","text":"throws warnings if cost functions are malformed\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_json_import!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\"}","page":"Modeling Components","title":"PowerModelsDistribution.correct_json_import!","text":"helper function to correct data imported from json\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_mc_thermal_limits!-Tuple{Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Modeling Components","title":"PowerModelsDistribution.correct_mc_thermal_limits!","text":"checks that each branch has non-negative thermal ratings and removes zero thermal ratings\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.correct_mc_voltage_angle_differences!","page":"Modeling Components","title":"PowerModelsDistribution.correct_mc_voltage_angle_differences!","text":"checks that voltage angle differences are within 90 deg., if not tightens\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution.correct_network_data!-Tuple{Dict{String, Any}}","page":"Modeling Components","title":"PowerModelsDistribution.correct_network_data!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.count_active_connections-Tuple{Dict{String, var\"#s104\"} where var\"#s104\"}","page":"Modeling Components","title":"PowerModelsDistribution.count_active_connections","text":"Counts active ungrounded connections on edge components\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.count_active_terminals-Tuple{Dict{String, var\"#s107\"} where var\"#s107\"}","page":"Modeling Components","title":"PowerModelsDistribution.count_active_terminals","text":"Counts active ungrounded terminals on buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.count_nodes-Tuple{Dict{String, var\"#s99\"} where var\"#s99\"}","page":"Modeling Components","title":"PowerModelsDistribution.count_nodes","text":"Counts number of nodes in network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_al2w_transformer-Tuple{String, String, Union{Vector{Int64}, Vector{String}}, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_al2w_transformer","text":"creates a aysmmetric lossless 2-winding transformer object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_bus-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution.create_bus","text":"creates a bus object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_generator-Tuple{String, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_generator","text":"creates a generator object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_line-Tuple{String, String, Union{Vector{Int64}, Vector{String}}, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_line","text":"Create a line with some default values\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_linecode-Tuple{Matrix{var\"#s2982\"} where var\"#s2982\"<:Real, Matrix{var\"#s2981\"} where var\"#s2981\"<:Real}","page":"Modeling Components","title":"PowerModelsDistribution.create_linecode","text":"creates a linecode with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_load-Tuple{String, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_load","text":"creates a load object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_shunt-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.create_shunt","text":"creates a generic shunt with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_solar-Tuple{String, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_solar","text":"creates a solar generator with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_storage-Tuple{String, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_storage","text":"creates energy storage object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_switch-Tuple{String, String, Union{Vector{Int64}, Vector{String}}, Union{Vector{Int64}, Vector{String}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_switch","text":"creates a switch object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_transformer-Tuple{Vector{Any}, Vector{Union{Vector{Int64}, Vector{String}}}}","page":"Modeling Components","title":"PowerModelsDistribution.create_transformer","text":"creates a n-winding transformer object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_voltage_source-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.create_voltage_source","text":"creates a voltage source with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.create_xfmrcode-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution.create_xfmrcode","text":"creates transformer code with some defaults\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.cut_complex_product_and_angle_difference-NTuple{7, Any}","page":"Modeling Components","title":"PowerModelsDistribution.cut_complex_product_and_angle_difference","text":"A valid inequality for the product of two complex variables with magnitude and angle difference bounds. In the literature this constraints are called the Lifted Nonlinear Cuts (LNCs). @misc{1512.04644,     Author = {Carleton Coffrin and Hassan Hijazi and Pascal Van Hentenryck},     Title = {Strengthening the SDP Relaxation of AC Power Flows with Convex         Envelopes, Bound Tightening, and Lifted Nonlinear Cuts},     Year = {2015},     Eprint = {arXiv:1512.04644}, }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.delete_component!-Tuple{Dict{String, var\"#s3073\"} where var\"#s3073\", String, String}","page":"Modeling Components","title":"PowerModelsDistribution.delete_component!","text":"deletes a component from the engineering data model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.discover_voltage_zones-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\"}","page":"Modeling Components","title":"PowerModelsDistribution.discover_voltage_zones","text":"finds voltage zones\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.find_conductor_ids!-Tuple{Dict{String, var\"#s111\"} where var\"#s111\"}","page":"Modeling Components","title":"PowerModelsDistribution.find_conductor_ids!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.get_pmd_data-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.get_pmd_data","text":"Convenience function for retrieving the power-distribution-only portion of network data.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.identify_blocks-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.identify_blocks","text":"computes connected blocks currently in the model based on switch states\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.identify_islands-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.identify_islands","text":"computes component islands base only on edge and bus status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.identify_load_blocks-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.identify_load_blocks","text":"computes load blocks based on switch locations\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.instantiate_mc_model-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\", Type, Function}","page":"Modeling Components","title":"PowerModelsDistribution.instantiate_mc_model","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.make_lossless!-Tuple{Dict{String, var\"#s2999\"} where var\"#s2999\"}","page":"Modeling Components","title":"PowerModelsDistribution.make_lossless!","text":"remove parameters from objects with loss models to make them lossless\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.make_multiconductor!-Tuple{Dict{String, var\"#s3002\"} where var\"#s3002\", Int64}","page":"Modeling Components","title":"PowerModelsDistribution.make_multiconductor!","text":"Hacky helper function to transform single-conductor network data, from, e.g., matpower/psse, into multi-conductor data\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.make_multinetwork-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\"}","page":"Modeling Components","title":"PowerModelsDistribution.make_multinetwork","text":"Expands a data structure into a multinetwork\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.make_per_unit!-Tuple{Dict{String, var\"#s2991\"} where var\"#s2991\"}","page":"Modeling Components","title":"PowerModelsDistribution.make_per_unit!","text":"converts data model between per-unit and SI units\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.new_t-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution.new_t","text":"generate a new, unique terminal\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_max_load_setpoint-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_max_load_setpoint","text":"maximum loadability objective (continuous load shed) with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_fuel_cost-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_fuel_cost","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial_switch","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_fuel_cost_pwl-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_pwl","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_fuel_cost_pwl_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_pwl_switch","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_fuel_cost_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_switch","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_load_setpoint_delta-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_load_setpoint_delta","text":"minimum load delta objective (continuous load shed) with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple","text":"simplified minimum load delta objective (continuous load shed)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple_switch","text":"simplified minimum load delta objective (continuous load shed)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_min_slack_bus_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_min_slack_bus_power","text":"a quadratic penalty for bus power slack variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.objective_mc_variable_pg_cost","page":"Modeling Components","title":"PowerModelsDistribution.objective_mc_variable_pg_cost","text":"adds pg_cost variables and constraints\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution.objective_variable_pg_cost-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.objective_variable_pg_cost","text":"adds pg_cost variables and constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_dss-Tuple{AbstractString}","page":"Modeling Components","title":"PowerModelsDistribution.parse_dss","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_dss-Tuple{IO}","page":"Modeling Components","title":"PowerModelsDistribution.parse_dss","text":"Parses a OpenDSS file given by filename into a Dict{Array{Dict}}. Only supports components and options, but not commands, e.g. \"plot\" or \"solve\". Will also parse files defined inside of the originating DSS file via the \"compile\", \"redirect\" or \"buscoords\" commands.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_file","page":"Modeling Components","title":"PowerModelsDistribution.parse_file","text":"parse_file(io)\n\nParses the IOStream of a file into a PowerModelsDistribution data structure.\n\n\n\n\n\n","category":"function"},{"location":"library/#PowerModelsDistribution.parse_file-Tuple{String}","page":"Modeling Components","title":"PowerModelsDistribution.parse_file","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_json-Tuple{IO}","page":"Modeling Components","title":"PowerModelsDistribution.parse_json","text":"parses json files that were dumped via JSON.print (or PMD.print_file)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_json-Tuple{String}","page":"Modeling Components","title":"PowerModelsDistribution.parse_json","text":"parses json files that were dumped via JSON.print\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_opendss-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution.parse_opendss","text":"Parses a Dict resulting from the parsing of a DSS file into a PowerModels usable format\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.parse_opendss-Tuple{IO}","page":"Modeling Components","title":"PowerModelsDistribution.parse_opendss","text":"Parses a DSS file into a PowerModels usable format\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.print_file-Tuple{IO, Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution.print_file","text":"prints a PowerModelsDistribution data structure into a JSON file\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.print_file-Tuple{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution.print_file","text":"prints a PowerModelsDistribution data structure into a JSON file\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.ref_add_connected_components!-Tuple{Dict{Symbol, var\"#s3072\"} where var\"#s3072\", Dict{String, var\"#s3002\"} where var\"#s3002\"}","page":"Modeling Components","title":"PowerModelsDistribution.ref_add_connected_components!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.ref_add_core!-Tuple{Dict{Symbol, Any}}","page":"Modeling Components","title":"PowerModelsDistribution.ref_add_core!","text":"Returns a dict that stores commonly used pre-computed data from of the data dictionary, primarily for converting data-types, filtering out deactivated components, and storing system-wide values that need to be computed globally. Some of the common keys include:\n\n:off_angmin and :off_angmax (see calc_theta_delta_bounds(data)),\n:bus – the set {(i, bus) in ref[:bus] : bus[\"bus_type\"] != 4},\n:gen – the set {(i, gen) in ref[:gen] : gen[\"gen_status\"] == 1 && gen[\"gen_bus\"] in keys(ref[:bus])},\n:branch – the set of branches that are active in the network (based on the component status values),\n:arcs_branch_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:branch]],\n:arcs_branch_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:branch]],\n:arcs_branch – the set of arcs from both arcs_from and arcs_to,\n:arcs_switch_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:switch]],\n:arcs_switch_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:switch]],\n:arcs_switch – the set of arcs from both arcs_switch_from and arcs_switch_to,\n:arcs_transformer_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:transformer]],\n:arcs_transformer_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:transformer]],\n:arcs_transformer – the set of arcs from both arcs_transformer_from and arcs_transformer_to,\n:bus_arcs_branch – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_branch]]),\n:bus_arcs_transformer – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_transformer]]),\n:bus_arcs_switch – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_switch]]),\n:buspairs – (see buspair_parameters(ref[:arcs_branch_from], ref[:branch], ref[:bus])),\n:bus_gens – the mapping Dict(i => [gen[\"gen_bus\"] for (i,gen) in ref[:gen]]).\n:bus_loads – the mapping Dict(i => [load[\"load_bus\"] for (i,load) in ref[:load]]).\n:bus_shunts – the mapping Dict(i => [shunt[\"shunt_bus\"] for (i,shunt) in ref[:shunt]]).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.ref_calc_storage_injection_bounds-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.ref_calc_storage_injection_bounds","text":"computes storage bounds\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_psd_real-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_psd_real","text":"For debugging / exploration: real-valued SDP to SDP relaxation based on PSDness of principal minors, default is 3x3 SDP relaxation\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc-Tuple{JuMP.Model, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc","text":"See section 4.3 for complex to real PSD constraint transformation: @article{Fazel2001, author = {Fazel, M. and Hindi, H. and Boyd, S.P.}, title = {{A rank minimization heuristic with application to minimum order system approximation}}, doi = {10.1109/ACC.2001.945730}, journal = {Proc. American Control Conf.}, number = {2}, pages = {4734–4739}, url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=945730}, volume = {6}, year = {2001} }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_complex-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_complex","text":"SDP to SOC relaxation of type 2, applied to complex-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_complex_conic-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_complex_conic","text":"SDP to SOC relaxation of type 2, applied to complex-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_conic-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_conic","text":"See section 4.3 for complex to real PSD constraint transformation: @article{Fazel2001, author = {Fazel, M. and Hindi, H. and Boyd, S.P.}, title = {{A rank minimization heuristic with application to minimum order system approximation}}, doi = {10.1109/ACC.2001.945730}, journal = {Proc. American Control Conf.}, number = {2}, pages = {4734–4739}, url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=945730}, volume = {6}, year = {2001} }\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_real-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_real","text":"SDP to SOC relaxation of type 2, applied to real-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.relaxation_psd_to_soc_real_conic-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.relaxation_psd_to_soc_real_conic","text":"SDP to SOC relaxation of type 2, applied to real-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.remove_all_bounds!-Tuple{Any}","page":"Modeling Components","title":"PowerModelsDistribution.remove_all_bounds!","text":"removes all fields ending in 'ub' or 'lb'\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.reset_logging_level!-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution.reset_logging_level!","text":"Resets the log level to Info\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.restore_global_logger!-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution.restore_global_logger!","text":"Restores the global logger to its default state (before PMD was loaded)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_ac_mc_opf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_ac_mc_opf","text":"depreciation warning for runacmc_opf\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_ac_mc_opf_oltc-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_ac_mc_opf_oltc","text":"depreciation warning for runacmcopfoltc\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_ac_mc_pf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_ac_mc_pf","text":"Power Flow problem with ACPUPowerModel\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld","text":"depreciation warning for runmcmld\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld_bf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld_bf","text":"depreciation warning for runmcmld_bf\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_mld_uc-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_mld_uc","text":"depreciation warning for runmcmld_uc\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_model-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any, Function}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_model","text":"depreciation message for runmcmodel\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf","text":"depreciation warning for runmcopf\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_oltc-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_oltc","text":"depreciation warning for runmcopf_oltc\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_opf_pbs-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_opf_pbs","text":"depreciation message for runmcopf_pbs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf","text":"Power Flow Problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mc_pf_pbs-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mc_pf_pbs","text":"depreciation message for runmcopf_pbs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mn_mc_mld_simple-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mn_mc_mld_simple","text":"depreciation warning for runmnmcmldsimple\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.run_mn_mc_opf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.run_mn_mc_opf","text":"depreciation warning for runmnmc_opf\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.set_logging_level!-Tuple{Symbol}","page":"Modeling Components","title":"PowerModelsDistribution.set_logging_level!","text":"Sets the logging level for PMD: :Info, :Warn, :Error\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.set_lower_bound-Tuple{JuMP.VariableRef, Any}","page":"Modeling Components","title":"PowerModelsDistribution.set_lower_bound","text":"Local wrapper method for JuMP.setlowerbound, which skips NaN and infinite (-Inf only)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.set_time_elapsed!-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\", Union{Real, Vector{var\"#s3000\"} where var\"#s3000\"<:Real}}","page":"Modeling Components","title":"PowerModelsDistribution.set_time_elapsed!","text":"helper function to set time_elapsed in multinetwork data\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.set_upper_bound-Tuple{JuMP.VariableRef, Any}","page":"Modeling Components","title":"PowerModelsDistribution.set_upper_bound","text":"Local wrapper method for JuMP.setupperbound, which skips NaN and infinite (+Inf only)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.silence!-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution.silence!","text":"Sets loglevel for PMD to :Error, silencing Info and Warn\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.simplify_cost_terms!-Tuple{Dict{String, var\"#s114\"} where var\"#s114\"}","page":"Modeling Components","title":"PowerModelsDistribution.simplify_cost_terms!","text":"trims zeros from higher order cost terms\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.sol_data_model!-Tuple{AbstractUBFModel, Dict{String, var\"#s766\"} where var\"#s766\"}","page":"Modeling Components","title":"PowerModelsDistribution.sol_data_model!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.sol_data_model!-Tuple{AbstractUnbalancedACRModel, Dict{String, var\"#s766\"} where var\"#s766\"}","page":"Modeling Components","title":"PowerModelsDistribution.sol_data_model!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.sol_data_model!-Tuple{AbstractUnbalancedPowerModel, Dict{String, var\"#s766\"} where var\"#s766\"}","page":"Modeling Components","title":"PowerModelsDistribution.sol_data_model!","text":"converts the solution data into the data model's standard space, polar voltages and rectangular power\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.sol_polar_voltage!-Tuple{AbstractUnbalancedPowerModel, Dict{String, var\"#s766\"} where var\"#s766\"}","page":"Modeling Components","title":"PowerModelsDistribution.sol_polar_voltage!","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solution_make_si-Tuple{Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solution_make_si","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_mld-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_mld","text":"Solve load shedding problem with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_mld_uc-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_mld_uc","text":"Solve unit commitment load shedding problem (!relaxed)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_model-Tuple{Dict{String, var\"#s2998\"} where var\"#s2998\", Type, Any, Function}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_model","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_model-Tuple{String, Type, Any, Function}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_model","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_opf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_opf","text":"Solve Optimal Power Flow\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_opf_oltc-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_opf_oltc","text":"Solve on-load tap-changer OPF\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_opf_pbs-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_opf_pbs","text":"Solve OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_pf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_pf","text":"Power Flow Problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mc_pf_pbs-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mc_pf_pbs","text":"Solve PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mn_mc_mld_simple-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mn_mc_mld_simple","text":"Solve multinetwork load shedding problem with storage\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.solve_mn_mc_opf-Tuple{Union{String, Dict{String, var\"#s3001\"} where var\"#s3001\"}, Type, Any}","page":"Modeling Components","title":"PowerModelsDistribution.solve_mn_mc_opf","text":"Solve multinetwork optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.sort_multinetwork!-Tuple{Dict{String, var\"#s2997\"} where var\"#s2997\", Vector{var\"#s2996\"} where var\"#s2996\"}","page":"Modeling Components","title":"PowerModelsDistribution.sort_multinetwork!","text":"helper function to manually sort your multinetwork frames\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.standardize_cost_terms!-Tuple{Dict{String, var\"#s104\"} where var\"#s104\"}","page":"Modeling Components","title":"PowerModelsDistribution.standardize_cost_terms!","text":"ensures all polynomial costs functions have the same number of terms\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.transform_data_model-Tuple{Dict{String, var\"#s3001\"} where var\"#s3001\"}","page":"Modeling Components","title":"PowerModelsDistribution.transform_data_model","text":"transforms model between engineering (high-level) and mathematical (low-level) models\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.transform_solution-Tuple{Dict{String, var\"#s2983\"} where var\"#s2983\", Dict{String, var\"#s2982\"} where var\"#s2982\"}","page":"Modeling Components","title":"PowerModelsDistribution.transform_solution","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractLPUBFModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current_imaginary","text":"variable: ci[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current_real","text":"variable: cr[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current_series_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current_series_imaginary","text":"variable: csi[l] for l in branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_current_series_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_current_series_real","text":"variable: csr[l] for l in branch\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_flow_ne_reactive-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_flow_ne_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power","text":"branch flow variables, delegated back to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power-Tuple{LPUBFDiagModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power_imaginary","text":"variable: q[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power_real","text":"variable: p[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_branch_power_real-Tuple{Union{AbstractUnbalancedNFAModel, DCPUPowerModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_branch_power_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedACPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedACRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedDCPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedNFAModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"nothing to do, these models do not have complex voltage variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{LPUBFDiagModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_angle-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_angle","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_imaginary_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_imaginary_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_indicator","text":"Create variables for bus status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_on_off","text":"on/off voltage magnitude variable\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_only-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_only","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr","text":"variable: w[i] >= 0 for i in `buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr_on_off","text":"voltage variable magnitude squared (relaxed form)\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedDCPModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{LPUBFDiagModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"Create voltage variables for branch flow model\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_prod_hermitian-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_prod_hermitian","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_bus_voltage_real_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_bus_voltage_real_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_gen_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_gen_indicator","text":"Create variables for generator status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_current-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_current","text":"For the matrix KCL formulation, the generator needs an explicit current variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_current_imaginary","text":"variable: cig[j] for j in gen\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_current_real","text":"variable: crg[j] for j in gen\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power","text":"create variables for generators, delegate to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power-Tuple{SDPUBFKCLMXModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power","text":"For the matrix KCL formulation, the generator needs an explicit current and power variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_mx-Tuple{SDPUBFKCLMXModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_mx","text":"For the matrix KCL formulation, the generator needs an explicit power variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_generator_power_real_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_generator_power_real_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_current-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_current-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_current","text":"All loads need a current variable; for wye loads, this variable will be in the wye reference frame whilst for delta currents it will be in the delta reference frame.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_indicator","text":"Create variables for demand status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power","text":"Create a dictionary with values of type Any for the load. Depending on the load model, this can be a parameter or a NLexpression. These will be inserted into KCL.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power-Tuple{SDPUBFKCLMXModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power","text":"The variable creation for the loads is rather complicated because Expressions are used wherever possible instead of explicit variables. All loads need a current variable; for wye loads, this variable will be in the wye reference frame whilst for delta currents it will be in the delta reference frame. All loads need variables for the off-diagonals of the nodal power variables. In some cases, the diagonals elements can be created as Expressions. Delta loads only need a current variable and auxilary power variable (X), and all other load model variables are then linear transformations of these (linear Expressions).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power","text":"These variables reflect the power consumed by the load, NOT the power injected into the bus nodes; these variables only coincide for wye-connected loads with a grounded neutral.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power","text":"The variable creation for the loads is rather complicated because Expressions are used wherever possible instead of explicit variables. Delta loads always need a current variable and auxilary power variable (X), and all other load model variables are then linear transformations of these (linear Expressions). Wye loads however, don't need any variables when the load is modelled as constant power or constant impedance. In all other cases (e.g. when a cone is used to constrain the power), variables need to be created.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power_bus-Tuple{SDPUBFKCLMXModel, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power_bus","text":"The bus qualifier denotes that this is the power withdrawn at the bus; Only for grounded wye-connected loads, this is the same as the power consumed by the multi-phase load. The off-diagonals only need to be created for the matrix KCL formulation.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_load_power_delta_aux-Tuple{Union{AbstractConicUBFModel, AbstractNLPUBFModel}, Vector{Int64}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_load_power_delta_aux","text":"Creates power matrix variable X for delta windings; this defines both the wye-side power Sy and the delta-side power Sd through the lin. transformations Sy = X.Td, Sd = Td.X with Td=[1 -1 0; 0 1 -1; -1 0 1]\n\nSee the paper by Zhao et al. for the first convex relaxation of delta transformations. @INPROCEEDINGS{zhaooptimal2017, \tauthor={C. Zhao, E. Dall'Anese and S. Low}, \tbooktitle={IREP 2017 Bulk Power Systems Dynamics and Control Symposium}, \ttitle={{Optimal Power Flow in Multiphase Radial Networks with Delta Connections}}, \tyear={2017}, \tmonth={},     url={https://www.nrel.gov/docs/fy18osti/67852.pdf} }\n\nSee upcoming paper for discussion of bounds. [reference added when accepted]\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_oltc_transformer_tap-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_oltc_transformer_tap","text":"Create tap variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_shunt_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_shunt_indicator","text":"Create variables for shunt status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_slack_bus_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_slack_bus_power","text":"generates variables for both active and reactive slack at each bus\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_slack_bus_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_slack_bus_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_slack_bus_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_slack_bus_power_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_current-Tuple{AbstractUBFModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_current","text":"do nothing by default but some formulations require this\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_current-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_current","text":"do nothing by default but some formulations require this\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_indicator","text":"Create variables for storage status\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power","text":"variables for modeling storage units, includes grid injection and internal variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_control_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_control_imaginary","text":"a reactive power slack variable that enables the storage device to inject or consume reactive power at its connecting bus, subject to the injection limits of the device.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_control_imaginary_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_control_imaginary_on_off","text":"a reactive power slack variable that enables the storage device to inject or consume reactive power at its connecting bus, subject to the injection limits of the device.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off","text":"Create variables for reactive storage injection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_mi-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_mi","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_mi_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_mi_on_off","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_on_off","text":"Create variables for active and reactive storage injection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_storage_power_real_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_storage_power_real_on_off","text":"Create variables for active storage injection\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_current-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_current_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_current_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_power","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_power_real","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_switch_state-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_switch_state","text":"switch state (open/close) variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_current-Tuple{AbstractUnbalancedIVRModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_current","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_current_imaginary","text":"variable: ci[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_current_real","text":"variable: cr[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_power-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"Creates variables for both active and reactive power flow at each transformer.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_power_imaginary","text":"Create variables for the reactive power flowing into all transformer windings.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_power_real","text":"Create variables for the active power flowing into all transformer windings.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mc_transformer_power_real-Tuple{Union{AbstractUnbalancedNFAModel, DCPUPowerModel}}","page":"Modeling Components","title":"PowerModelsDistribution.variable_mc_transformer_power_real","text":"Create variables for the active power flowing into all transformer windings\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_complex-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_complex","text":"Shorthand to create two real matrix variables, where the first is the real part and the second the imaginary part. If the name argument is a String, it will be suffixed with 're' and  'im'. It is possible to  specify the names of the real and imaginary part directly as a Tuple as well (to achieve P and Q instead of Sre and Sim for example).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_complex_with_diag-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_complex_with_diag","text":"Same as variablemxcomplex, but square and the diagonal of the matrix variables consists of the constants passed as the diagre and diagim argument. The diag argument is a dictionary of (index, 1d-array) pairs. Useful for power matrices with specified diagonals (constant power wye loads).\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_hermitian-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_hermitian","text":"Returns a pair of symmetric and skew-symmetric matrix variables.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real","text":"This function creates a set of real matrix variables of size NxM, indexed over the elements of the indices argument. The upper and lower bounds have to be specified, and are dictionaries with the indices as keys and the matrix bounds as values. The name and prefix arguments will be combined into the base_name argument for JuMP; the prefix will typically be the network number nw. Instead of sequentially creating the matrix variables, the elements of the matrices are created sequentially for all matrices at once. I.e., we loop over the elements, and not over the indices. This is needed so that the variable names printed by JuMP are in line with the current design.\n\nReturns a dictionary of (index, matrix  variable) pairs\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real_skewsymmetric-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real_skewsymmetric","text":"Same as variablemxreal, but adds skew-symmetry structure.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real_symmetric-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real_symmetric","text":"Same as variablemxreal, but adds symmetry structure\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_mx_real_with_diag-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Modeling Components","title":"PowerModelsDistribution.variable_mx_real_with_diag","text":"Same as variablemxreal, but has to be square and the diagonal of the matrix variables consists of the elements passed as the diag argument. The diag argument is a dictionary of (index, 1d-array) pairs. Useful for power matrices with specified diagonals (constant power wye loads). If not specified, the diagonal elements are set to zero.\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_storage_charge-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_storage_charge","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_storage_complementary_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_storage_complementary_indicator","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_storage_discharge-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_storage_discharge","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.variable_storage_energy-Tuple{AbstractUnbalancedPowerModel}","page":"Modeling Components","title":"PowerModelsDistribution.variable_storage_energy","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsDistribution.@pmd_fields-Tuple{}","page":"Modeling Components","title":"PowerModelsDistribution.@pmd_fields","text":"a macro for adding the base PowerModels fields to a type definition\n\n\n\n\n\n","category":"macro"},{"location":"library/#PowerModelsDistribution.@smart_constraint-Tuple{Any, Any, Any}","page":"Modeling Components","title":"PowerModelsDistribution.@smart_constraint","text":"detection of whether a constraint should be NL or not\n\n\n\n\n\n","category":"macro"},{"location":"eng2math/#Engineering-to-Mathematical-Data-Model-Mapping","page":"Conversion to Mathematical Model","title":"Engineering to Mathematical Data Model Mapping","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"In this document we define the mapping from the engineering data model down to the mathematical data model for each physical component.","category":"page"},{"location":"eng2math/#bus","page":"Conversion to Mathematical Model","title":"bus","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Buses are parsed into bus and potentially shunt objects.","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"The mathematical bus model contains only lossless connections to ground. All other connections to grounds are converted to equivalent shunts at that bus. For example, take a bus defined as","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"bus_eng = Dict(\"grounded\"=>[4, 5], \"rg\"=>[1.0, 0.0], \"xg\"=>[2.0, 0.0],...).","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"This is equivalent to a shunt g+im*b = 1/(1.0+im*2.0) connected to terminal 4, and a lossless grounding at terminal 5 (since rg[2]==xg[2]==0.0). This is mapped to","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"bus_math = Dict(\"grounded\"=>[5], ...),","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"shunt_math = Dict(\"connections\"=>[4], \"b\"=>[b], \"g\"=>[g]...).","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"This simplifies the mathematical model, as the modeller does no longer have to consider lossy groundings explicitly.","category":"page"},{"location":"eng2math/#line","page":"Conversion to Mathematical Model","title":"line","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Lines are parsed into branch objects with transformer=false","category":"page"},{"location":"eng2math/#switch","page":"Conversion to Mathematical Model","title":"switch","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Switches are parsed into switch. If there are loss parameters provided (i.e. rs and/or xs) then a virtual branch and virtual bus are created to model the impedance","category":"page"},{"location":"eng2math/#transformer","page":"Conversion to Mathematical Model","title":"transformer","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"A transformer can have N windings, each with its own configuration (delta or wye are supported). This is decomposed to a network of N lossless, two-winding transformers which connect to an internal loss model. The to-winding is always wye-connected, hence we refer to these transformers as 'asymmetric'.","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"The internal loss model is a function of","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"the winding resistance rw,\nthe short-circuit reactance xsc,\nthe no-load loss properties noloadloss (resistive) and magnetizing current imag (reactive).","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"If all of these are non-zero, this leads to an internal loss model consisting of N virtual buses, (N^2+N)/2 virtual branches, and 1 shunt. These virtual buses and branches are automatically merged and simplified whenever possible; e.g., when all these loss parameters are zero, this simplifies to a single virtual bus, to which all two-winding transformers connect.","category":"page"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"For more detail, please refer to [upcoming technical paper]. #TODO add link to paper","category":"page"},{"location":"eng2math/#shunt","page":"Conversion to Mathematical Model","title":"shunt","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Shunts are parsed directly into shunt objects.","category":"page"},{"location":"eng2math/#load","page":"Conversion to Mathematical Model","title":"load","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Loads are parsed into load objects. See the discussion under the Load Model documentation on the sidebar, for a detailed discussion of the various load models.","category":"page"},{"location":"eng2math/#generator","page":"Conversion to Mathematical Model","title":"generator","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Generators are parsed into gen objects.","category":"page"},{"location":"eng2math/#solar","page":"Conversion to Mathematical Model","title":"solar","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Solar objects (photovoltaic systems) are parsed into gen objects.","category":"page"},{"location":"eng2math/#voltage_source","page":"Conversion to Mathematical Model","title":"voltage_source","text":"","category":"section"},{"location":"eng2math/","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Voltage sources are parsed into gen objects. If loss parameters are specified (i.e. rs and/or xs) then a virtual bus and branch are created to model the internal impedance.","category":"page"},{"location":"developer/#Developer-Documentation","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"See CONTRIBUTING.md","category":"page"},{"location":"external-data-formats/#External-Data-Formats","page":"External Data Formats","title":"External Data Formats","text":"","category":"section"},{"location":"external-data-formats/#OpenDSS","page":"External Data Formats","title":"OpenDSS","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"PowerModelsDistribution supports parsing OpenDSS format files. In particular, we support a raw parsing of all OpenDSS specified components into a dictionary (serializable) structure, and support converting the data values of a smaller subsection of components into their expected types. Those include","category":"page"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"Line\nLoad\nGenerator\nCapactior (shunt capacitors only)\nReactor\nTransformer\nLinecode\nXfmrcode\nLoadshape\nXYCurve\nCircuit\nVSource\nPVSystem\nStorage","category":"page"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"Of those, a subset of configurations are converted into a PowerModelsDistribution internal data model, namely:","category":"page"},{"location":"external-data-formats/#Edge-Elements","page":"External Data Formats","title":"Edge Elements","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"line (from lines and line reactors)\ntransformer (arbitrary winding, all connections except zig-zag)\nswitch (from lines w/ switch=y)","category":"page"},{"location":"external-data-formats/#Node-Elements","page":"External Data Formats","title":"Node Elements","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"generator\nvoltage_source\nsolar (from PVSystem)\nload (incl. support for constant POWER, constant IMPEDANCE, constant CURRENT, and EXPONENTIAL models)\nshunt (from shunt capacitors and shunt reactors)\nstorage","category":"page"},{"location":"external-data-formats/#Data-Elements","page":"External Data Formats","title":"Data Elements","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"linecode\nxfmrcode\ntime_series (from loadshapes)","category":"page"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"Several notes about the specific design choices w.r.t. OpenDSS are explained below.","category":"page"},{"location":"external-data-formats/#Circuit","page":"External Data Formats","title":"Circuit","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"The default connection to the transmission system is modeled as an ideal voltage source named \"source\" in OpenDSS, which is connected by default to a node named \"sourcebus\", but this can be changed.","category":"page"},{"location":"external-data-formats/#Lines","page":"External Data Formats","title":"Lines","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"Although Lines and Linecodes are supported, the more generic LineGeometry is not yet supported.","category":"page"},{"location":"external-data-formats/#Transformers","page":"External Data Formats","title":"Transformers","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"Unfortunately, in the OpenDSS format, multi-phase transformers with different taps for each phase are not explicitly supported, so to work around this limitation multiple single phase transformers should be defined, which are then \"banked\" together using the bank property.","category":"page"},{"location":"external-data-formats/#Capacitors-and-Reactors","page":"External Data Formats","title":"Capacitors and Reactors","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"Capacitors and reactors are supported as shunts, although shunts to ground via delta connections are not yet supported. Furthermore, generic reactors are not supported, only those whose second terminal is wye connected to ground (default for unspecified second terminal). Reactors are also supported as a resistanceless line if their second terminal is connected, but only for topological continuity of the network.","category":"page"},{"location":"external-data-formats/#PowerModelsDistribution-JSON","page":"External Data Formats","title":"PowerModelsDistribution JSON","text":"","category":"section"},{"location":"external-data-formats/","page":"External Data Formats","title":"External Data Formats","text":"You can export a PowerModelsDistribution data structure to a JSON file using the print_file command and parse one in using the parse_file command","category":"page"},{"location":"load-model/#Load-Models","page":"Load Models","title":"Load Models","text":"","category":"section"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"S^d=S^d_1S^d_n^T","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"is a column vector ntimes 1, specifying for each individual load how much power is consumed. By definition, this is","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"S^d=U^dodot left(I^dright)^*","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"where U^d is the voltage applied across each individual load and I^d is the current drawn by each load. At the same time, the composed load is connected to a bus with voltage U^textbus, and draws a current I^textbus and power S^textbus. How these quantities relate to each other, depends on how the load is connected.","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"(S^d U^d I^d)  (S^textbus U^textbus I^textbus)","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"In the implementations, these variables are referred to as","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"beginalign\nS^d=textpd+jtextqd  S^textbus=textpd_bus+jtextqd_bus\nI^d=textcrd+jtextcid  I^textbus=textcrd_bus+jtextcid_bus\nU^d=textvrd+jtextvid  U^textbus=textvr+jtextvi\nendalign","category":"page"},{"location":"load-model/#Voltage-dependency","page":"Load Models","title":"Voltage dependency","text":"","category":"section"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"The general, exponential load model is defined as P^d_i = P^d0_i left(fracV^d_iV^d0_iright)^alpha_i = a_i left(V^d_iright)^alpha_i Q^d_i = Q^d0_i left(fracV^d_iV^d0_iright)^beta_i = b_i left(V^d_iright)^beta_i","category":"page"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"There are a few cases which get a special name: constant power (alpha=beta=0), constant current (alpha=beta=1), and constant impedance (alpha=beta=2).","category":"page"},{"location":"load-model/#Wye-connected-Loads","page":"Load Models","title":"Wye-connected Loads","text":"","category":"section"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"A wye-connected load connects between a set of phases mathcalP and a neutral conductor n. The voltage as seen by each individual load is then U^d = U^textbus_mathcalP-U^textbus_n whilst the current I^textbus_mathcalP = I^textdI^textbus_n=-1^TI^d We now develop the expression for the power drawn at the bus for the phase conductors $   S^\\text{bus}\\mathcal{P} = (U^d+U^\\text{bus}n)\\odot(I^d)^*       = S^d+U^\\text{bus}n S^d\\oslash U^d. $ From conservation of power or simply the formulas above, $     S^\\text{bus}n = -1^TS^\\text{bus}_\\mathcal{P}+1^TS^d. $","category":"page"},{"location":"load-model/#Grounded-neutral","page":"Load Models","title":"Grounded neutral","text":"","category":"section"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"Note that when the neutral is grounded, i.e. U^textbus_n=0, these formulas simplify to S^textbus_mathcalP=S^dS^textbus_n=0 which is why in Kron-reduced unbalanced networks, you can directly insert the power consumed by the loads, in the nodal power balance equations.","category":"page"},{"location":"load-model/#Delta-connected-Loads","page":"Load Models","title":"Delta-connected Loads","text":"","category":"section"},{"location":"load-model/","page":"Load Models","title":"Load Models","text":"Firstly, define the three-phase delta transformation matrix M^Delta_3 = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix which can be extended to more phases in a straight-forward manner. Now, U^d = M^Delta U^textbus I^textbus = left(M^Deltaright)^T I^d We can related S^textbus to U^textbus and I^d $ S^\\text{bus} = U^\\text{bus}\\odot \\left(I^\\text{bus}\\right)^*              = U^\\text{bus}\\odot \\left(M^\\Delta\\right)^T\\left(I^d\\right)^, $ and using the fact that \\left(I^d\\right)^=S^d \\oslash U^d and the expression above for U^d, $ S^\\text{bus} = U^\\text{bus}\\left(M^\\Delta\\right)^T S^d \\oslash M^\\Delta U^\\text{bus} $","category":"page"},{"location":"formulation-details/#Three-phase-formulation-details","page":"Formulation Details","title":"Three-phase formulation details","text":"","category":"section"},{"location":"formulation-details/#AbstractUnbalancedACPModel","page":"Formulation Details","title":"AbstractUnbalancedACPModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Real-valued formulation from:","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Formulation without shunts: Mahdad, B., Bouktir, T., & Srairi, K. (2006). A three-phase power flow modelization: a tool for optimal location and control of FACTS devices in unbalanced power systems. In IEEE Industrial Electronics IECON (pp. 2238–2243).","category":"page"},{"location":"formulation-details/#AbstractUnbalancedDCPModel","page":"Formulation Details","title":"AbstractUnbalancedDCPModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Applying all of the standard DC linearization tricks to the AbstractUnbalancedACPModel","category":"page"},{"location":"formulation-details/#SOCWRModel","page":"Formulation Details","title":"SOCWRModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Applying the standard BIM voltage cross-product (sine and cosine) substitution tricks to AbstractUnbalancedACPModel results immediately in a SOC formulation.","category":"page"},{"location":"formulation-details/#SDPUBFModel","page":"Formulation Details","title":"SDPUBFModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"The BFM SDP relaxation as described in:","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. doi:10.1109/PSCC.2014.7038399","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Note that this formulation is complex-valued and additional steps are needed to implement this in JuMP.","category":"page"},{"location":"formulation-details/#SOCNLPUBFModel","page":"Formulation Details","title":"SOCNLPUBFModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"The starting point is SDPUBFModel. The SDP constraint can be relaxed to a set of SOC constraints, starting from either the real or complex form of the matrix on which the PSD-ness constraint is applied.","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Kim, S., Kojima, M., & Yamashita, M. (2003). Second order cone programming relaxation of a positive semidefinite constraint. Optimization Methods and Software, 18(5), 535–541. doi:10.1080/1055678031000148696\nAndersen, M. S., Hansson, A., & Vandenberghe, L. (2014). Reduced-complexity semidefinite relaxations of optimal power flow problems. IEEE Trans. Power Syst., 29(4), 1855–1863.","category":"page"},{"location":"formulation-details/#SOCConicUBFModel","page":"Formulation Details","title":"SOCConicUBFModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"See SOCNLPUBFModel","category":"page"},{"location":"formulation-details/#LPUBFFullModel","page":"Formulation Details","title":"LPUBFFullModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Matrix formulation that generalizes simplified DistFlow equations, as introduced in :","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. doi:10.1109/PSCC.2014.7038399","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Note that this formulation is complex-valued and additional steps are needed to implement this in JuMP.","category":"page"},{"location":"formulation-details/#LPUBFDiagModel","page":"Formulation Details","title":"LPUBFDiagModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"This formulation has originally been developed by Sankur et al.","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Sankur, M. D., Dobbe, R., Stewart, E., Callaway, D. S., & Arnold, D. B. (2016). A linearized power flow model for optimization in unbalanced distribution systems. arXiv:1606.04492v2","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"This formulation is here cast as only considering the diagonal elements defined in LPUBFFullModel, which furthermore leads to the imaginary part of the lifted node voltage variable W being redundant and substituted out.","category":"page"},{"location":"formulation-details/#LPLinUBFModel","page":"Formulation Details","title":"LPLinUBFModel","text":"","category":"section"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Scalar reformulation of:","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"Sankur, M. D., Dobbe, R., Stewart, E., Callaway, D. S., & Arnold, D. B. (2016). A linearized power flow model for optimization in unbalanced distribution systems. arXiv:1606.04492v2","category":"page"},{"location":"formulation-details/","page":"Formulation Details","title":"Formulation Details","text":"This formulation was already derived in real variables and parameters.","category":"page"},{"location":"quickguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Once PowerModelsDistribution is installed, Ipopt is installed, and a network data file (e.g. \"case3_unbalanced.dss\" in the package folder under ./test/data) has been acquired, an unbalanced AC Optimal Power Flow can be executed with,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using PowerModelsDistribution\nusing Ipopt\n\nrun_ac_mc_opf(\"case3_unbalanced.dss\", with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/#Parsing-files","page":"Getting Started","title":"Parsing files","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"To parse an OpenDSS file into PowerModelsDistribution's default ENGINEERING format, use the parse_file command","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"eng = parse_file(\"case3_unbalanced.dss\")","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"To examine the MATHEMATICAL model it is possible to transform the data model using the transform_data_model command, but this step is not necessary to run a problem.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"math = transform_data_model(eng)","category":"page"},{"location":"quickguide/#Getting-Results","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The run commands in PowerModelsDistribution return detailed results data in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result = run_ac_mc_opf(eng, with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can pass the file path string directly:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result = run_ac_mc_opf(\"case3_unbalanced.dss\", with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The function \"runacmcopf\" is a short-hand for a more general formulation-independent OPF execution, \"runmcopf\". For example, `runacmcopf` is equivalent to,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"run_mc_opf(eng, ACPUPowerModel, with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"ACPUPowerModel indicates an unbalanced (i.e., multiconductor) AC formulation in polar coordinates.  This more generic run_mc_opf() allows one to solve an OPF problem with any power network formulation in PowerModelsDistribution.  For example, the SDPUBFPowerModel relaxation of unbalanced Optimal Power Flow (branch flow model) can be run with,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using SCS\nrun_mc_opf(eng, SDPUBFPowerModel, with_optimizer(SCS.Optimizer))","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Note that you have to use a SDP-capable solver, e.g. the open-source solver SCS, to solve SDP models.","category":"page"},{"location":"quickguide/#Inspecting-the-Formulation","page":"Getting Started","title":"Inspecting the Formulation","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a run_mc_opf call into seperate model building and solving steps.  This allows inspection of the JuMP model created by PowerModelsDistribution for the AC-OPF problem. Note that the MATHEMATICAL model must be passed to instantiate_model, so the data model must either be transformed with transform_data_model or parsed directly to a MATHEMATICAL model using the data_model keyword argument:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"math = parse_file(\"case3_unbalanced.dss\"; data_model=MATHEMATICAL)\npm = instantiate_model(math, ACPUPowerModel, build_mc_opf; ref_extensions=[ref_add_arcs_trans!])\nprint(pm.model)\noptimize_model!(pm, optimizer=with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quickguide/#Providing-a-Warm-Start","page":"Getting Started","title":"Providing a Warm Start","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"To reduce the number of solver iterations, it might be useful to provide a (good) initial value to some or all optimization variables. To do so, it is sufficient to assign a value or vector (depending on the dimensions of the variable) in the data dictionary, under the key variablename_start. The example below shows how to do it for the vm and va variables.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"math = parse_file(\"case3_unbalanced.dss\"; data_model=MATHEMATICAL)\nmath[\"bus\"][\"2\"][\"vm_start\"] = [0.9959, 0.9959, 0.9959]\nmath[\"bus\"][\"2\"][\"va_start\"] = [0.00, -2.0944, 2.0944]","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Providing a bad initial value might result in the opposite effect: longer calculation times or convergence issues, so the start value assignment should be done attentively. If no initial value is provided, a flat start is assigned by default. The default initial value of each variable is indicated in the function where the variable is defined, as the last argument of the comp_start_value function. In the case of vm, this is 1.0, as shown below:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"vm = var(pm, nw)[:vm] = Dict(i => JuMP.@variable(pm.model,\n        [c in 1:ncnds], base_name=\"$(nw)_vm_$(i)\",\n        start = comp_start_value(ref(pm, nw, :bus, i), \"vm_start\", c, 1.0)\n    ) for i in ids(pm, nw, :bus)\n)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Finally, it should be noted that if va_start and vm_start are present in a data dictionary which is passed to the ACR or IVR formulation, these are converted to their rectangular equivalents and used as vr_start and vi_start.","category":"page"},{"location":"quickguide/#Examples","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"More examples of working with the engineering data model can be found in the /examples folder of the PowerModelsDistribution.jl repository.","category":"page"},{"location":"specifications/#Problem-Specifications","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"In addition to the standard power flow run_mc_pf, and optimal power flow run_mc_opf, there are several notable problem specifications included in PowerModelsDistribution","category":"page"},{"location":"specifications/#Optimal-Power-Flow-(OPF)-with-On-Load-Tap-Changers-(OLTC)","page":"Problem Specifications","title":"Optimal Power Flow (OPF) with On-Load Tap Changers (OLTC)","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"This problem is identical to mc_opf, except that all transformers are now modelled as on-load tap changers (OLTCs). Each phase has an individual tap ratio, which can be either variable or fixed, as specified in the data model.","category":"page"},{"location":"specifications/#OLTC-Objective","page":"Problem Specifications","title":"OLTC Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_fuel_cost(pm)","category":"page"},{"location":"specifications/#OLTC-Variables","page":"Problem Specifications","title":"OLTC Variables","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"variable_mc_voltage(pm)\nvariable_mc_branch_flow(pm)\n\nfor c in conductor_ids(pm)\n    PowerModels.variable_generation(pm, cnd=c)\nend\nvariable_mc_transformer_flow(pm)\nvariable_mc_oltc_tap(pm)","category":"page"},{"location":"specifications/#OLTC-Constraints","page":"Problem Specifications","title":"OLTC Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"constraint_mc_model_voltage(pm)\n\nfor i in ids(pm, :ref_buses)\n    constraint_mc_theta_ref(pm, i)\nend\n\nfor i in ids(pm, :bus), c in conductor_ids(pm)\n    constraint_mc_power_balance(pm, i, cnd=c)\nend\n\nfor i in ids(pm, :branch)\n    constraint_mc_ohms_yt_from(pm, i)\n    constraint_mc_ohms_yt_to(pm, i)\n\n    for c in conductor_ids(pm)\n        PowerModels.constraint_voltage_angle_difference(pm, i, cnd=c)\n\n        PowerModels.constraint_thermal_limit_from(pm, i, cnd=c)\n        PowerModels.constraint_thermal_limit_to(pm, i, cnd=c)\n    end\nend\n\nfor i in ids(pm, :transformer)\n    constraint_mc_oltc(pm, i)\nend","category":"page"},{"location":"specifications/#Minimal-Load-Delta-(MLD)-Problem-Specification","page":"Problem Specifications","title":"Minimal Load Delta (MLD) Problem Specification","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"Load shed (continuous) problem. See \"Relaxations of AC Maximal Load Delivery for Severe Contingency Analysis\" by C. Coffrin et al. (DOI: 10.1109/TPWRS.2018.2876507) for single-phase case.","category":"page"},{"location":"specifications/#MLD-Variables","page":"Problem Specifications","title":"MLD Variables","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxvariables   nonumber \n z^v_i in 01  forall i in N mbox - bus voltage onoff variable \n z^g_i in 01  forall i in G mbox - generator onoff variable \n z^b_i in 01  forall i in Bmbox - storage onoff variable \n z^d_i in (01)  forall i in L mbox - continuous load shedding variable \n z^s_i in (01)  forall i in H mbox - continuous shunt shedding variable\nendalign","category":"page"},{"location":"specifications/#MLD-Objective","page":"Problem Specifications","title":"MLD Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxminimize left (\nsum_substackiin Ncin C10 left (1-z^v_i right ) + sum_substackiin Lcin C10 omega_icleft Releft (S^d_iright )right left ( 1-z^d_i right )  + sum_substackiin Hcin Cleft  Releft (S^s_i right )right  left (1-z^s_i right )  + sum_substackiin Gcin CDelta^g_i  + sum_substackiin Bcin CDelta^b_i right )\nendalign","category":"page"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"where","category":"page"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nDelta^g_i = left Releft (S^g_i(0) right ) - Releft (S^g_i right ) right  \nDelta^g_i = -left Releft (S^g_i(0) right ) - Releft (S^g_i right ) right  \nDelta^b_i = left Releft (S^b_i(0) right ) - Releft (S^b_i right ) right  \nDelta^b_i = -left Releft (S^b_i(0) right ) - Releft (S^b_i right ) right \nendalign","category":"page"},{"location":"specifications/#MLD-Constraints","page":"Problem Specifications","title":"MLD Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxsubject to   nonumber \n z^v_i v^l_ic leq left  V_ic right  leq z_i^v v^u_ic  forall i in Nforall c in C \n z^g_i S^gl_ic leq S^g_ic leq z^g_i S^gu_ic  forall i in Gforall c in C \n sum_substackkin G_icin C S^g_kc - sum_substackkin L_icin C z^d_k S^d_kc- sum_substackkin H_icin C z^s_k Y^s_kcleft  V_ic right ^2 nonumber \n = sum_substack(ij)in E_icup E_i^Rcin C S_ijc forall i in N\nendalign","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"EditURL = \"https://github.com/lanl-ansi/PowerModelsDistribution.jl/blob/master/examples/engineering_model_helper_functions.jl\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"### A Pluto.jl notebook ###","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"v0.14.2","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"using Markdown\nusing InteractiveUtils","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 30417ccf-d0b4-43d5-9ceb-5b00ef9c8a17","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"begin\n\tusing PowerModelsDistribution\n\tusing LinearAlgebra: diagm\n\tusing Ipopt\nend","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ ff4b2ffa-9d25-11eb-07d0-29751e7b57c2","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"md\"\"\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"Building Engineering Data Models with Helper Functions","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"In this notebook we will demonstrate an easy way to start building new distribution network models in the engineering format using new helper functions added in PowerModelsDistribution v0.9\n\"\"\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ f2654d95-0c8b-4524-ad1f-f0f12a35c570","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"md\"\"\"\nFirst, we need a optimizer. In this case we will use Ipopt and initialize it with JuMP's `optimizer_with_attributes`, which we have exported from PowerModelsDistribution by default for the user\n\"\"\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 1885ce0e-fe1a-4b9b-b652-72cbee21339d","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"ipopt_solver = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\"=>0, \"tol\"=>1e-6)","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 7683dabc-772f-4fdf-a784-549c05084958","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"md\"Initialize an empty `ENGINEERING` model\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 20d3d95d-7817-45de-89e9-ffce0202d8cf","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"Model()","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ d4ce49bd-f38e-44e0-aa3a-4ee3f0f70bf1","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"md\"\"\"\nIn this block we build a three bus network, with neutrals grounded at the source and loads.\n\nWe start with buses, with the sourcebus and loadbus having 4 terminals, with the last terminal grounded.\n\nThen we add a generation source, in this case a voltage source, which is `WYE` configured by default, and therefore expects the last conductor to be a grounded neutral\n\nWe add two three phase lines to connect the buses `sourcebus`, `primary`, and `loadbus`. Note that none of the lines have a neutral conductor.\n\nWe finally add a three-phase load a the `loadbus` bus, but note again that this is a `WYE` configured load, and like the voltage source, this implies that the last conductor is a grounded neutral for the purposes of kron reduction (which is required by default until explicit 4-wire modeling is added to PowerModelsDistribution)\n\nLastly, we need to define the default vbase of the system at the `sourcebus`\n\"\"\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 1ca9657b-85b4-4ea6-901c-d36e23e8440f","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"begin\n\teng = Model()\n\n\tadd_bus!(eng, \"sourcebus\"; terminals=[1,2,3,4], grounded=[4])\n\tadd_bus!(eng, \"primary\"; terminals=[1,2,3])\n\tadd_bus!(eng, \"loadbus\"; terminals=[1,2,3,4], grounded=[4])\n\n\tadd_voltage_source!(eng, \"source\", \"sourcebus\", [1,2,3,4]; vm=[1, 1, 1, 0])\n\n\tadd_linecode!(eng, \"default\", diagm(0=>fill(0.01, 3)), diagm(0=>fill(0.2, 3)))\n\n\tadd_line!(eng, \"trunk\", \"sourcebus\", \"primary\", [1,2,3], [1,2,3]; linecode=\"default\")\n\tadd_line!(eng, \"primary\", \"primary\", \"loadbus\", [1,2,3], [1,2,3]; linecode=\"default\")\n\n\tadd_load!(eng, \"balanced\", \"loadbus\", [1,2,3,4]; pd_nom=[5, 5, 5], qd_nom=[1, 1, 1])\n\n\tadd_vbase_default!(eng, \"sourcebus\", 1)\n\n\teng\nend","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 9010cccb-e174-4dff-b934-7e7be5a93a1d","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"md\"Running this case with OPF gives the results below\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 3ed441b8-2055-41b7-a4b5-29130d5880ed","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"result = solve_mc_opf(eng, ACPUPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 650b6dee-e753-418c-af1e-a0ddda09df81","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"md\"\"\"In the following example, we provide examples of a wider range of component types that can be added using helper functions to give a flavor of what is possible in PowerModelsDistribution v0.9\"\"\"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ 95ecd659-45d0-4bd0-9f32-9cafd78fb2c7","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"begin\n\teng2 = deepcopy(eng)\n\n\tadd_bus!(eng2, \"ttbus\"; terminals=[1,2,3,4], grounded=[4])\n\n\tadd_transformer!(eng2, \"tx1\", \"sourcebus\", \"ttbus\", [1,2,3,4], [1,2,3,4])\n\n\tadd_bus!(eng2, \"loadbus2\"; terminals=[1,2,3,4], grounded=[4])\n\n\tadd_switch!(eng2, \"breaker\", \"ttbus\", \"loadbus2\", [1,2,3], [1,2,3])\n\n\tadd_load!(eng2, \"tload\", \"loadbus2\", [1,2,3,4]; pd_nom=[5, 5, 5], qd_nom=[1, 1, 1])\n\n\tadd_generator!(eng2, \"secondary\", \"loadbus2\", [1,2,3,4]; cost_pg_parameters=[0.0, 1.2, 0])\n\n\tadd_shunt!(eng2, \"cap\", \"loadbus2\", [1,2,3,4]; bs=diagm(0=>fill(1, 3)))\n\n\n\teng2\nend","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ fdaed782-529b-4267-bf73-e26a6a3d4297","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"result2 = solve_mc_opf(eng2, ACPUPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"╔═╡ Cell order: ╟─ff4b2ffa-9d25-11eb-07d0-29751e7b57c2 ╠═30417ccf-d0b4-43d5-9ceb-5b00ef9c8a17 ╠═f2654d95-0c8b-4524-ad1f-f0f12a35c570 ╠═1885ce0e-fe1a-4b9b-b652-72cbee21339d ╟─7683dabc-772f-4fdf-a784-549c05084958 ╠═20d3d95d-7817-45de-89e9-ffce0202d8cf ╟─d4ce49bd-f38e-44e0-aa3a-4ee3f0f70bf1 ╠═1ca9657b-85b4-4ea6-901c-d36e23e8440f ╟─9010cccb-e174-4dff-b934-7e7be5a93a1d ╠═3ed441b8-2055-41b7-a4b5-29130d5880ed ╟─650b6dee-e753-418c-af1e-a0ddda09df81 ╠═95ecd659-45d0-4bd0-9f32-9cafd78fb2c7 ╠═fdaed782-529b-4267-bf73-e26a6a3d4297","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"","category":"page"},{"location":"engineering_model_helper_functions/","page":"Engineering Model Helper Functions","title":"Engineering Model Helper Functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"EditURL = \"https://github.com/lanl-ansi/PowerModelsDistribution.jl/blob/master/examples/engineering_model.jl\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"### A Pluto.jl notebook ###","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"v0.14.2","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"using Markdown\nusing InteractiveUtils","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ f30cd0d0-b0da-4f63-a245-568a763a93d8","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"begin\n\tusing PowerModelsDistribution\n\tusing Ipopt\n\n\tpmd_path = joinpath(dirname(pathof(PowerModelsDistribution)), \"..\")\nend","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ c55b2c42-9d27-11eb-24ca-e90a5472ffbb","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"Introduction to the PowerModelsDistribution Data Models","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"In this notebook we introduce the engineering data model added to PowerModelsDistribution in version v0.9.0. We will give several examples of how to use this new data model directly, including new transformations that have become easier with its introduction, how to convert it to the the lower-level mathematical model that was previously the only user interface we offered, and how to get various types of results using this new model.\n\n# Imports\n\nAll commands in this document with no package namespace specified are directly exported by PowerModelsDistribution or already available in Julia base. Any commands that are only avaiable via an external package will be specified by including by using `import`, which will require specifying the originating package before the command, _e.g._ `Ipopt.Optimizer` as you will see below.\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 1e791262-261d-4756-bec4-edebe4732700","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"In these examples we will use the following optimization solvers, specified using `optimizer_with_attributes` from JuMP v0.21\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 89de80df-1dd0-4f94-a27d-74693a978059","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"ipopt_solver = optimizer_with_attributes(Ipopt.Optimizer, \"tol\"=>1e-6, \"print_level\"=>0)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ e22a7d3e-3f21-41b0-abf2-2c723e87c57e","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n# Parsing Data\n\nHere we give the first example of how to parse data into the `ENGINEERING` data model structure, which is the default data structure type that the user will see without passing additional arguments, as we demonstrate later.\n\nWe start with a 3 bus unbalanced load case provided as a dss file in the `test` folder of the PowerModelsDistribution.jl repository\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 5fe2d186-40c6-46c2-823e-9401cb3b6d6c","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng = parse_file(\"$pmd_path/test/data/opendss/case3_unbalanced.dss\")","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ c884fd5b-4ecb-402b-b228-01b9a61db8bf","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nDifferent information and warning messages will be given depending on the input file. In the case above, these messages all related to various parse notifications that arise during a parse of a dss file, and can be safely ignored\n\nThe resulting data structure is a Julia dictionary. The first notable field is `\"data_model\"` which specifies which data model this data structure corresponds to, in this case `ENGINEERING`. This value is expected to be an `Enum` of type `DataModel`\n\nThe next notable field is `\"settings\"`, which contains some important default/starting values for the distribution network\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ a5b736f9-2776-4760-b073-d02027baef13","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"settings\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 29a8a560-7d5e-4929-877a-2dab17309968","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n- `\"sbase_default\"` is the starting value for the power base,\n- `\"vbases_default\"` is the starting voltage base for the case, and multiple voltage bases can be specified, which would be useful in cases where there are multiple isolated islands with their own generation,\n- `\"voltage_scale_factor\"` is a scaling factor for all voltage values, which in the case of OpenDSS is in kV by default\n- `\"power_scale_factor\"` is a scaling factor for all power values\n- `\"base_frequency\"` is the base frequency of the network in Hz, which is useful to know for mixed frequency networks\n\nNext we look at the `\"bus\"` components\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 9ac6b0ed-58a8-4079-aa9f-d70024f4d4b4","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"bus\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 89846878-ebfc-49a5-91ef-762f692ba5ea","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nWe can see there are three buses in this system, identified by ids `\"primary\"`, `\"sourcebus\"`, and `\"loadbus\"`.\n\n__NOTE__: In Julia, order of Dictionary keys is not fixed, nor does it retain the order in which it was parsed like _e.g._ `Vectors`.\n\nIdentifying components by non-integer names is a new feature of the `ENGINEERING` model, and makes network debugging more straightforward.\n\n__NOTE__: all names are converted to lowercase on parse from the originating dss file.\n\nEach bus component has the following properties in the `ENGINEERING` model\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 8ba081b4-8444-48e0-afce-20649f7fdd01","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"bus\"][\"sourcebus\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2a8c1536-ef5f-4e37-b30e-1bb73982d7b0","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n- `\"terminals\"` indicates which terminals on the bus have active connections\n- `\"grounded\"` indicates which terminals are grounded\n- `\"rg\"` and `\"xg\"` indicate the grounding resistance and reactance of the ground\n- `\"status\"` indicates whether a bus is `ENABLED` or `DISABLED`, and is specified for every component in the engineering model\n\nNext, we look at the `\"line\"` components, which is a generic name for both overhead lines and underground cables, which we do not differentiate between in the nomenclature\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 83ce434c-0f92-46a8-8648-322084044600","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"line\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2f9c3f64-3e5d-423f-939e-8d96bd19e7fe","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"line\"][\"quad\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ f06b9592-0e16-4fd1-bf6e-624ec0cdb8fb","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nAgain, we see components identified by their OpenDSS names. A `\"line\"` is an edge object, which will always have the following properties:\n\n- `\"f_bus\"`\n- `\"t_bus\"`\n- `\"f_connections\"` - list of terminals to which the line is connected on the from-side\n- `\"t_connections\"` - list of terminals to which the line is connected on the to-side\n\nHere we are also introduced to two important concepts, the `\"source_id\"`, which is an easy way to identify from where an object originates in the dss file, and a data type element, pointed to by `\"linecode\"` in this case.\n\nA data type element is an element that does not represent a real engineering object, but only contains data that one of those real objects can refer to, in this case a linecode, which contains information like line resistance/reactance and conductance/susceptance.\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ b15593b9-f775-47af-aa9b-4980a4028faa","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"linecode\"][\"4/0quad\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2e4fe000-449c-4fc0-8707-4c51ac50ab03","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nWe can see that the length of the Vectors for `\"pd_nom\"` and `\"qd_nom\"` are only one, although the number of terminals listed in `\"connections\"` is two. This is because the connection is WYE, and therefore the final connection is a grounded neutral\n\nHere we are also introduced to two new Enums, `WYE`, which gives the connection configuration, and `NO` under dispatchable, which indicates that if this case were used in an MLD problem, _i.e._ with `run_mc_mld` that this load would not be sheddable.\n\nFinally, we show the generation source for this case, which in opendss is a voltage source named `\"source\"`\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 36ca17bc-b560-48c9-988f-255780479d05","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng[\"voltage_source\"][\"source\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 7e5811cf-86a2-43fb-8c94-44091f33c031","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n- `\"vm\"` - specifies the fixed voltage magnitudes per phase at the bus\n- `\"va\"` - specifies the fixed reference angles per phases at the bus\n- `\"rs\"` and `\"xs\"` specifies internal impedances of the voltage source\n\n### Importing raw dss properties\n\nIn case there are additional properties that you want to use from dss, it is possible to import those directly into the `ENGINEERING` (and `MATHEMATICAL`) data structure with the `import_all` keyword argument\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 026088f7-b1df-4647-ad81-52c6c8ea7944","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_all = parse_file(\"../test/data/opendss/case3_unbalanced.dss\"; import_all=true)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 5f72ecec-bb3f-4231-93c1-719e38e17be4","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nYou will note the presence of `\"dss\"` dictionaries under components, and `\"dss_options\"` at the root level\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ f070dbbc-1a55-48f2-aa21-2119eb573b5b","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_all[\"line\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ f3458a5c-70c6-4d0c-8253-4feb0c87ee76","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n### Time Series Parsing Example\n\nIn the `ENGINEERING` model, we have included the `time_series` data type, which holds all time series data and can be referred to similar to `\"linecode\"` as demonstrated above.\n\nBelow we can see an example of a parse that includes some time_series components\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 542e592f-8f75-41f9-8f98-5373b431fcc6","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_ts = parse_file(\"../test/data/opendss/case3_balanced.dss\"; time_series=\"daily\")","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ d0e02ee5-f57c-4286-940d-b01097c840be","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nYou can see that under the actual component, in this case a `\"load\"`, that there is a `\"time_series\"` dictionary that contains `ENGINEERING` model variable names and references to the identifiers of a root-level `time_series` object,\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ e852712c-d09a-41e1-9785-308c219c7ad8","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_ts[\"time_series\"][\"ls1\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 0eba403e-c2ba-4af3-8dcc-fe14a3c22bd7","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nThis feature is useful for building multinetwork data structures, which will be described below in the section on the `MATHEMATICAL` model\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 8d5701d1-9e91-43b5-975b-fc8e0e306e99","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n# Running Optimal Power Flow\n\nIn this section we introduce how to run an optimal power flow (opf) in PowerModelsDistribution on an engineering data model\n\nIn order to run an OPF problem you will need\n\n1. a data model\n2. a formulation\n3. a solver\n\nIn these examples we will use the `eng` model we worked with above, the `ACPUPowerModel`, which is a AC power flow formulation in polar coordinates, and the `ipopt_solver` we already defined above\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 745f33bf-98d7-4b27-95fd-ec6bf5e3d5cf","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result = solve_mc_opf(eng, ACPUPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ fb81d3c1-a47b-46d9-b463-1766022be114","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nThe result of `solve_mc_opf` will be very familiar to those who are already familiar with PowerModels and PowerModelsDistribution. The notable difference will be in the `\"solution\"` dictionary\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 27d5a237-4c2e-4b14-a082-f4847153c8d5","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result[\"solution\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 564200e0-2080-44da-8dbf-37c5e3a38412","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nHere you can see that the solution comes back out by default into the same data model as is provided by the user to the run_ command, as well as being in SI units, as opposed to per unit, which is used during the solve. For example,\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 8b066039-ed65-4617-b404-86952d3fc78e","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result[\"solution\"][\"bus\"][\"loadbus\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ a09de8ab-c1e1-4c9f-9d86-4268ce503cae","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nIf for some reason you want to return the result in per-unit rather than SI, you can specify this in the `solve_` command by\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 763a1504-f927-4dfc-a042-ac66324708a9","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result_pu = solve_mc_opf(eng, ACPUPowerModel, ipopt_solver; make_si=false)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ e7b588e9-fb5f-4383-b5c6-bce9ed8f5a60","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result_pu[\"solution\"][\"bus\"][\"loadbus\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ f882f070-74af-4f3b-9ad1-bd7ad453778f","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n### Branch Flow formulations\n\nPreviously, to use a branch flow formulation, such as `SOCNLPUBFPowerModel`, it was required to use a different `solve_` command, but now, by using multiple dispatch we have simplified this for the user\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ f2fa779e-f62d-4053-b055-e9f0aee6c3f7","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result_bf = solve_mc_opf(eng, SOCNLPUBFPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 544108d1-d1a7-4dc6-9a3c-6a10025cb8a3","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n### Running Time Series Models\n\nBy default, `time_series` object will be ignored when running a model. To use the time series information you will need to have a multinetwork problem specification\n\nIn the example below we use a test case, which is not exported by default, and therefore requires the specification of the PowerModelsDistribution namespace\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ ae8daf6c-4055-497e-905c-d6d5a6373ad3","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result_mn = PowerModelsDistribution._solve_mn_mc_opb(eng_ts, NFAUPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 3d86989a-a4db-4766-aec7-abc9a25ffde8","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n# Engineering Model Transformations\n\nOne of the power things about the engineering model is that data transformations are much more simple. Here we illustrate two examples that are currently included in PowerModelsDistribution, but writing your own data transformation functions will be trivial, as we will show.\n\n__Note__: In v0.9, `apply_kron_reduction!` and `apply_phase_projection!` are applied by default, but can be disabled with the keyword arguments `kron_reduced=false` and `project_phases=false`, respectively in `parse_file` or `transform_data_model`.\n\nFirst, there are several objects that have loss models by default when parsing from dss files, such as voltage sources, transformers, and switches. To remove these loss models, therefore making these components lossless, we can use the included `make_lossess!` function. Here we use a basic 2-winding wye-wye connected transformer case from `test` to illustrate this\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 7a86e26d-fdf6-41b6-b1dd-dc0c4a8e9d50","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_ut = parse_file(\"../test/data/opendss/ut_trans_2w_yy.dss\")","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 82e9330b-2e94-42a1-b56d-430674b11241","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_ut[\"transformer\"][\"tx1\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2c358d7a-5d84-4f62-a147-577bb775ac7f","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nWe can see that \"noloadloss\", \"rw\", and \"imag\" are non-zero, but if we apply the make_lossless! function we can see these parameters are set to zero, effectively eliminating the losses\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 5e5dd24c-95b5-4951-8547-13e20bb0feec","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"make_lossless!(eng_ut)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 45c320dd-e0b2-46ec-af09-d83e5652026d","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_ut[\"transformer\"][\"tx1\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 723f4e26-8065-4e22-8c5c-de32d2e42b47","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"Alternatively, we can apply this function at parse\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 58f80651-4a44-4781-a6c0-a056ec76b07e","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"parse_file(\"../test/data/opendss/ut_trans_2w_yy.dss\"; transformations=[make_lossless!])","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ b1e55263-9c76-43b2-b91c-115b2f080182","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nAnother transformation function included in PowerModelsDistribution is the `apply_voltage_bounds!` function, which will apply some voltage bounds in SI units, given some percent value, _e.g._ if we want the lower bound on voltage to be `0.9` and upper bound `1.1` after per-unit conversion\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2cdd682a-b97f-49dc-8829-47e7146497b9","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"apply_voltage_bounds!(eng_ut; vm_lb=0.9, vm_ub=1.1)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 74836b2c-db67-4435-a552-ba5c3e93e43f","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"eng_ut[\"bus\"][\"2\"]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2bf802e2-f769-48db-adef-a5a066c565c2","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"Alternatively, this can be specified at parse by\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 4020d67a-4a9e-4030-b7cd-e5d60e78495c","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"parse_file(\"../test/data/opendss/ut_trans_2w_yy.dss\"; transformations=[make_lossless!, (apply_voltage_bounds!, \"vm_lb\"=>0.9, \"vm_ub\"=>1.1)])","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ dde2da59-63fa-4549-8829-491e5f3c675e","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n### Transformations on Multinetworks\n\nTransformations on Multinetworks should happen __before__ the network is converted into a `MATHEMATICAL` data model, so that they can generally follow the same pattern as shown above and can be seen in the `make_lossless!` and `apply_voltage_bounds!` functions already in PowerModelsDistribution\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 2c375878-f16b-4833-9aaa-b826fbe056a2","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n# Mathematical Model\n\nIn this section we introduce the mathematical model, which was the previous user-facing model in PowerModelsDistribution, explain how conversions between the model happen in practice, and give an example of how to do this conversion manually\n\nIn practice, unless the user is interested, the conversion between the `ENGINEERING` and `MATHEMATICAL` models should be seemless and invisible to the user. By providing an `ENGINEERING` model to a `run_` command the `run_mc_model` command will know to convert the model to `MATHEMATICAL`, which will be used to the generate the JuMP model that will actually be optimized. Similarly, the solution generated by this optimization will be automatically converted back to the format of the `ENGINEERING` model.\n\nLet's first take a look at how to convert to the `MATHEMATICAL` model\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ a7348fc8-b25e-4ecf-9fe6-314036b7df9c","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"math = transform_data_model(eng)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 54280696-beec-47ee-8114-ea9311aca9eb","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nThere are a couple of things to notice right away. First, the data model transform automatically converts the model to per-unit. Second, there are a lot of empty component sets, whereas in the `ENGINEERING` model, only component types that had components in them were listed. In the `MATHEMATICAL` model certain component dictionaries are always expected to exist, and the `eng2math` conversion functions will automatically populate these.\n\nNext, there are a few unusal fields, such as `\"settings\"`, which previously didn't exist in the `MATHEMATICAL` model. This is used for the per-unit conversion specifically in PowerModelsDistribution. Also, is the `\"map\"` field, which is a `Vector` of Dictionaries that enable the conversion back to `ENGINEERING` from `MATHEMATICAL`. Without this it would be impossible to convert back, and in fact only the solution can be converted, because some properties are combined destructively during the conversion to the `MATHEMATICAL` model, and therefore cannot be reverse engineered. However, since the conversion to `MATHEMATICAL` is not in-place, you will always have a copy of `eng` alongside `math`.\n\nHere is an example of one of the `\"map\"` entries\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 1dc06007-b413-4cbb-b43b-2c7955ecb6d2","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"math[\"map\"][end]","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 96a65bdc-7ee4-4e9f-94f5-8a83f7512fe9","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nAlternatively, the `MATHEMATICAL` model can be returned directly from the `parse_file` command with the `data_model` keyword argument\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 545c9270-257a-46e8-970d-6a9fcf09dc17","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"parse_file(\"../test/data/opendss/case3_unbalanced.dss\"; data_model=MATHEMATICAL)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ fda420a1-e563-4a41-84d4-2a570bf163ae","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n### Multinetworks\n\nIn this subsection we cover parsing into a multinetwork data structure, which is a structure that only exists in the `MATHEMATICAL` model\n\nFor those unfamiliar, the InfrastructureModels family of packages has a feature called multinetworks, which is useful for, among other things, running optimization problems on time series type problems.\n\nMultinetwork data structures are formatted like so\n","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"julia mn = Dict{String,Any}(     \"multinetwork\" => true,     \"nw\" => Dict{String,Any}(         \"1\" => Dict{String,Any}(             \"bus\" => Dict{String,Any}(),             ...         ),         ...     ),     ... )","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"\nTo automatically create a multinetwork structure from an engineering model that contains `time_series` elements, we can use the `multinetwork` keyword argument in `transform_data_model`\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 785a1c39-aa56-4244-b7b9-31d7a31b73c3","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"math_mn = transform_data_model(eng_ts; multinetwork=true)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ ad48b3ad-ede1-4109-9647-007c1d8d196c","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"parse_file(\"../test/data/opendss/case3_balanced.dss\"; multinetwork=true, data_model=MATHEMATICAL)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 666223d5-802a-4164-882c-8ab1a1319d6d","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n### Running `MATHEMATICAL` models\n\nThere is very little difference from the user point-of-view in running `MATHEMATICAL` models other than the results will not be automatically converted back to the the format of the `ENGINEERING` model\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ e3fe0a5e-9431-453d-b7e5-821de624a4ef","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result_math = solve_mc_opf(math, ACPUPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 5ab6cd16-3c24-4f60-bdf2-7f48b3e25085","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\nIt is also possible to manually convert the solution back to the `ENGINEERING` format, provided you have the __map__\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 05360163-4a6f-41da-8fae-070e327c2605","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"sol_eng = transform_solution(result_math[\"solution\"], math)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ b8e01ce2-d7f7-4c73-8230-9fdeecab2c4e","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n#### Running `MATHEMATICAL` Multinetworks\n\nAs with the `ENGINEERING` example of running a multinetwork problem, you will need a multinetwork problem specification, and as with the previous single `MATHEMATICAL` network example above, we only obtain the `MATHEMATICAL` solution, and can transform the solution in the same manner as before\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 96757dde-52be-4930-9bdd-9303bb715e55","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"result_math_mn = PowerModelsDistribution._solve_mn_mc_opb(math_mn, NFAUPowerModel, ipopt_solver)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 867d8d1d-042a-42ec-843e-56b8ba2db96a","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"sol_eng_mn = transform_solution(result_math_mn[\"solution\"], math_mn)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ db4d9eb9-e120-4489-a3c2-48c43f2a3c3b","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n# Building the JuMP Model\n\nIn some cases the user will want to directly build the JuMP model, which would traditionally be done with `instantiate_model` from PowerModels. In order to facilitate using the `ENGINEERING` model we have introduced `instantiate_mc_model` to aid in the generation of the JuMP model. `instantiate_mc_model` will automatically convert the data model to MATHEMATICAL if necessary (notifying the user of the conversion), and pass the MATHEMATICAL model off to PowerModels' `instantiate_model` with `ref_add_arcs_transformer!` in `ref_extensions`, which is a required ref extension for PowerModelsDistribution.\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 4603bc56-c402-48af-9715-0722e42d90f7","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"pm_eng = instantiate_mc_model(eng, NFAUPowerModel, build_mc_opf)","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 12ba02ff-91dd-4355-ad2b-f3ca3b61e318","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"\"```$(pm_eng.model)```\" |> Markdown.parse","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ 07fc5a1b-4a9e-4a10-bf7a-d2682769ac97","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"md\"\"\"\n# Conclusion\n\nThis concludes the introduction to the `ENGINEERING` data model and conversion to the `MATHEMATICAL` model. We hope that you will find this new data model abstraction easy to use and simple to understand\n\"\"\"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"╔═╡ Cell order: ╟─c55b2c42-9d27-11eb-24ca-e90a5472ffbb ╠═f30cd0d0-b0da-4f63-a245-568a763a93d8 ╟─1e791262-261d-4756-bec4-edebe4732700 ╠═89de80df-1dd0-4f94-a27d-74693a978059 ╟─e22a7d3e-3f21-41b0-abf2-2c723e87c57e ╠═5fe2d186-40c6-46c2-823e-9401cb3b6d6c ╟─c884fd5b-4ecb-402b-b228-01b9a61db8bf ╠═a5b736f9-2776-4760-b073-d02027baef13 ╟─29a8a560-7d5e-4929-877a-2dab17309968 ╠═9ac6b0ed-58a8-4079-aa9f-d70024f4d4b4 ╟─89846878-ebfc-49a5-91ef-762f692ba5ea ╠═8ba081b4-8444-48e0-afce-20649f7fdd01 ╟─2a8c1536-ef5f-4e37-b30e-1bb73982d7b0 ╠═83ce434c-0f92-46a8-8648-322084044600 ╠═2f9c3f64-3e5d-423f-939e-8d96bd19e7fe ╟─f06b9592-0e16-4fd1-bf6e-624ec0cdb8fb ╠═b15593b9-f775-47af-aa9b-4980a4028faa ╟─2e4fe000-449c-4fc0-8707-4c51ac50ab03 ╠═36ca17bc-b560-48c9-988f-255780479d05 ╟─7e5811cf-86a2-43fb-8c94-44091f33c031 ╠═026088f7-b1df-4647-ad81-52c6c8ea7944 ╟─5f72ecec-bb3f-4231-93c1-719e38e17be4 ╠═f070dbbc-1a55-48f2-aa21-2119eb573b5b ╟─f3458a5c-70c6-4d0c-8253-4feb0c87ee76 ╠═542e592f-8f75-41f9-8f98-5373b431fcc6 ╟─d0e02ee5-f57c-4286-940d-b01097c840be ╠═e852712c-d09a-41e1-9785-308c219c7ad8 ╟─0eba403e-c2ba-4af3-8dcc-fe14a3c22bd7 ╟─8d5701d1-9e91-43b5-975b-fc8e0e306e99 ╠═745f33bf-98d7-4b27-95fd-ec6bf5e3d5cf ╟─fb81d3c1-a47b-46d9-b463-1766022be114 ╠═27d5a237-4c2e-4b14-a082-f4847153c8d5 ╟─564200e0-2080-44da-8dbf-37c5e3a38412 ╠═8b066039-ed65-4617-b404-86952d3fc78e ╟─a09de8ab-c1e1-4c9f-9d86-4268ce503cae ╠═763a1504-f927-4dfc-a042-ac66324708a9 ╠═e7b588e9-fb5f-4383-b5c6-bce9ed8f5a60 ╟─f882f070-74af-4f3b-9ad1-bd7ad453778f ╠═f2fa779e-f62d-4053-b055-e9f0aee6c3f7 ╟─544108d1-d1a7-4dc6-9a3c-6a10025cb8a3 ╠═ae8daf6c-4055-497e-905c-d6d5a6373ad3 ╟─3d86989a-a4db-4766-aec7-abc9a25ffde8 ╠═7a86e26d-fdf6-41b6-b1dd-dc0c4a8e9d50 ╠═82e9330b-2e94-42a1-b56d-430674b11241 ╟─2c358d7a-5d84-4f62-a147-577bb775ac7f ╠═5e5dd24c-95b5-4951-8547-13e20bb0feec ╠═45c320dd-e0b2-46ec-af09-d83e5652026d ╟─723f4e26-8065-4e22-8c5c-de32d2e42b47 ╠═58f80651-4a44-4781-a6c0-a056ec76b07e ╟─b1e55263-9c76-43b2-b91c-115b2f080182 ╠═2cdd682a-b97f-49dc-8829-47e7146497b9 ╠═74836b2c-db67-4435-a552-ba5c3e93e43f ╟─2bf802e2-f769-48db-adef-a5a066c565c2 ╠═4020d67a-4a9e-4030-b7cd-e5d60e78495c ╟─dde2da59-63fa-4549-8829-491e5f3c675e ╟─2c375878-f16b-4833-9aaa-b826fbe056a2 ╠═a7348fc8-b25e-4ecf-9fe6-314036b7df9c ╟─54280696-beec-47ee-8114-ea9311aca9eb ╠═1dc06007-b413-4cbb-b43b-2c7955ecb6d2 ╟─96a65bdc-7ee4-4e9f-94f5-8a83f7512fe9 ╠═545c9270-257a-46e8-970d-6a9fcf09dc17 ╟─fda420a1-e563-4a41-84d4-2a570bf163ae ╠═785a1c39-aa56-4244-b7b9-31d7a31b73c3 ╠═ad48b3ad-ede1-4109-9647-007c1d8d196c ╟─666223d5-802a-4164-882c-8ab1a1319d6d ╠═e3fe0a5e-9431-453d-b7e5-821de624a4ef ╟─5ab6cd16-3c24-4f60-bdf2-7f48b3e25085 ╠═05360163-4a6f-41da-8fae-070e327c2605 ╟─b8e01ce2-d7f7-4c73-8230-9fdeecab2c4e ╠═96757dde-52be-4930-9bdd-9303bb715e55 ╠═867d8d1d-042a-42ec-843e-56b8ba2db96a ╟─db4d9eb9-e120-4489-a3c2-48c43f2a3c3b ╠═4603bc56-c402-48af-9715-0722e42d90f7 ╟─12ba02ff-91dd-4355-ad2b-f3ca3b61e318 ╟─07fc5a1b-4a9e-4a10-bf7a-d2682769ac97","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"","category":"page"},{"location":"engineering_model/","page":"Engineering Model","title":"Engineering Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"formulations/#Network-Formulations","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/#Type-Hierarchy","page":"Network Formulations","title":"Type Hierarchy","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"PowerModelsDistribution has a rich model type hierarchy similiar to PowerModels. At the top of the type hierarchy we can distinguish between conic, active power only, and branch flow models:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"abstract type AbstractUnbalancedConicModel <: AbstractPowerModel end\nabstract type AbstractUnbalancedActivePowerModel <: AbstractPowerModel end\nabstract type AbstractUBFModel <: AbstractPowerModel end\nabstract type AbstractUBFQPModel <: AbstractUBFModel end\nabstract type AbstractUBFConicModel <: AbstractUBFModel end\nconst AbstractUnbalancedConicModels = Union{AbstractUnbalancedConicModel, AbstractUBFConicModel}","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Several nonlinear (non-convex) models are available at the top level:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"abstract type AbstractUnbalancedACPModel <: AbstractPowerModel end\nabstract type AbstractUnbalancedACRModel <: AbstractPowerModel end\nabstract type AbstractUnbalancedIVRModel <: AbstractUnbalancedACRModel end","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"The following relaxations are available under these hierarchies:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"abstract type AbstractNLPUBFModel <: AbstractUBFQPModel end\nabstract type AbstractConicUBFModel <: AbstractUBFConicModel end\nconst AbstractUBFModels = Union{AbstractNLPUBFModel, AbstractConicUBFModel}\n\nabstract type SDPUBFModel <: AbstractConicUBFModel end\nabstract type SDPUBFKCLMXModel <: SDPUBFModel end\nabstract type SOCNLPUBFModel <: AbstractNLPUBFModel end\nabstract type SOCConicUBFModel <: AbstractConicUBFModel end\nconst SOCUBFModels = Union{SOCNLPUBFModel, SOCConicUBFModel}","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"where UBF is an unbalanced variant of the Branch Flow models from PowerModels. Models which do not contain UBF in their name are Bus Injection Models e.g. AbstractUnbalancedACPModel. Finally, some linear unbalanced power flow models are available under the following hierarchy:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"abstract type AbstractUnbalancedDCPModel <: AbstractUnbalancedActivePowerModel end\nabstract type AbstractUnbalancedNFAModel <: AbstractUnbalancedDCPModel end\nabstract type AbstractLPUBFModel <: AbstractNLPUBFModel end\nabstract type LPUBFDiagModel <: AbstractLPUBFModel end\nconst LinDist3FlowModel = LPUBFDiagModel","category":"page"},{"location":"formulations/#Power-Models","page":"Network Formulations","title":"Power Models","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Each of these Models can be used as the type parameter for an UnbalancedPowerModel:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"mutable struct ACPUPowerModel <: AbstractUnbalancedACPModel @pmd_fields end\nmutable struct ACRUPowerModel <: AbstractUnbalancedACRModel @pmd_fields end\nmutable struct DCPUPowerModel <: AbstractUnbalancedDCPModel @pmd_fields end\nmutable struct NFAUPowerModel <: AbstractUnbalancedNFAModel @pmd_fields end\n\nmutable struct SDPUBFPowerModel <: SDPUBFModel @pmd_fields end\nmutable struct SDPUBFKCLMXPowerModel <: SDPUBFKCLMXModel @pmd_fields end\n\nmutable struct SOCNLPUBFPowerModel <: SOCNLPUBFModel @pmd_fields end\nmutable struct SOCConicUBFPowerModel <: SOCConicUBFModel @pmd_fields end\n\nmutable struct LPUBFDiagPowerModel <: LPUBFDiagModel @pmd_fields end\nconst LinDist3FlowPowerModel = LPUBFDiagPowerModel","category":"page"},{"location":"formulations/#Optimization-problem-classes","page":"Network Formulations","title":"Optimization problem classes","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"NLP (nonconvex): ACPUPowerModel, ACRUPowerModel, IVRUPowerModel\nSDP: SDPUBFPowerModel, SDPUBFKCLMXPowerModel\nSOC(-representable): SOCNLPUBFPowerModel, SOCConicUBFPowerModel\nLinear: LPUBFDiagPowerModel (LinDist3FlowPowerModel), DCPUPowerModel, NFAUPowerModel","category":"page"},{"location":"formulations/#Matrix-equations-versus-scalar-equations","page":"Network Formulations","title":"Matrix equations versus scalar equations","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"JuMP supports vectorized syntax, but not for nonlinear constraints. Therefore, certain formulations must be implemented in a scalar fashion. Other formulations can be written as matrix (in)equalities. The current implementations are categorized as follows:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Scalar: ACPUPowerModel, ACRUPowerModel, IVRUPowerModel, DCPUPowerModel, NFAPowerMoel\nMatrix: SDPUBFPowerModel, SDPUBFKCLMXPowerModel, SOCNLPUBFPowerModel, SOCConicUBFPowerModel, LPUBFDiagPowerModel","category":"page"},{"location":"enums/#PowerModelsDistribution-Enum-Types","page":"Enums in Engineering Model","title":"PowerModelsDistribution Enum Types","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"Within the PowerModelsDistribution Engineering Model we have included the use of Enums. Here we document the fields for which Enums are expected and the possible Enums available","category":"page"},{"location":"enums/#Data-Model","page":"Enums in Engineering Model","title":"Data Model","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"Any place in PowerModelsDistribution that calls for specifying the data_model, either in function calls or the \"data_model\" field inside the data structure itself, will expect a DataModel type","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum DataModel ENGINEERING MATHEMATICAL DSS","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"The DSS data model is an output of parse_dss, and is an untranslated raw parse of a DSS file. This Enum exists for use by count_nodes, where the method to count the number of active nodes is different between all three models","category":"page"},{"location":"enums/#Component-statuses","page":"Enums in Engineering Model","title":"Component statuses","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"All \"status\" fields in the ENGINEERING model expect a Status type:","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum Status ENABLED DISABLED","category":"page"},{"location":"enums/#Connection-Configurations","page":"Enums in Engineering Model","title":"Connection Configurations","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"All \"configuration\" fields in the ENGINEERING model expect a ConnConfig type:","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum ConnConfig WYE DELTA","category":"page"},{"location":"enums/#Load-Models","page":"Enums in Engineering Model","title":"Load Models","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For load objects, the \"model\" field expects a LoadModel type to specify the type of load model to use:","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum LoadModel POWER CURRENT IMPEDANCE EXPONENTIAL ZIP","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"where POWER indicates constant power, CURRENT indicates constant current, IMPEDANCE indicates constant impedance, EXPONENTIAL indicates an exponential load model, and ZIP indicates a ZIP model","category":"page"},{"location":"enums/#Shunt-Models","page":"Enums in Engineering Model","title":"Shunt Models","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For shunt objects, the \"model\" field expects a ShuntModel type to specify the origin of the shunt object, which is important for transient analysis:","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum ShuntModel GENERIC CAPACITOR REACTOR","category":"page"},{"location":"enums/#Switch-States","page":"Enums in Engineering Model","title":"Switch States","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For switch objects, the \"state\" field expects a SwitchState type to specify whether the switch is currently open or closed:","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum SwitchState OPEN CLOSED","category":"page"},{"location":"enums/#Dispatchable-Components","page":"Enums in Engineering Model","title":"Dispatchable Components","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"Some components can be dispatchable, e.g. if a switch is dispatchable that means it is free to open or close, but if not then it is fixed in place, or if a load is dispatchable it implies that it can be shed in a run_mc_mld problem:","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum Dispatchable NO YES","category":"page"},{"location":"enums/#Generator-Control-Modes","page":"Enums in Engineering Model","title":"Generator Control Modes","text":"","category":"section"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For generator objects, the \"control_mode\" field expects a ControlMode type to specify whether the generator is operating in an isochronous mode (i.e. is frequency forming) or droop mode (i.e. is frequency following):","category":"page"},{"location":"enums/","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"@enum ControlMode FREQUENCYDROOP ISOCHRONOUS","category":"page"},{"location":"#PowerModelsDistribution.jl-Documentation","page":"Home","title":"PowerModelsDistribution.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PowerModelsDistribution","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerModelsDistribution.jl is a Julia/JuMP extension package to PowerModels.jl for modeling of Multi-Phase (with a focus on three-phase) power grids.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"PowerModelsDistribution\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the current development version, add the package with a reference to the master branch of our git repository","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(name=\"PowerModelsDistribution\", rev=\"master\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"At least one solver is required for running PowerModelsDistribution.  The open-source solver Ipopt is recommended, as it is extremely fast, and can be used to solve a wide variety of the problems and network formulations provided in PowerModelsDistribution.  The Ipopt solver can be installed via the package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"Ipopt\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.test(\"PowerModelsDistribution\")","category":"page"}]
}
